<?xml version='1.0' encoding='UTF-8'?>
<rss 
version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tech — interfluidity</title>
    <link>https://tech.interfluidity.com/index.html</link>
    <description><![CDATA[Feed for blog 'tech — interfluidity', generated by unstatic]]></description>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 May 2025 13:48:19 -0400</lastBuildDate>
    <generator>https://github.com/swaldman/unstatic</generator>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link
    type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.rss"/>
    <iffy:curation>
      <iffy:single/>
    </iffy:curation>
    <iffy:completeness>Content</iffy:completeness>
    <item>
      <pubDate>Tue, 12 Nov 2024 06:30:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html</guid>
      <description>
        <![CDATA[This blog now generates single-item RSS alongside each blog post. This is in preparation for how I mean to support blog-to-blog comments, most directly. But in general it is offered as an alternative to approaches like microformats. Microformats exist and other people use them. I feel a bit bad not to adopt them. But my preference is to have meta-data more cleanly separated from displayed HTML, even if it is "POSH". It seems to me like too many concerns are mixed. If microformats were very...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html</link>
      <title>Supporting single-item RSS</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-supporting-single-item-rss">
 <div class="entry-header">
 </div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>This blog now <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.rss">generates</a> single-item RSS alongside each blog post.</p>
   <p>This is in preparation for how I mean to support blog-to-blog comments, most directly.</p>
   <p>But in general it is offered as an alternative to approaches like <a href="https://microformats.org/">microformats</a>.</p>
   <p>Microformats exist and other people use them. I feel a bit bad not to adopt them. But my preference is to have meta-data more cleanly separated from displayed HTML, even if it is "<a href="https://microformats.org/wiki/posh">POSH</a>". It seems to me like too many concerns are mixed.</p>
   <p>If microformats were very widely adopted — particularly if the JVM ecosystem already had well-supported, widely used microformats parsers — I might swallow my own preference and run with them. But I don't think that's the case. I'm going to have to do my own parsing, and I have good tools for that with XML and RSS.</p>
   <p><a href="https://github.com/swaldman/unstatic"><code>unstatic</code></a> <code>SimpleBlog</code> instances now support generating single-item RSS. Just override</p>
   <pre><code class="language-scala">val generateSingleItemRss : Boolean
</code></pre>
   <p>to <code>true</code>, and they will appear.</p>
   <p>By default, each entry's single-item RSS is placed by converting each <code>whatever.html</code> to <code>whatever.rss</code>, under the same path. (If the leaf of the path does not end with <code>.html</code>, then <code>.rss</code> is simply appended to the full path.)</p>
   <p>If you prefer a different scheme, you can override</p>
   <pre><code class="language-scala">def singleItemRssSiteRootedFromPermalinkSiteRooted( permalinkSiteRooted : Rooted ) : Rooted
</code></pre>
   <p>where <code>Rooted</code> is a <a href="https://github.com/swaldman/unstatic/blob/main/src/unstatic/UrlPath.scala"><code>unstantic.UrlPath.Rooted</code></a>.</p>
   <p>Single-item RSS and the HTML "permalink" for the item should mutually refer to one another.</p>
   <p>In the HTML header tag, we add a <code>&lt;link&gt;</code> tag with <code>rel="alternate"</code> to point to the single-item RSS.</p>
   <p>We <em>don't</em> want feed readers to subscribe to single-item RSS, so, a bit clumsily, we make up a special content type that feed readers won't recognize, <code>application/x-single-item-rss+xml</code>.</p>
   <p>Here's the link you'll find in the source of this post.</p>
   <pre><code class="language-html">&lt;link rel="alternate" type="application/x-single-item-rss+xml" title="Supporting single-item RSS" href="index.rss"&gt;
</code></pre>
   <p>The single-item RSS links back to the HTML as a matter of course, via the standard <code>&lt;link&gt;</code> element within the sole <code>&lt;item&gt;</code>.</p>
   <p>Check out <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.rss">the single-item RSS for this post</a>!</p>
   <hr>
   <div style="font-size: smaller">
    <p><strong>Note:</strong> If an <code>&lt;atom:link rel="self" /&gt;</code> tag is included in the <code>&lt;channel&gt;</code> element of a single-item RSS stream, the type should be the standard <code>type="application/rss+xml"</code>, <span style="color: red"> <strong>and definitely not</strong> </span> <code>application/x-single-item-rss+xml</code>. (I recommend <code>&lt;atom:link rel="self" /&gt;</code> <em>always</em> be included in the <code>&lt;channel&gt;</code> of an RSS stream, whenever there exists a stable link to the stream.) Single-item RSS is just standard RSS for all purposes other than a feed-reader deciding whether to treat a feed as subscribable.</p>
   </div>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-11-12 @ <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" class="pubtime">06:30 AM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article">
</div><!-- after-article -->]]>
      </content:encoded>
    </item>
  </channel>
</rss>
