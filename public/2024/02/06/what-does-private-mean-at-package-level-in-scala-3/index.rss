<?xml version='1.0' encoding='UTF-8'?>
<rss 
version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tech — interfluidity</title>
    <link>https://tech.interfluidity.com/index.html</link>
    <description><![CDATA[Feed for blog 'tech — interfluidity', generated by unstatic]]></description>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2025 22:10:44 -0500</lastBuildDate>
    <generator>https://github.com/swaldman/unstatic</generator>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link
    type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.rss"/>
    <iffy:curation>
      <iffy:single/>
    </iffy:curation>
    <iffy:completeness>Content</iffy:completeness>
    <item>
      <pubDate>Tue, 6 Feb 2024 17:50:00 -0500</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.html
      </guid>
      <description>
        <![CDATA[TL; DR: private declarations at a top-level scope of a package in Scala 3 are equivalent to a private[pkg] in other contexts. They are accessible to everything within the package and its subpackages, but nothing else. In Scala 2, to place a declaration at the "package" level, one would define a "package object": package top

package object pkg {
  private val Hush = 0
  val Loud = Int.MaxValue
}
 Given this one might refer to Loud from anywhere with fully-qualified name top.pkg.Loud import...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.html</link>
      <title>What does private mean at package level in Scala 3?</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header">
 </div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR:</strong></p>
   <ul>
    <li><code>private</code> declarations at a top-level scope of a package in Scala 3 are equivalent to a <code>private[pkg]</code> in other contexts.</li>
    <li>They are accessible to everything within the package and its subpackages, but nothing else.</li>
   </ul>
   <hr>
   <p>In Scala 2, to place a declaration at the "package" level, one would define a "package object":</p>
   <pre><code class="language-scala">package top

package object pkg {
  private val Hush = 0
  val Loud = Int.MaxValue
}
</code></pre>
   <p>Given this</p>
   <ul>
    <li>one might refer to <code>Loud</code> from anywhere with fully-qualified name <code>top.pkg.Loud</code></li>
    <li><code>import top.pkg._</code> would pick it up</li>
    <li>inside the package <code>top.pkg</code> one coul refer to it simply as <code>Loud</code></li>
   </ul>
   <p>So far, so intuitive.</p>
   <p>In Scala 2, the semantics of <code>private val Loud</code> was also intuitive. A <code>package object</code> is just an <code>object</code>. A <code>private</code> member of an <code>object</code> is only visible within that <code>object</code>'s scope. While the Scala compiler does some magic to make nonprivate declarations more broadly visible, access to <code>private</code> members of the <code>package object</code> was restricted to the <code>object</code> in the ordinary way.</p>
   <p>But Scala 3 introduces "naked" top-level declarations, which I find I use constantly.</p>
   <p>So the declarations above might translate to:</p>
   <pre><code class="language-scala">package top.pkg

private val Hush = 0
val Loud = Int.MaxValue
</code></pre>
   <p>There is no <code>object</code> scope! So what does private even mean in this context.</p>
   <p>I could imagine four possibilities:</p>
   <ol>
    <li><code>private</code> to a virtual object scope constituted of all top-level declaraions</li>
    <li><code>private</code> to the top-level of the current compilation unit (i.e. file)</li>
    <li><code>private</code> to the current compilation unit (including nested scopes)</li>
    <li><code>private</code> to the package as a whole, i.e. the same as <code>private[pkg]</code></li>
   </ol>
   <p>Playing around, it looks like #4 is the winner.</p>
   <p>A <code>private</code> top-level declaration seems visible to any code in the package, even if defined in other files or directories. It is visible from anywhere in the <code>pkg</code> or subpackages of <code>pkg</code>.</p>
   <p>So now I know! And so do you!</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-02-06 @ <a href="https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.html" class="pubtime">05:50 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article">
</div><!-- after-article -->]]>
      </content:encoded>
    </item>
  </channel>
</rss>
