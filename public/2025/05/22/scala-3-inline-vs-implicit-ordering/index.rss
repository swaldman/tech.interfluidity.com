<?xml version='1.0' encoding='UTF-8'?>
<rss 
version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tech — interfluidity</title>
    <link>https://tech.interfluidity.com/index.html</link>
    <description><![CDATA[Feed for blog 'tech — interfluidity', generated by unstatic]]></description>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 May 2025 18:30:16 -0400</lastBuildDate>
    <generator>https://github.com/swaldman/unstatic</generator>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link
    type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.rss"/>
    <iffy:curation>
      <iffy:single/>
    </iffy:curation>
    <iffy:completeness>Content</iffy:completeness>
    <item>
      <pubDate>Thu, 22 May 2025 18:30:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.html
      </guid>
      <description>
        <![CDATA[I've been playing around with Scala 3's souped up inline construct, which is a very cool, relatively approachable, bit of metaprogramming. (See "Rock the JVM" for a quick explainer.) A thing that confused me, though, is the ordering of inlining vs implicit resolution. Consider... object InlineImplicitOrdering:
  given Int = 10

  inline def printIt(using i : Int) : Unit =
    println(summon[Int])

  object LocalContext:
    given Int = 22

    def printItLocally : Unit = printIt

  @main
  def...]]>
      </description>
      <link>https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.html</link>
      <title>Scala 3 inline vs implicit ordering</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-scala-3-inline-vs-implicit-ordering">
 <div class="entry-header">
 </div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I've been playing around with Scala 3's <a href="https://docs.scala-lang.org/scala3/guides/macros/inline.html">souped up</a> <a href="https://docs.scala-lang.org/scala3/reference/metaprogramming/inline.html"><code>inline</code></a> construct, which is a very cool, relatively approachable, bit of metaprogramming.</p>
   <p>(See "Rock the JVM" for a <a href="https://rockthejvm.com/articles/scala-3-inlines">quick explainer</a>.)</p>
   <p>A thing that confused me, though, is the ordering of inlining vs implicit resolution. Consider...</p>
   <pre><code class="language-scala">object InlineImplicitOrdering:
  given Int = 10

  inline def printIt(using i : Int) : Unit =
    println(summon[Int])

  object LocalContext:
    given Int = 22

    def printItLocally : Unit = printIt

  @main
  def go() =
    printIt
    LocalContext.printItLocally
</code></pre>
   <p>It's straightforward that calling <code>printIt</code> prints <code>10</code>.</p>
   <p>It's not so straightforward what <code>LocalContext.printItLocally</code> will do.</p>
   <p>Implicit resolution is also a compile-time operation. If implicit resolution happens before the inlining, then <code>LocalContext.printItLocally</code> might print <code>10</code>. If implicit resolution happens after the inlining is resolved, then <code>LocalContext.printItLocally</code> should print <code>22</code>.</p>
   <p>In reality, it prints 22.</p>
   <p>The output of this program is</p>
   <pre><code class="language-plaintext">10
22
</code></pre>
   <p>I wondered whether this would always be the case, or whether adding modifiers might change this ordering. In particular I know that it's possible to declare <code>inline given</code>, rather than straight <code>given</code>, and I wondered whether this might cause the <code>printIt</code> function to collapse to <code>println(10)</code>.</p>
   <p>The answer is no. As far as I can tell, there is no set of modifiers that would cause the implicit resolution to occur before the final inlining. Neither <code>inline given</code>, nor <code>transparent inline given</code>, nor marking the implicit argument <code>inline</code> has this effect.</p>
   <p>As far as I can tell, the hard and fast rule is that inline resolution is completed prior to any implicit resolution. Implicits will be resolved at the ultimate, inlined call site, and never before.</p>
   <p>Which is the behavior I find that I want! I am glad it does not seem to be fragile.</p>
   <p>(I'd still like to understand what <code>inline given</code> is for, though.)</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-05-22 @ <a href="https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.html" class="pubtime">06:30 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article">
</div><!-- after-article -->]]>
      </content:encoded>
    </item>
  </channel>
</rss>
