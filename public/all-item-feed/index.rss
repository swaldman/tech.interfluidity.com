<?xml version='1.0' encoding='UTF-8'?>
<rss 
version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tech — interfluidity</title>
    <link>https://tech.interfluidity.com/index.html</link>
    <description><![CDATA[Feed for blog 'tech — interfluidity', generated by unstatic]]></description>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Oct 2025 12:21:12 -0400</lastBuildDate>
    <generator>https://github.com/swaldman/unstatic</generator>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/all-item-feed/index.rss"/>
    <iffy:curation>
      <iffy:all/>
    </iffy:curation>
    <iffy:completeness>Content</iffy:completeness>
    <item>
      <pubDate>Tue, 28 Oct 2025 11:55:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/10/28/turn-your-bluesky-archive-into-a-readable-hostable-static-site-with-fossilphant/index.html
      </guid>
      <description>
        <![CDATA[A couple of years ago, I wrote fossilphant, a utility for converting archives exported from Mastodon accounts into readable, self-hostable static sites. You can see what those look like here or here or here. (I've wandered across three “instances” on Mastodon!) Now you can turn your Bluesky repo.car file into a static site as well! Here's how! Install scala-cli. It's very easy! Download two scripts, download-bluesky-images and fossilphant-bluesky. (To be sure you are using the latest version,...]]>
      </description>
      <link>
        https://tech.interfluidity.com/2025/10/28/turn-your-bluesky-archive-into-a-readable-hostable-static-site-with-fossilphant/index.html
      </link>
      <title>Turn your Bluesky archive into a readable, hostable static site with fossilphant</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-fossilphant-bluesky-tutorial">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A couple of years ago, I wrote <a href="https://github.com/swaldman/fossilphant">fossilphant</a>, a utility for converting archives exported from Mastodon accounts into readable, self-hostable static sites. You can see what those look like <a href="http://www.interfluidity.com/microblog-archives/fosstodon">here</a> or <a href="http://www.interfluidity.com/microblog-archives/econtwitter">here</a> or <a href="http://www.interfluidity.com/microblog-archives/zirkus">here</a>. (I've wandered across three “instances” on Mastodon!)</p>
  <p>Now you can turn your Bluesky <a href="https://docs.bsky.app/blog/repo-export"><code>repo.car</code></a> file into a static site as well! Here's how!</p>
  <ol>
   <li data-list-item-id="e5557116a631e7643925e3c6f0716d4bc">Install <a href="https://scala-cli.virtuslab.org/"><code>scala-cli</code></a>. It's <a href="https://scala-cli.virtuslab.org/install">very easy</a>!</li>
   <li data-list-item-id="eb7ecdd593e7f698322cac465badde060">
    <p>Download two scripts, <a href="https://github.com/swaldman/fossilphant/releases/download/v0.1.0/download-bluesky-images"><code>download-bluesky-images</code></a> and <a href="https://github.com/swaldman/fossilphant/releases/download/v0.1.0/fossilphant-bluesky"><code>fossilphant-bluesky</code></a>. (To be sure you are using the latest version, you can download them <a href="https://github.com/swaldman/fossilphant/releases">directly from github</a>.)</p>
    <p></p>
    <p>Make the scripts executable:</p>
    <pre><code class="language-plaintext">% chmod +x download-bluesky-images
% chmod +x fossilphant-bluesky</code></pre>
    <p>Try <code>./download-bluesky-images --help</code> and <code>./fossilphant-bluesky --help</code> to get a sense of the many options you won't need to use.</p>
    <p><strong>Note:</strong> <i>The first time you hit these scripts, they will download a bunch of stuff. That will only happen once.</i></p>
   </li>
   <li data-list-item-id="e679a976f8825c142b3725982466155a7">Download your <code>repo.car</code> file. In Bluesky go to <code>Settings &gt; Account &gt; Export my data</code>.</li>
   <li data-list-item-id="e52aae9ff38b391d8d8ae45065ea08bce">
    <p>Download you images into an images directory:</p>
    <pre><code class="language-plaintext">% ./download-bluesky-images --repo repo.car --output images</code></pre>
    <p>That may take a minute. When its done, you'll have a lot of images. Check out:</p>
    <pre><code class="language-plaintext">% ls images</code></pre>
   </li>
   <li data-list-item-id="e9ea9f007c89e518a26e74b0a48207311">
    <p>Now, build your static site!</p>
    <pre><code class="language-plaintext">% ./fossilphant-bluesky --handle=interfluidity.com --images=images repo.car</code></pre>
    <p>Note that you have to provide the DNS handle that you use for your Bluesky account. Your archive does not include this, just your <a href="https://atproto.com/specs/did">AT-proto "did"</a> ("decentralized identifier").</p>
   </li>
   <li>
    <p>You'll find a directory called <code>public</code> has now appeared. Open its <code>index.html</code> file and behold!</p>
   </li>
  </ol>
  <p>You can take a peek at my archive <a href="https://www.interfluidity.com/microblog-archives/bluesky/">here</a>. That's it!</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-10-28 @ <a href="https://tech.interfluidity.com/2025/10/28/turn-your-bluesky-archive-into-a-readable-hostable-static-site-with-fossilphant/index.html" class="pubtime">11:55 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 30 Aug 2025 18:50:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index-updated-2025-08-30-18-50-00.html</guid>
      <description>
        <![CDATA[A significant update of The 'iffy' XML namespace was made on 2025-08-30 @ 06:50 PM EDT. → Revise definition of curation, so it has only three types: all, selection, and single. iffy:recent becomes a query under selection. The post was originally published 2024-05-13 @ 04:10 AM EDT. This is an automatically generated post. by Update-o-Bot on 2025-08-30 @ 06:50 PM...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index-updated-2025-08-30-18-50-00.html</link>
      <title>Updated: The 'iffy' XML namespace</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2025-08-30T22:50:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Revise definition of curation, so it has only three types: all, selection, and single. iffy:recent becomes a query under selection.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-7f272e9b81c08396eb5e1f9e2209e6977a2f39af.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-7f272e9b81c08396eb5e1f9e2209e6977a2f39af-to-current.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[The 'iffy' XML namespace]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/xml/iffy/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/xml/iffy/index.html</iffy:uid>
            <atom:published>2024-05-13T08:10:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/xml/iffy/index.html"><i>The 'iffy' XML namespace</i></a> was made on 2025-08-30 @ 06:50 PM EDT.</p>
  <blockquote>→ Revise definition of curation, so it has only three types: all, selection, and single. iffy:recent becomes a query under selection.</blockquote>
  <p>The post was originally published 2024-05-13 @ 04:10 AM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2025-08-30 @ <a href="https://tech.interfluidity.com/xml/iffy/index-updated-2025-08-30-18-50-00.html" class="pubtime">06:50 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sun, 27 Jul 2025 07:00:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/07/27/using-tailscale-to-proxy-traffic-to-the-us/index.html
      </guid>
      <description>
        <![CDATA[I'm traveling, and found that some sites I needed to access forbid traffic from my location. In order to, like, pay a utility bill and renew some insurance, I needed my requests to appear to be coming from the United States. Obviously, the easy thing would be just be to install one of a zillion VPNs that would let one do this. But they usually involve some subscription fee, this is a rare issue for me and I'm cheap, and I've been curious about Tailscale, which has a free personal-use tier....]]>
      </description>
      <link>https://tech.interfluidity.com/2025/07/27/using-tailscale-to-proxy-traffic-to-the-us/index.html</link>
      <title>Using Tailscale to proxy traffic to the US</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-using-tailscale-to-proxy-traffic-to-the-us">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I'm traveling, and found that some sites I needed to access forbid traffic from my location. In order to, like, pay a utility bill and renew some insurance, I needed my requests to appear to be coming from the United States.</p>
   <p>Obviously, the easy thing would be just be to install one of a zillion VPNs that would let one do this. But they usually involve some subscription fee, this is a rare issue for me and I'm cheap, and I've been curious about <a href="https://tailscale.com/">Tailscale</a>, which has a free personal-use tier.</p>
   <p>Anyway, here's what I did:</p>
   <ol>
    <li>
     <p>Download the Tailscale app on my Mac (from the app store)</p>
    </li>
    <li>
     <p>Run the app</p>
    </li>
    <li>
     <p>Authenticate (I chose Apple as authentication provider) and give Tailscale VPN permissions</p>
    </li>
    <li>
     <p>Install Tailscale on a US-based linux machine</p>
     <ol>
      <li>
       <p>Check the linux version I'm running</p>
       <ul>
        <li>I know it's a Debian, so <a href="https://unix.stackexchange.com/questions/177205/how-do-i-know-which-version-of-debian-im-running">run</a> <code>cat /etc/*-release</code></li>
       </ul>
      </li>
      <li>
       <p>I'm skittish about <code>curl -fsSL whatever | sh</code> style installations, which Tailscale <a href="https://tailscale.com/kb/1031/install-linux">first suggests</a> for linux, so I ran (the not all that much safer) <a href="https://tailscale.com/kb/1187/install-ubuntu-2204">version-specific Tailscale installation</a>.</p>
      </li>
      <li>
       <p>The <code>sudo apt-get</code> commands installed a new kernel. I rebooted after this part of the installation.</p>
      </li>
      <li>
       <p>Running <code>tailscale up</code> prints an authetication URL and then hangs. I copy the URL, then authenticate the Linux machine from my Mac laptop, by pasting it into my browser.</p>
      </li>
     </ol>
    </li>
    <li>
     <p>Enable IP forwarding for Tailscale, see <a href="https://tailscale.com/kb/1103/exit-nodes?tab=linux">the docs</a></p>
     <ul>
      <li>For me this was the following, but do read the docs, it's system dependent:
       <pre><code class="language-plaintext">% echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf
% echo 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf
% sudo sysctl -p /etc/sysctl.d/99-tailscale.conf   
</code></pre></li>
     </ul>
    </li>
    <li>
     <p>Allow my linux box to become an exit node with <code>tailscale up --advertise-exit-node</code></p>
     <ul>
      <li>Note there was no need to do a <code>tailscale down</code> before rerunning <code>tailscale up</code> with the <code>--advertise-exit-node</code> flag</li>
     </ul>
    </li>
    <li>
     <p>On my <a href="https://login.tailscale.com/admin/machines">Tailscale dashboard</a> (link will only work when you're authenticated into Tailscale) my linux box is visitable and is marked as a potential exit node. Click "..." in the entry for the linux box, then "Edit route settings...", and check "Use as exit node."</p>
    </li>
    <li>
     <p>In the Tailscale menu visible in the Mac menu bar when Tailscale is running, go to the "Exit Nodes" submenu, then select the linux box</p>
    </li>
    <li>
     <p>Traffic is now being proxied through the US-located linux machine</p>
    </li>
    <li>
     <p>Since I don't want (for now) to use Tailscale all the time, I turn Tailscale off:</p>
     <ol>
      <li>
       <p>On the linux box <code>tailscale down</code></p>
      </li>
      <li>
       <p>On the Mac, via the Tailscale menu, reset the exit node to "None"</p>
      </li>
      <li>
       <p>Turn the green "Connected" switch to gray "Not Connected"</p>
      </li>
      <li>
       <p>Via the Tailscale menu again, quit the Tailscale app</p>
      </li>
     </ol>
     <p>Hopefully now I am back to ordinary networking.</p>
    </li>
   </ol>
   <p>I think (hope) that at any time, I can rerun the Tailscale app on my Mac, restore the "Not Connected" switch to "Connected", rerun <code>tailscale up --advertise-exit-node</code> on the linux box, then continue from Step 7 above.</p>
   <p>On linux <code>tailscale status</code> will tell you whether <code>tailscale</code> is running. I reboot and check, to ensure Tailscale is not set to start-up on boot.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-07-27 @ <a href="https://tech.interfluidity.com/2025/07/27/using-tailscale-to-proxy-traffic-to-the-us/index.html" class="pubtime">07:00 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 26 May 2025 11:25:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/05/26/zero-ish-overhead-logging-facade-in-scala-3/index.html
      </guid>
      <description>
        <![CDATA[The JVM has a lot of logging libraries. There's the built-in java.util.logging package, the venerable log4j project (now log4j2), logback, Scala-specific libraries like scribe, etc. As a library author, I've long been partial to logging facades, where you write to one API, and can choose which among the multiple "backends" will log the messages. The idea was pioneered by Apache Commons Logging. slf4j is I think the most popular logging facade these days. I long ago wrote my own facade, mlog,...]]>
      </description>
      <link>https://tech.interfluidity.com/2025/05/26/zero-ish-overhead-logging-facade-in-scala-3/index.html</link>
      <title>Zero-ish overhead logging facade in Scala 3</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-zeroish-overhead-logging-facade-in-scala-3">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>The JVM has a lot of logging libraries. There's the built-in <code>java.util.logging</code> package, the venerable log4j project (now <a href="https://logging.apache.org/log4j/2.x/index.html">log4j2</a>), <a href="https://logback.qos.ch/">logback</a>, Scala-specific libraries like <a href="https://github.com/outr/scribe">scribe</a>, etc.</p>
   <p>As a library author, I've long been partial to logging facades, where you write to one API, and can choose which among the multiple "backends" will log the messages.</p>
   <p>The idea was pioneered by <a href="https://commons.apache.org/proper/commons-logging/">Apache Commons Logging</a>. <a href="https://www.slf4j.org/">slf4j</a> is I think the most popular logging facade these days. I long ago wrote my own facade, <code>mlog</code>, initially in support of the <a href="https://www.mchange.com/projects/c3p0/#configuring_logging">c3p0</a> library, but I've used it for many, many projects. I've also <a href="https://github.com/swaldman/mlog-scala">wrapped it beneath</a> a concise Scala API that I really like.</p>
   <p>JVM logging facades, if written with care, are quite performant in practice. They are not a meaningful bottleneck. Nevertheless, there is a bit of overhead. You call the facade API, bytecode is generated for those calls, which then transform inputs and forward them to a logging library.</p>
   <p>I've been intrigued for a while by the possibility in Scala 3 of writing logging facades that eliminate this small bit of overhead. Scala 3 has a souped up <a href="https://docs.scala-lang.org/scala3/guides/macros/inline.html">inline</a> <a href="https://docs.scala-lang.org/scala3/reference/metaprogramming/inline.html">functionality</a>, by which facade API calls can be transfomed into back-end API calls at compile-time, eliminating any facade overhead at runtime.</p>
   <p>I'm building a bunch of "daemon"-style services now, for which logging will be important, so it seemed like a good time to give this a try. The result is called <a href="https://github.com/swaldman/logadapter-scala"><code>LogAdapter</code></a>.</p>
   <p>The logging API style I developed for <code>mlog-scala</code>, which I am very happy with, is to call <code>log</code> methods directly on logging levels. The messages get routed to "loggers" determined by context (more specifically, by what Scala <code>given</code> or <code>implicit</code> values are in scope). For example, I might call:</p>
   <pre><code class="language-scala">SEVERE.log("This is bad.")
</code></pre>
   <p><code>SEVERE</code> is a logging level defined in my <code>logadapter</code> package, but which is not defined in <code>log4j</code>, the backend I am using.</p>
   <p>Although it looks like I'm calling a method on <code>SEVERE</code>, there is no sign of such a method in the generated bytecode:</p>
   <pre><code class="language-plaintext">     236: aload_0
     237: invokevirtual #103                // Method logAdapter:()Llogadapter/log4j2/LogAdapter;
     240: astore        22
     242: aload         22
     244: astore        23
     246: aload         23
     248: invokevirtual #107                // Method logadapter/log4j2/LogAdapter.logger:()Lorg/apache/logging/log4j/Logger;
     251: astore        24
     253: getstatic     #113                // Field org/apache/logging/log4j/Level.ERROR:Lorg/apache/logging/log4j/Level;
     256: astore        25
     258: aload         24
     260: aload         25
     262: invokeinterface #119,  2          // InterfaceMethod org/apache/logging/log4j/Logger.isEnabled:(Lorg/apache/logging/log4j/Level;)Z
     267: ifeq          284
     270: aload         24
     272: aload         25
     274: ldc           #138                // String This is bad.
     276: invokeinterface #125,  3          // InterfaceMethod org/apache/logging/log4j/Logger.log:(Lorg/apache/logging/log4j/Level;Ljava/lang/String;)V
</code></pre>
   <p>The bit of bytecode referencing <code>logadapter</code> constructs is just a field lookup, which would be necessary even using the logging libraries directly. (Typically logging libraries reference a "logger" cached as a field of an object.) The field lookup is nested behind two accessors, it's like <code>this.logAdapter().logger()</code>.</p>
   <p>While in Java, accessing a logger might mean accessing a <code>static</code> field directly, in Scala, even using the native libraries, the field lookup would be behind an accessor. So the only additional overhead is the second, inner accessor call. Using a back-end library directly might provoke only a single hit to an accessor. But the cost of the additional accessor call is negligible.</p>
   <p>(And, a bit overzealously, the library actually economizes accessor calls on the backend by caching in ways typical library users do not. Note that <code>logger</code> and <code>Level.ERROR</code> are looked up once, rather than twice, in the bytecode above, although they are ultimately referred to twice, as in the code snippet below. These accessor calls are likely optimized away by modern JVMs at runtime anyway.)</p>
   <p>Beyond looking up the logger, the bytecode refers only to construct of the backend library, <code>org.apache.logging.log4j</code> constructs in this case. There is no method call on a <code>logadapter.Level</code>. There are method calls on an <code>org.apache.logging.log4j.Logger</code> supplying an <code>org.apache.logging.log4j.Level</code> as arguments.</p>
   <p>It's exactly as if we'd called the following methods directly on the <code>log4j2</code> library (referencing that library's <code>Level.ERROR</code>, since it does not support a level <code>SEVERE</code>):</p>
   <pre><code class="language-scala">import org.apache.logging.log4j.*

if logger.isEnabled( Level.ERROR ) then logger.log( Level.ERROR, "This is bad." )
</code></pre>
   <p>Again, since logging facades are not really a performance bottleneck, there's not any spectacular improvement over using <code>mlog</code>. In informal testing of just the facade — that is, excluding the cost of actual logging, by sending messages at levels below the loggable threshold — I see a roughly 25% improvement using this resolved-at-compile-time facade over resolved-at-runtime <code>mlog</code>. In practice, the improvement would be even less, because many calls will hit logging IO (or add requests for logging IO to an asynchronous queue), rendering the facades, static and dynamic, a smaller part of the overhead.</p>
   <p>Of course one of the benefits of facades — a reason why library authors often choose them! — is precisely because which backend gets hit can be resolved at runtime. If your library will be used as part of a larger application, it's nice if it can be configured to log to the same backend that the larger application will, without having to modify and recompile library code.</p>
   <p>But the logadapter facade is so thin, there's very little cost to using it even if its "backend" will be a runtime-configurable facade like <code>slf4j</code> or <code>mlog</code>.</p>
   <p>And for most applications, it's fine for the logging backend to be chosen at compile time. In which case the (small) runtime performance hit of a facade can be circumvented almost entirely.</p>
   <p><a href="https://github.com/swaldman/logadapter-scala"><code>LogAdapter</code></a> is much simpler and smaller than traditional logging facades, and can be layered on top of them at low cost where that makes sense. I think it will be a pretty good foundation for logging.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-05-26 @ <a href="https://tech.interfluidity.com/2025/05/26/zero-ish-overhead-logging-facade-in-scala-3/index.html" class="pubtime">11:25 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Thu, 22 May 2025 18:30:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.html
      </guid>
      <description>
        <![CDATA[I've been playing around with Scala 3's souped up inline construct, which is a very cool, relatively approachable, bit of metaprogramming. (See "Rock the JVM" for a quick explainer.) A thing that confused me, though, is the ordering of inlining vs implicit resolution. Consider... object InlineImplicitOrdering:
  given Int = 10

  inline def printIt(using i : Int) : Unit =
    println(summon[Int])

  object LocalContext:
    given Int = 22

    def printItLocally : Unit = printIt

  @main
  def...]]>
      </description>
      <link>https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.html</link>
      <title>Scala 3 inline vs implicit ordering</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-scala-3-inline-vs-implicit-ordering">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I've been playing around with Scala 3's <a href="https://docs.scala-lang.org/scala3/guides/macros/inline.html">souped up</a> <a href="https://docs.scala-lang.org/scala3/reference/metaprogramming/inline.html"><code>inline</code></a> construct, which is a very cool, relatively approachable, bit of metaprogramming.</p>
   <p>(See "Rock the JVM" for a <a href="https://rockthejvm.com/articles/scala-3-inlines">quick explainer</a>.)</p>
   <p>A thing that confused me, though, is the ordering of inlining vs implicit resolution. Consider...</p>
   <pre><code class="language-scala">object InlineImplicitOrdering:
  given Int = 10

  inline def printIt(using i : Int) : Unit =
    println(summon[Int])

  object LocalContext:
    given Int = 22

    def printItLocally : Unit = printIt

  @main
  def go() =
    printIt
    LocalContext.printItLocally
</code></pre>
   <p>It's straightforward that calling <code>printIt</code> prints <code>10</code>.</p>
   <p>It's not so straightforward what <code>LocalContext.printItLocally</code> will do.</p>
   <p>Implicit resolution is also a compile-time operation. If implicit resolution happens before the inlining, then <code>LocalContext.printItLocally</code> might print <code>10</code>. If implicit resolution happens after the inlining is resolved, then <code>LocalContext.printItLocally</code> should print <code>22</code>.</p>
   <p>In reality, it prints <code>22</code>.</p>
   <p>The output of this program is</p>
   <pre><code class="language-plaintext">10
22
</code></pre>
   <p>I wondered whether this would always be the case, or whether adding modifiers might change this ordering. In particular I know that it's possible to declare <code>inline given</code>, rather than straight <code>given</code>, and I wondered whether this might cause the <code>printIt</code> function to collapse to <code>println(10)</code>.</p>
   <p>The answer is no. As far as I can tell, there is no set of modifiers that would cause the implicit resolution to occur before the final inlining. Neither <code>inline given</code>, nor <code>transparent inline given</code>, nor marking the implicit argument <code>inline</code> has this effect.</p>
   <p>As far as I can tell, the hard and fast rule is that inline resolution is completed prior to any implicit resolution. Implicits will be resolved at the ultimate, inlined call site, and never before.</p>
   <p>Which is the behavior I find that I want! I am glad it does not seem to be fragile.</p>
   <p>(I'd still like to understand what <code>inline given</code> is for, though.)</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-05-22 @ <a href="https://tech.interfluidity.com/2025/05/22/scala-3-inline-vs-implicit-ordering/index.html" class="pubtime">06:30 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Thu, 3 Apr 2025 21:10:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/06/06/neonix/index-updated-2025-04-03-21-10-00.html</guid>
      <description>
        <![CDATA[A significant update of Neonix was made on 2025-04-03 @ 09:10 PM EDT. → Add update regarding 'gum', ht Bill Mill The post was originally published 2024-06-06 @ 03:35 PM EDT. This is an automatically generated post. by Update-o-Bot on 2025-04-03 @ 09:10 PM...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/06/neonix/index-updated-2025-04-03-21-10-00.html</link>
      <title>Updated: Neonix</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2025-04-04T01:10:00Z</atom:updated>
          <atom:summary><![CDATA[Add update regarding 'gum', ht Bill Mill]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/06/neonix/index-oldcommit-bef1d5cfc2e26b7def96a2eed8d1b09663f01042.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/06/neonix/index-diff-bef1d5cfc2e26b7def96a2eed8d1b09663f01042-to-current.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[Neonix]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/2024/06/06/neonix/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/2024/06/06/neonix/index.html</iffy:uid>
            <atom:published>2024-06-06T19:35:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/2024/06/06/neonix/index.html"><i>Neonix</i></a> was made on 2025-04-03 @ 09:10 PM EDT.</p>
  <blockquote>→ Add update regarding 'gum', ht Bill Mill</blockquote>
  <p>The post was originally published 2024-06-06 @ 03:35 PM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2025-04-03 @ <a href="https://tech.interfluidity.com/2024/06/06/neonix/index-updated-2025-04-03-21-10-00.html" class="pubtime">09:10 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Tue, 28 Jan 2025 22:00:00 -0500</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/01/28/adolescent-deepseek-on-a-mac-laptop/index.html
      </guid>
      <description>
        <![CDATA[TL; DR: DeepSeek-R1-14B seems pretty "smart". For tasks that, um, don't involve syllable counting, it might be sophisticated enough to be useful. (Or not! It'd take more experimentation to decide.) But it runs too slowly on my 5-year-old Intel-based MacBookPro, even tricked out with 64GB of RAM. Smaller models run with better performance, but the result quality is likely too poor to be useful. For whatever I do with LLMs, I'm afraid I'm stuck with the online services for now. In the previous...]]>
      </description>
      <link>https://tech.interfluidity.com/2025/01/28/adolescent-deepseek-on-a-mac-laptop/index.html</link>
      <title>Adolescent DeepSeek on a Mac laptop</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-adolescent-deepseek-on-a-mac-laptop">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR:</strong> DeepSeek-R1-14B seems pretty "smart". For tasks that, um, don't involve syllable counting, it might be sophisticated enough to be useful. (Or not! It'd take more experimentation to decide.)</p>
   <p>But it runs too slowly on my 5-year-old Intel-based MacBookPro, even tricked out with 64GB of RAM. Smaller models run with better performance, but the result quality is likely too poor to be useful. For whatever I do with LLMs, I'm afraid I'm stuck with the online services for now.</p>
   <hr>
   <p>In the <a href="https://tech.interfluidity.com/2025/01/28/baby-deepseek-on-on-mac-laptop/index.html">previous post</a> I ran the "baby" <a href="https://www.deepseek.com/">DeepSeek</a> generative AI model on my Mac laptop.</p>
   <p>(For instructions on how I installed <code>ollama</code>, and information about its basic use, see that <a href="https://tech.interfluidity.com/2025/01/28/baby-deepseek-on-on-mac-laptop/index.html">previous post</a> and its postscript.)</p>
   <p>The model ran fine, used a lot of CPU but not a lot of memory, generated output at a reasonable pace. Unfortunately, that model is not so "smart". It tells you how it's thinking, and it's not thinking very well. It misunderstands simple things and draws poor inferences.</p>
   <p>So now I've decided to try out a still small but bigger, less toy-ish model. The baby model had 1.5B parameters. This one has 14B, so almost 10 times as big.</p>
   <p>Downloading the model was trivial with <code>ollama</code>:</p>
   <pre><code class="language-plaintext">% ollama pull deepseek-r1:14b
</code></pre>
   <p>It's actually a bit less 10 times as big as the baby model, which was about 1GB. Presumably there's some shared, fixed infrastructure, beyond the parameters. (I'm storage constrained, so I'm not retaining models in <code>~/.ollama</code>, there's just the one model there.)</p>
   <pre><code class="language-plaintext">% du -sh ~/.ollama
8.4G	/Users/swaldman/.ollama
</code></pre>
   <p>Running the model was also trivial:</p>
   <pre><code class="language-plaintext">% ollama run deepseek-r1:14b
&gt;&gt;&gt; Send a message (/? for help)
</code></pre>
   <p>I first tried the same prompt as yesterday, "Write a 'Hello, world!' haiku."</p>
   <p>The model did run, but...</p>
   <ol>
    <li>
     <p>It ran very, very slowly. The "baby" model ran quite briskly on my laptop. The 14B-parameter version ran like syrup.</p>
    </li>
    <li>
     <p>The compute load was similar (5-6 full cores saturated), but this model also occupied ~10GB of memory when running. The 1.5B-parameter version used too little memory for me to notice or care.</p>
    </li>
   </ol>
   <p>The 1.5B-parameter model failed to generate a haiku before I grew frustrated and quit it. The 14B-parameter also ultimately failed.</p>
   <p>I think I chose a hard "Hello, world!" prompt for all of these models! Haikus are defined by lines with set numbers of syllables. The 1.5B-parameter model mistook letters for syllables. The 14B parameter mostly (but not always!) correctly identified syllables, but often miscounted them.</p>
   <p>Even though it too ultimately went 'round and 'round until I interrupted it, the 14B-parameter model's <code>&lt;think&gt;...&lt;/think&gt;</code> process was much more relevant and coherent than the <a href="https://tech.interfluidity.com/2025/01/28/baby-deepseek-on-on-mac-laptop/index.html">1.5B-parameter model</a>:</p>
   <pre><code class="language-plaintext">&gt;&gt;&gt; Write a 'Hello, world!' haiku.
&lt;think&gt;
Okay, so I need to write a 'Hello, world!' haiku. Hmm, I remember that a haiku is a traditional Japanese poem with three lines. The structure is usually 5 syllables in the first line, then 7 syllables in the second, and ending with another 5 syllables. 

Alright, so the theme here is "Hello, world!" which is pretty much about greeting the world or introducing oneself. I should think of imagery that represents a welcoming or introductory moment.

Let me brainstorm some words related to saying hello and the world. Maybe morning, sunrise, nature sounds like a good setting for a greeting. Dawn could symbolize a new beginning or a fresh start, which fits with saying hello to the world.

For the first line, I want something that captures attention and sets the scene. "Hello, gentle dawn" comes to mind. That's 5 syllables: He-ll-o, gen-tle, dawn. Yep, that works.

Next, the second line needs to be 7 syllables and connect with the first line while expanding on the theme. I want something that shows interaction or response from the world. Maybe "The world whispers back." Let's count: The -world-whis-pers-back. That's 5 syllables? Wait, no. Let me 
break it down.

"The" (1), "world" (2), "whis-pers" (3), "back" (4). Oh, only 4 syllables. Hmm, I need three more. Maybe rephrase it. How about "The world hums a welcome"? That's 6 syllables: The-world-hums-a-wel-come. Wait, that might be stretching it.

Alternatively, "The world greets me softly." Let's see: the (1), world (2), greets (3), me (4), soft-ly (5). No, still not 7. Maybe "The world responds with a smile." That's longer but syllables-wise: The (1), world (2), re-sponds (3), with (4), a (5), smile (6). Still only 6.

Wait, maybe I'm overcomplicating it. Let me think of the action after the hello. Maybe something like "A new day begins." But that's more about the day starting. Alternatively, "Echoes of greeting fill the air." That's longer than 7 syllables though.

Hmm, perhaps "The world says hello too." Wait, let me count: The (1), world (2), says (3), hel-lo (4), too (5). No, that's only 5. I need two more syllables. Maybe "The world hums in reply." That's He-world-hums-in-reply. Let me break it down: the (1), world (2), hums (3), in (4), re ply 
(5 and 6). Wait, no, that's only 6.

Wait, maybe I can use "The world answers back." The (1), world (2), an-sers (3), back (4). That's 4 syllables. Not enough. Hmm.

Alternatively, think about nature sounds. Maybe "Birds sing in reply." That's 7 syllables: Birds (2), sing (1), in (1), reply (2). Wait, that doesn't add up. Let me count each word as syllables:

"Birds" - 1
"sing" - 1
"in" -1
"reply" -2

Total: 5. Not enough.

Wait, perhaps "Birdsong answers back." That's 7 syllables: Bird-song (2), an-swers (2), back (1). Wait, no:

"Birdsong" is two syllables, "answers" is two, "back" is one. Total 5 again.

I'm getting stuck on the second line. Maybe I should think of something else. How about a sunrise? "Sunrise breaks the silence." That's 7 syllables: Sun-rise (2), breaks (1), the (1), si-lence (2). Wait, that adds up to 6 syllables.

Wait, no: Sunrise is two, breaks is one, the is one, silence is two. Total 6. Hmm.

Alternatively, "Gentle breeze returns." That's 7? Gentle (2), breeze (1), re-turns (2). Wait, gentle is two syllables, breeze is one, returns is two: total 5.

Hmm, maybe I'm overcomplicating. Let me try to think differently. Maybe the second line can be about reaching out or communication. "I reach out to you." That's 6 syllables: I (1), rea-ech (2), out (1), to (1), you (1). No, that's only 5.

Wait, maybe "I send a greeting far and wide." That's way too long. Let me think about natural elements again. Maybe water? "Waves whisper hello." That's waves (1), whisper (2), hel-lo (2). Wait: waves (1), whisper (2), hello (2). Total 5 syllables, but I need 7.

Alternatively, "Ripples greet the shore." Ripples (2), greet (1), the (1), shore (1). That's 5 again.

I'm getting a bit stuck. Let me look back at the first line: "Hello, gentle dawn." Maybe the second line can continue that imagery. Dawn brings light, so perhaps something like "Light breaks the silence." That's 6 syllables: Light (1), breaks (1), the (1), si-lence (2). Total 5 again.

Wait, maybe "Dawn greets the morning sky." That's dawn (1), greets (1), the (1), morn-ing (2), sky (1). Total is 6 syllables. Hmm.

Alternatively, "A new day starts with a smile." New (1), day (1), starts (1), with (1), a (1), smile (1). That's 6.

I'm still not hitting that 7-syllable mark for the second line. Maybe I should try something else. How about focusing on the feeling of greeting? "Heart beats in rhythm." Heart (1), beats (1), in (1), rhyth-m (2). Total is 5.

Wait, maybe "Echoes fill the air." Echoes (2), fill (1), the^C
</code></pre>
   <p>As before, my next step was to see if the model could code a simple "Hello, world!" program in Scala. The 1.5B-parameter model failed abysmally. Even when presented with compiler errors, and then my suggestions to tutor it, it was not making progress towards a correct solution.</p>
   <p>The 14B parameter produced a correct program on its first attempt. It's <code>&lt;think&gt;...&lt;/think&gt;</code>-ing was not perfect, but was mostly pretty good.</p>
   <pre><code class="language-plaintext">&gt;&gt;&gt; Please write a Scala program that prints "Hello, world!"
&lt;think&gt;
Okay, I need to write a Scala program that prints "Hello, world!". Hmm, where do I start? Well, I know that in Scala, you can print something using the println function. So maybe I just call println("Hello, world!")?

Wait, but how does aScala script work? Do I need to have an object or is it simpler than that? Oh right, for a simple program like this, I think you can just write it in a single line. But wait, when compiling with scalac, do I need to structure it as an object?

Let me think. If I'm writing a script, maybe I can use the main method inside an object. So perhaps the code should be something like:

object HelloWorld {
  def main(args: Array[String]): Unit = {
    println("Hello, world!")
  }
}

Yes, that makes sense. Because when you run a Scala program, it looks for an object with a main method. So this structure is correct.

Alternatively, I remember that in older versions of Scala, you could just write the code without defining an object if using the scalaz script compiler or something like that. But perhaps the more standard way is to define an object with the main method.

So putting it all together, the code should be an object named HelloWorld (or any name really), and inside the main function, we call println with the desired string.

Let me double-check: When I run this program, either by compiling with scalac and then running with scala, or using a Scala IDE, it should print "Hello, world!" correctly. Yeah, that should work.
&lt;/think&gt;

To write a Scala program that prints "Hello, world!", follow these steps:

1. **Create a new file** for your Scala program. It can be named `HelloWorld.scala`.

2. **Write the code**: The code will define an object with a main method that calls `println` to output the desired message.

Here's the complete Scala code:

```scala
object HelloWorld {
  def main(args: Array[String]): Unit = {
    println("Hello, world!")
  }
}
``` 

3. **Run the program**:
   - **Using the command line**:
     - Compile the file using `scalac HelloWorld.scala`.
     - Run it with ` scala HelloWorld`.
   - **Using an IDE**: Simply run the script through your preferred Scala IDE.

This program will output:

``` 
Hello, world!
``` 
</code></pre>
   <p>And so it did.</p>
   <pre><code class="language-plaintext">% scala-cli run hello-ds14b.scala 
Compiling project (Scala 3.6.3, JVM (17))
Compiled project (Scala 3.6.3, JVM (17))
Hello, world!
</code></pre>
   <p>Since it got it right, I thanked it! Its "thought-process" in response was kind of fun:</p>
   <pre><code class="language-plaintext">&gt;&gt;&gt; Great! Thank you.
&lt;think&gt;
Alright, so the user just thanked me for the previous explanation on writing a "Hello, world!" program in Scala. They were probably satisfied with the answer, but I should think about how to respond appropriately. 

I want to be polite and encouraging, so I'll acknowledge their gratitude. Maybe add an emoji to keep it friendly. Also, since they might be new to programming orScala, offering further help is a good idea. I can ask if there's anything else they need assistance with.

Hmm, perhaps I should also provide options for what they might want next—like solving another problem or explaining more concepts. That way, it shows I'm ready to assist them in various ways.

I should keep the response concise and positive, making sure they feel comfortable asking more questions if needed.
&lt;/think&gt;

You're welcome! If you have any other questions or need help with anything else, feel free to ask! 😊
</code></pre>
   <hr>
   <p>I really want to do whatever AI-using I eventually do on my own infrastructure, or infrastructure of someone I trust, rather than a distant megafirm. But this current family of models, on my current best hardware, won't get me there.</p>
   <p>Sometime soon I may upgrade to an Apple Silicon Mac, and then retry these exercises.</p>
   <p>I'd consider a cloud server I rent and fully control (as opposed to API access) "my own infrastructure", but cloud servers with the resources of my laptop are too pricey for me, for now. The trendy AI-ready GPU-endowed servers some cloud providers are renting are way beyond my price point.</p>
   <p>So, for now, I think I'm stuck with the megafirms, to the degree that I use this stuff at all. But the DeepSeek models are a big step closer towards LLMs more consistent with our independence, and I'm grateful for that.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-01-28 @ <a href="https://tech.interfluidity.com/2025/01/28/adolescent-deepseek-on-a-mac-laptop/index.html" class="pubtime">10:00 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Tue, 28 Jan 2025 00:20:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2025/01/28/baby-deepseek-on-on-mac-laptop/index.html</guid>
      <description>
        <![CDATA[TL; DR: It's really fun to watch DeepSeek-R1-1.5B, <think>...</think>. But this tiniest DeepSeek model is, um, not so smart. It seems to misinterpret the prompt input a fair amount, and draws inferences that are not quite coherent, even though in some superficial but nonsensical way you can understand the connections it's drawing. For the heck of it, I decided to try to run the smallest DeepSeek generative AI model on my laptop. My laptop is an Intel MacBook Pro purchased in 2020 (but I think a...]]>
      </description>
      <link>https://tech.interfluidity.com/2025/01/28/baby-deepseek-on-on-mac-laptop/index.html</link>
      <title>Baby DeepSeek on a Mac laptop</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-baby-deepseek-on-a-mac-laptop">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR:</strong> It's really fun to watch DeepSeek-R1-1.5B, <code>&lt;think&gt;...&lt;/think&gt;</code>.</p>
   <p>But this tiniest DeepSeek model is, um, not so smart. It seems to misinterpret the prompt input a fair amount, and draws inferences that are not quite coherent, even though in some superficial but nonsensical way you can understand the connections it's drawing.</p>
   <hr>
   <p>For the heck of it, I decided to try to run the smallest <a href="https://www.deepseek.com/">DeepSeek</a> generative AI model on my laptop. My laptop is an Intel MacBook Pro purchased in 2020 (but I think a 2019 model), 8 cores. It's tricked out with 64GB of memory.</p>
   <p>After checking out a <a href="https://www.digitalocean.com/community/tutorials/deepseek-r1-gpu-droplets">DigitalOcean tutorial</a> for clues, Running the model was beyond trivial:</p>
   <pre><code class="language-plaintext">% brew install ollama
% brew services start ollama
% ollama run deepseek-r1:1.5b
pulling manifest 
pulling aabd4debf0c8... 100% ▕██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏ 1.1 GB                         
pulling 369ca498f347... 100% ▕██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏  387 B                         
pulling 6e4c38e1172f... 100% ▕██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏ 1.1 KB                         
pulling f4d24e9138dd... 100% ▕██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏  148 B                         
pulling a85fe2a2e58e... 100% ▕██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏  487 B                         
verifying sha256 digest 
writing manifest 
success 
&gt;&gt;&gt; Send a message (/? for help)
</code></pre>
   <p>That last line is prompting me for a prompt.</p>
   <p>When I run prompts, I find that the model does not stress out my memory at all, but does use up 5 to 6 cores of CPU while it is active.</p>
   <p>For the purpose of this post, I tried what I thought would be a simple prompt:</p>
   <pre><code class="language-plaintext">&gt;&gt;&gt; Write a 'Hello, world!' haiku.
</code></pre>
   <p>The model generates a <code>&lt;think&gt;...&lt;/think&gt;</code> section in which it describes its own "thought" process. But it is so neurotic! Endearingly neurotic! It went around in circles. I eventually grew impatient and aborted it with <code>&lt;ctrl-c&gt;</code>.</p>
   <pre><code class="language-plaintext">&lt;think&gt;
Okay, so I need to write a haiku in lowercase for "Hello, world!" that reads backwards both in the traditional way and when reversed again. Let me start by recalling what a haiku is. It's a three-line poem where the first line has five characters, the second eight, and the third five, 
all in iambic pentameter.

First, I'll break down "Hello, world!". The words are H, E, L, L, O, ,, W, O, R, L, D. But since we're writing it in lowercase as "hello, world!", that's h e l l o , w o r l d. Now, for the haiku structure, I need to arrange these into three lines with specific syllable counts and stress 
patterns.

The first line should have five syllables. So I'll pick a part of "hello" that has five letters, counting each vowel as one syllable. H-e-l-ll-o is 1+1+2+2+1=7 syllables. Hmm, too many. Maybe h-e-llo would be better—h (1) + e (1) + l (1) + l (1) + o (1) = 5 syllables.

Wait, but "hello" is H E L L O, so five letters with four consonants and one vowel. So that's correct for the first line: h-e-l-l-o.

Now, I need to make it into a haiku. The second line should have eight syllables, and the third line back to five again. Also, when reversed in both ways, they should form "hello, world!" correctly.

Let me think about how to mirror "hello" in some way. Maybe using symmetrical patterns or mirrors. Alternatively, considering the punctuation: comma and exclamation mark. The second word is a bit tricky with the comma—perhaps that's intentional as part of the haiku structure.

Looking at "hello", the next word after the first line would be two syllables for eight in total, but including the comma it might need to be longer. Maybe h-e-ll-o-, which has four letters plus the comma. That could work: h-e-l-l-o- (four characters) and then another line.

Wait, let me try that. First line: h-e-l-l-o—5 syllables. Second line: h-e-llo- (but wait, h-e-l-l-o is five letters; maybe I'm overcomplicating). Alternatively, the second word could be "ll" with a hyphen or something? But in haikus, usually words are separated by spaces.

Wait, perhaps it's better to think of the syllables. The first line: 1+1+2+2+1=7 syllables—need to adjust to 5. So maybe h-e-l-l-o is correct as five letters, but I need to represent it with five syllables in a four-letter base? Or perhaps use an alliteration.

Alternatively, think about "hello" and mirror the words somehow. Maybe H-e-llo-world? But that's eight letters for two lines and five again. Wait, no—haiku is three lines: 5-8-5.

So first line: h-e-l-l-o (h + e + l + l + o = 5 syllables). Second line needs to have eight syllables. Maybe h-e-ll-o-w (but that's only seven letters; maybe with an exclamation or hyphen? Alternatively, think of the second word as a two-syllable word but longer in terms of letters.

Wait, perhaps I'm approaching this wrong. Let me try to mirror "hello" around the center. So H E L L O would be mirrored as D O L L E, but that doesn't fit into the haiku structure. Alternatively, think of it in a way where each word relates somehow.

Alternatively, consider that the second line is a contraction or reflection. Maybe h-e-ll-o-, then w-o-r-l-d. But I'm not sure about the syllables here. Let me count:

First line: h-e-l-l-o → 5 syllables.
Second line: h-e-llo-w (h + e + l + l + o + w → six letters, which is more than eight; maybe this approach isn't right.)

Alternatively, perhaps using alliteration or a more specific pattern. Let me think of "hello" and how it can be mirrored with the second word being two syllables but having more letters.

Wait, another approach: The first line is 5 syllables (h-e-l-l-o), then for eight, maybe h-e-ll-o-w (but that's six characters; perhaps including a hyphen or something). Alternatively, think of "hello" and "world" as related in some way, like the second word being two syllables but 
longer.

Wait, let me consider "h-e-llo-world"—but no, it would be 12 letters. Maybe h-e-ll-o-w (but I'm getting confused with syllable counts).

Alternatively, perhaps think of each word as having a certain number of stressed vowels or consonants. For example, in the second line, the stress pattern might require two stressed syllables.

Wait, maybe it's better to look for existing haikus and see if any are similar to "hello" that can be mirrored. But since I'm supposed to create this from scratch, let me try again.

First line: h-e-l-l-o → 5 syllables.
Second line needs to have eight syllables. Maybe h-e-llo-w (h + e + l + l + o + w = six letters) but that's seven characters with an exclamation mark—maybe h-e-ll-o-w? Let me check the stress pattern for "hello". The word is h-e-l-l-o, which has four consonants and one vowel. So it 
sounds like a single syllable maybe.

Wait, no: 'Hello' has two syllables: H-e and llo, but in reality, it's pronounced as one syllable. But I need to make the haiku with five syllables for the first line.

Alternatively, perhaps h-e-ll-o would have four consonants, so that's 4 letters which is too few for a five-syllable word. Wait, no: h (1) + e (2) + l (3) + l (4) + o (5). So it's five syllables.

So first line: H E L L O → 5 syllables.

Second line needs to have eight syllables. Maybe h-e-ll-o-w? Let me check the syllable count for "hello, world": two lines of 5 and 8 respectively. Wait, no—the haiku is five, then eight, then five. But in this case, first line: hello (h-e-l-l-o) → five syllables.

Second line: h-e-ll-o-w? Let's see: h (1), e (2), l (3), l (4), o (5), w (6). That's six letters, which would be eight syllables if each word is broken down. Wait, that doesn't add up.

Alternatively, perhaps "h-e-ll-o-w" as the second line but considering more syllables. Hmm, I'm getting stuck here. Maybe I should look for existing haikus in the style of "hello, world!" and see how they mirror each other.

Wait, another idea: The second word is two syllables, so maybe h-e-ll-o-w? That's six letters but seven characters (including the comma). Alternatively, perhaps it's h-e-llo-w with a hyphen or something. But I'm not sure.

Alternatively, think of "h-e-ll-o" as one line and then mirroring with "w-o-r-l-d" in reverse. So maybe h-e-ll-o-, w-o-rld? Let me check the syllables:

First line: h-e-l-l-o → five syllables.
Second line: h-e-ll-o-w (h + e + l + l + o + w = six letters) but that's seven characters with a comma. Maybe hyphenated or something else, but it's tricky.

Alternatively, perhaps the second word is "h-e-llo", which is four syllables, and then "world" as two? No, that doesn't fit.

Wait, maybe I'm overcomplicating this. Let me try to write the lines step by step:

First line: h-e-l-l-o → 5 syllables.
Second line needs to be eight syllables. Maybe h-e-ll-o-w (six letters) but with a hyphen or something, making it seven characters. Alternatively, think of "h-e-ll-o-w" as the second word, which would make the entire line longer.

Alternatively, maybe I'm supposed to mirror the words somehow. So H-E-L-L-O could be mirrored around the center, perhaps h-e-llo-world, but that's too long.

Wait, another idea: The first line is 5 syllables, and the second word is two syllables with more letters. For example, h-e-ll-o (five letters) vs. w-o-r-l-d (but that would be in reverse). Alternatively, think of "h-e-ll-o" as one line and then "world" mirrored.

Wait, perhaps I'm stuck. Let me try to write the second line as h-e-ll-o-w with a hyphen or something, making it 6 characters. But no, haikus have strict syllable counts.

Alternatively, think of each word in terms of syllables: first line is five, second is eight, third is five.

So second line needs to be eight syllables. Maybe h-e-llo-w (h + e + l + l + o + w = six letters) but that's seven characters. Alternatively, maybe "h-e-ll-o" and "w-d", making it two lines: h-e-ll-o- and w-o-rld? No, that doesn't make sense.

Wait, I'm getting stuck here. Let me try to write the second line as h-e-llo-w with a hyphen in the middle or something, but^C

&gt;&gt;&gt;
</code></pre>
   <p>Then I tried a simpler variation:</p>
   <pre><code class="language-plaintext">&gt;&gt;&gt; Write me a joyful greeting, please?
&lt;think&gt;
Okay, so I just received this message: "Write me a joyful greeting, please?" Hmm, that's interesting. At first glance, it sounds like someone is trying to ask for a greeting but maybe they don't realize how important it is. Let me try to unpack what's going on here.

So, the person wrote a greeting that ends with a question mark. That's a bit unusual because usually, greetings are polite and direct without any questions. Maybe they're testing something or just curious about why they're asking for this specific type of greeting. Perhaps they want to 
see if I can recognize different types of requests.

I should consider what kind of response they might expect. Since it ends with a question mark, maybe the next step is to acknowledge their request and provide a friendly reply. But how? A simple "Yes! Thank you for your kindness!" would be appropriate. It's concise and acknowledges their 
message without being repetitive or too formal.

I wonder if there are any underlying reasons behind their query. Maybe they're trying to get my attention quickly or set a context where I can respond further. Without more information, it's hard to say exactly what they need next, but focusing on a heartfelt greeting seems like the best 
approach right now.

Also, considering the tone, it should feel warm and caring. Using words that convey gratitude and appreciation is key here. Phrases like "I appreciate your kind words" or "Thank you for your kind gesture" can make the response more genuine.

Another angle to think about is the purpose of the greeting. If this is part of a larger conversation, maybe they need something specific for that context. But since I don't have any additional details, it's safer to keep it general and flexible.

I should also consider if there are alternative greetings that might be more suitable based on their message. For example, "How can I help you today?" or "Could you please let me know how I can assist you?" Each of these has its own merits, but the original question ends with a question 
mark, so focusing back on a simple, heartfelt response makes sense.

In summary, my approach should be to acknowledge their message, provide a genuine reply that shows appreciation, and keep it concise. This way, they know I'm listening without overcomplicating things.
&lt;/think&gt;

Certainly! Here's a heartfelt greeting in the requested format:

---

Hey there! I hope you're doing well today. It sounds like your kind words are always appreciated—thanks for taking the time to connect with me!

---

This response is warm, genuine, and acknowledges their message while keeping it concise.
</code></pre>
   <p>A bit off. But not terrible!</p>
   <p>Next I tried to see if it could code:</p>
   <pre><code class="language-plaintext">&gt;&gt;&gt; Please write a Scala program that prints "Hello, world!"
</code></pre>
   <p>This... didn't go so well.</p>
   <p>To be fair, Scala is not likely to be its most prominant training language, and some of its attempts could be excused as not quite knowing whether to write Scala 2 or Scala 3. Its first attempt was closer to Scala 3 than Scala 2. (It offered a naked top-level function, supported as <code>main</code> entry points only in Scala 3.) So I tried to tutor it towards s Scala 3 solution.</p>
   <p>It came pretty close! But after three or four back and forths over ~25 minutes, it still wasn't quite right and I gave up.</p>
   <p>This is the tiniest DeepSeek model. I wonder if I can run a bigger one, and if it performs a bit better?</p>
   <p>Stay tuned on that, I guess.</p>
   <hr>
   <p><strong>Postscript:</strong></p>
   <p>I'm pretty short storage space on the ol' laptop, so I want to clean up after this exercise. A bit of searching <a href="https://www.restack.io/p/ollama-models-storage-answer-cat-ai">tells me</a> that on a Mac, models will be stored under a <code>~/.ollama</code> directory.</p>
   <pre><code class="language-plaintext">% find ~/.ollama 
/Users/swaldman/.ollama
/Users/swaldman/.ollama/id_ed25519
/Users/swaldman/.ollama/id_ed25519.pub
/Users/swaldman/.ollama/models
/Users/swaldman/.ollama/models/blobs
/Users/swaldman/.ollama/models/blobs/sha256-6e4c38e1172f42fdbff13edf9a7a017679fb82b0fde415a3e8b3c31c6ed4a4e4
/Users/swaldman/.ollama/models/blobs/sha256-369ca498f347f710d068cbb38bf0b8692dd3fa30f30ca2ff755e211c94768150
/Users/swaldman/.ollama/models/blobs/sha256-aabd4debf0c8f08881923f2c25fc0fdeed24435271c2b3e92c4af36704040dbc
/Users/swaldman/.ollama/models/blobs/sha256-a85fe2a2e58e2426116d3686dfdc1a6ea58640c1e684069976aa730be6c1fa01
/Users/swaldman/.ollama/models/blobs/sha256-f4d24e9138dd4603380add165d2b0d970bef471fac194b436ebd50e6147c6588
/Users/swaldman/.ollama/models/manifests
/Users/swaldman/.ollama/models/manifests/registry.ollama.ai
/Users/swaldman/.ollama/models/manifests/registry.ollama.ai/library
/Users/swaldman/.ollama/models/manifests/registry.ollama.ai/library/deepseek-r1
/Users/swaldman/.ollama/models/manifests/registry.ollama.ai/library/deepseek-r1/1.5b
/Users/swaldman/.ollama/history
% du -sh ~/.ollama 
1.0G	/Users/swaldman/.ollama
</code></pre>
   <p>It's not huge, but I'm going to remove it anyway for now.</p>
   <pre><code class="language-plaintext">% ollama help
Large language model runner

Usage:
  ollama [flags]
  ollama [command]

Available Commands:
  serve       Start ollama
  create      Create a model from a Modelfile
  show        Show information for a model
  run         Run a model
  stop        Stop a running model
  pull        Pull a model from a registry
  push        Push a model to a registry
  list        List models
  ps          List running models
  cp          Copy a model
  rm          Remove a model
  help        Help about any command

Flags:
  -h, --help      help for ollama
  -v, --version   Show version information

Use "ollama [command] --help" for more information about a command.

% ollama list
NAME                ID              SIZE      MODIFIED
deepseek-r1:1.5b    a42b25d8c10a    1.1 GB    About an hour ago

% ollama rm deepseek-r1:1.5b
deleted 'deepseek-r1:1.5b'

% du -sh ~/.ollama
 12K	/Users/swaldman/.ollama
</code></pre>
   <p>All cleaned up!</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-01-28 @ <a href="https://tech.interfluidity.com/2025/01/28/baby-deepseek-on-on-mac-laptop/index.html" class="pubtime">12:20 AM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Tue, 14 Jan 2025 16:00:00 -0500</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/index.html
      </guid>
      <description>
        <![CDATA[feedletter is a service I wrote mostly to convert RSS newsfeeds into e-mail newsletters. If you subscribe to this blog by e-mail, or to drafts.interfluidity.com, feedletter is the service to which you subscribed, and which mails you my blogposts. I wrote an elaborate tutorial documenting how to set up newsletter subscriptions about a year ago. But feedletter can also syndicate RSS announcements (or posts, length permitting) to Mastodon and BlueSky. I thought I'd do a quick tutorial on how it...]]>
      </description>
      <link>
        https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/index.html
      </link>
      <title>Syndicating RSS to Mastodon and BlueSky with feedletter</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-syndicating-rss-to-mastodon-and-bluesky-with-feedletter">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><a href="https://github.com/swaldman/feedletter"><code>feedletter</code></a> is a service I wrote mostly to convert RSS newsfeeds into e-mail newsletters.</p>
   <p>If you subscribe to this blog by e-mail, or to <a href="https://drafts.interfluidity.com/"><code>drafts.interfluidity.com</code></a>, <code>feedletter</code> is the service to which you subscribed, and which mails you my blogposts.</p>
   <p>I wrote an <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html">elaborate tutorial</a> documenting how to set up newsletter subscriptions about a year ago.</p>
   <p>But <code>feedletter</code> can also syndicate RSS announcements (or posts, length permitting) to Mastodon and BlueSky.</p>
   <p>I thought I'd do a quick tutorial on how it works.</p>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#table-of-contents" id="table-of-contents" name="table-of-contents" class="anchorlink"></a>Table of contents</h3>
   <ol>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#1-prerequisites">Prerequisites</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#2-create-user-feedletter">Create user <code>feedletter</code></a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#3-install-feedletter">Install <code>feedletter</code></a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#4-prepare-the-postgres-database">Prepare the <code>postgres</code> database</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#5-create-the-etcfeedletter-directory">Create the <code>/etc/feedletter</code> directory</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#6-create-a-mastodon-app-password">Create a Mastodon app password</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#7-create-etcfeedletterfeedletter-secretsproperties-and-configure-mastodon-access">Create <code>/etc/feedletter/feedletter-secrets.properties</code> and configure Mastodon access</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#8-configure-bluesky-access">Configure BlueSky access</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#9-add-c3p0-database-configuration-to-etcfeedletterfeedletter-secretsproperties">Add <code>c3p0</code> (database) configuration to <code>/etc/feedletter/feedletter-secrets.properties</code></a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#10-add-a-secret-salt-to-etcfeedletterfeedletter-secretsproperties">Add a "secret salt" to <code>/etc/feedletter/feedletter-secrets.properties</code></a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#11-check-out-the-feedletter-app">Check out the feedletter app</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#12-initialize-the-feedletter-database">Initialize the feedletter database</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#13-add-a-feed-you-wish-to-syndicate">Add a feed you wish to syndicate</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#14-define-your-subscribables">Define your subscribables</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#15-subscribe-the-target-mastodon-and-bluesky-accounts-to-the-subscribables">Subscribe the target Mastodon and BlueSky accounts to the subscribables.</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#16-test-in-the-terminal">Test in the terminal</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#17-enable-feedletter-as-a-systemd-daemon">Enable <code>feedletter</code> as a <code>systemd</code> daemon</a></li>
    <li><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#18-conclusion">Conclusion</a></li>
   </ol>
   <hr>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#1-prerequisites" id="1-prerequisites" name="1-prerequisites" class="anchorlink"></a>1. Prerequisites</h3>
   <p>You'll need a systemd-based server on the internet, git, postgres, and a Java 17+ JVM installed.</p>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#2-create-user-feedletter" id="2-create-user-feedletter" name="2-create-user-feedletter" class="anchorlink"></a>2. Create user feedletter</h3>
   <p>We'll create a passwordless user:</p>
   <pre><code class="language-plaintext"># adduser --disabled-password feedletter
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#3-install-feedletter" id="3-install-feedletter" name="3-install-feedletter" class="anchorlink"></a>3. Install feedletter</h3>
   <p>We just clone a git repository. We'll make it become <code>/opt/feedletter</code>, and make sure our new user <code>feedletter</code> owns it:</p>
   <pre><code class="language-plaintext"># cd /opt
# git clone https://github.com/swaldman/feedletter-install.git feedletter
Cloning into 'feedletter'...
remote: Enumerating objects: 81, done.
remote: Counting objects: 100% (81/81), done.
remote: Compressing objects: 100% (48/48), done.
remote: Total 81 (delta 40), reused 64 (delta 23), pack-reused 0 (from 0)
Receiving objects: 100% (81/81), 12.32 KiB | 4.10 MiB/s, done.
Resolving deltas: 100% (40/40), done.
# chown -R feedletter:feedletter feedletter
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#4-prepare-the-postgres-database" id="4-prepare-the-postgres-database" name="4-prepare-the-postgres-database" class="anchorlink"></a>4. Prepare the postgres database</h3>
   <pre><code class="language-plaintext"># su - postgres
$ createdb feedletter
$ createuser feedletter
$ psql
psql (16.6 (Ubuntu 16.6-0ubuntu0.24.10.1))
Type "help" for help.

postgres=# ALTER DATABASE feedletter OWNER TO feedletter;
ALTER DATABASE
postgres=# ALTER USER feedletter WITH PASSWORD 'not-actually-this';
ALTER ROLE
postgres=# \q
$ exit
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#5-create-the-etcfeedletter-directory" id="5-create-the-etcfeedletter-directory" name="5-create-the-etcfeedletter-directory" class="anchorlink"></a>5. Create the /etc/feedletter directory</h3>
   <pre><code class="language-plaintext"># mkdir /etc/feedletter
# chown feedletter:feedletter /etc/feedletter
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#6-create-a-mastodon-app-password-and-place-it-in-etcfeedletterfeedletter-secretsproperties" id="6-create-a-mastodon-app-password-and-place-it-in-etcfeedletterfeedletter-secretsproperties" name="6-create-a-mastodon-app-password-and-place-it-in-etcfeedletterfeedletter-secretsproperties" class="anchorlink"></a>6. Create a Mastodon app password, and place it in /etc/feedletter/feedletter-secrets.properties</h3>
   <p>In the Mastodon account to which you intend to syndicate announcements, go to Settings &gt; Development, and click the "New Application" button.</p>
   <p>Define an application name. We'll use "feedletter-syndication".</p>
   <p><em><strong>Be sure to enable write permissions!</strong></em></p>
   <p>Finally click the Submit button.</p>
   <p>You should see your new application listed now in the applications page. Click on it. On the resulting page, note the field "Your access token". You'll need its value in the next step.</p>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#7-create-etcfeedletterfeedletter-secretsproperties-and-configure-mastodon-access" id="7-create-etcfeedletterfeedletter-secretsproperties-and-configure-mastodon-access" name="7-create-etcfeedletterfeedletter-secretsproperties-and-configure-mastodon-access" class="anchorlink"></a>7. Create /etc/feedletter/feedletter-secrets.properties and configure Mastodon access</h3>
   <p>We'll first become user feedletter, then open a text editor on <code>/etc/feedletter/feedletter-secrets.properties</code>.</p>
   <pre><code class="language-plaintext"># su - feedletter
$ touch /etc/feedletter/feedletter-secrets.properties
$ chmod 600 /etc/feedletter/feedletter-secrets.properties
$ emacs /etc/feedletter/feedletter-secrets.properties
</code></pre>
   <div class="note">
    <p><code>feedletter</code> will insist that <code>/etc/feedletter/feedletter-secrets.properties</code> has restrictive permissions.</p>
    <p>It will refuse to run if you skip the <code>chmod</code> bit.</p>
    <pre><code>$ chmod 600 /etc/feedletter/feedletter-secrets.properties`
</code></pre>
   </div>
   <p>Now we'll add an entry to our properties file in the form</p>
   <pre><code class="language-plaintext">feedletter.masto.access.token.&lt;arbitrary-name&gt;=&lt;access-token&gt;`:
</code></pre>
   <p>Just to be dumb, we'll use "arbitrary-name" as our, um, arbitrary name.</p>
   <pre><code class="language-plaintext">feedletter.masto.access.token.arbitrary-name=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
</code></pre>
   <div class="note">
    <p>Your access token probably is not all <code>XXXXXXXXXX</code>!</p>
   </div>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#8-configure-bluesky-access" id="8-configure-bluesky-access" name="8-configure-bluesky-access" class="anchorlink"></a>8. Configure BlueSky access</h3>
   <p>In the BlueSky account you intend to syndicate to, go to Settings &gt; Privacy and security &gt; App passwords.</p>
   <p>Click "Add App Password".</p>
   <p>Give your app a name. We'll use "feedletter-syndication" again.</p>
   <p>Your app password will appear.</p>
   <p>Add a new line to <code>/etc/feedletter/feedletter-secrets.properties</code>, in the form <code>feedletter.bsky.identifier.&lt;identifier&gt;=&lt;app-password&gt;</code>.</p>
   <div class="note">
    <p>This is a bit different from Mastodon!</p>
    <p>In Mastodon, a totally arbitrary name went at the end of the key. Here it is the <em>user identifier</em>, which usually a DNS handle (but it can also be a <a href="https://atproto.com/">atproto</a> <a href="https://atproto.com/specs/did"><code>did</code></a>).</p>
   </div>
   <p>The account we're syndicating to will be <code>testable-bsky.bsky.social</code></p>
   <p>So <code>/etc/feedletter/feedletter-secrets.properties</code> should look something like this, albeit with a real access tokens / passwords.</p>
   <pre><code class="language-plaintext">feedletter.masto.access.token.arbitrary-name=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
feedletter.bsky.identifier.testable-bsky.bsky.social=xxxx-xxxx-xxxx-xxxx
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#9-add-c3p0-database-configuration-to-etcfeedletterfeedletter-secretsproperties" id="9-add-c3p0-database-configuration-to-etcfeedletterfeedletter-secretsproperties" name="9-add-c3p0-database-configuration-to-etcfeedletterfeedletter-secretsproperties" class="anchorlink"></a>9. Add c3p0 (database) configuration to /etc/feedletter/feedletter-secrets.properties</h3>
   <p>Remember when we set the Postgres password a while back? We'll use it now.</p>
   <p>Postgres by default runs on port 5432, so let's add some database access and authentication information.</p>
   <p><code>feedletter</code> uses the <code>c3p0</code> connection pooling library.</p>
   <p>Edit <code>/etc/feedletter/feedletter-secrets.properties</code> so that it looks something like this:</p>
   <pre><code class="language-plaintext">feedletter.masto.access.token.arbitrary-name=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
feedletter.bsky.identifier.testable-bsky.bsky.social=xxxx-xxxx-xxxx-xxxx
c3p0.jdbcUrl=jdbc:postgresql://localhost:5432/feedletter
c3p0.user=feedletter
c3p0.password=not-actually-this
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#10-add-a-secret-salt-to-etcfeedletterfeedletter-secretsproperties" id="10-add-a-secret-salt-to-etcfeedletterfeedletter-secretsproperties" name="10-add-a-secret-salt-to-etcfeedletterfeedletter-secretsproperties" class="anchorlink"></a>10. Add a "secret salt" to /etc/feedletter/feedletter-secrets.properties</h3>
   <p><code>/etc/feedletter/feedletter-secrets.properties</code> should contain a "secret salt", whose value is entirely arbitrary but should be kept secret. We'll add that, so <code>/etc/feedletter/feedletter-secrets.properties</code> now looks like:</p>
   <pre><code class="language-plaintext">feedletter.masto.access.token.arbitrary-name=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
feedletter.bsky.identifier.testable-bsky.bsky.social=xxxx-xxxx-xxxx-xxxx
c3p0.jdbcUrl=jdbc:postgresql://localhost:5432/feedletter
c3p0.user=feedletter
c3p0.password=not-actually-this
feedletter.secret.salt=This is an arbitrary string.
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#11-check-out-the-feedletter-app" id="11-check-out-the-feedletter-app" name="11-check-out-the-feedletter-app" class="anchorlink"></a>11. Check out the feedletter app</h3>
   <p>As user <code>feedletter</code>, cd into <code>/opt/feedletter</code> and type</p>
   <pre><code class="language-plaintext">$ ./feedletter --help
</code></pre>
   <p>The first time you do this, it will download a lot of stuff!</p>
   <p>Eventually you will see a help message, like this:</p>
   <pre><code class="language-plaintext">Usage:
     feedletter [--secrets &lt;propsfile&gt;] add-feed
     feedletter [--secrets &lt;propsfile&gt;] alter-feed
     feedletter [--secrets &lt;propsfile&gt;] daemon
     feedletter [--secrets &lt;propsfile&gt;] db-dump
     feedletter [--secrets &lt;propsfile&gt;] db-init
     feedletter [--secrets &lt;propsfile&gt;] db-migrate
     feedletter [--secrets &lt;propsfile&gt;] define-bluesky-subscribable
     feedletter [--secrets &lt;propsfile&gt;] define-email-subscribable
     feedletter [--secrets &lt;propsfile&gt;] define-mastodon-subscribable
     feedletter [--secrets &lt;propsfile&gt;] drop-feed-and-subscribables
     feedletter [--secrets &lt;propsfile&gt;] drop-subscribable
     feedletter [--secrets &lt;propsfile&gt;] edit-subscribable
     feedletter [--secrets &lt;propsfile&gt;] export-subscribers
     feedletter [--secrets &lt;propsfile&gt;] list-config
     feedletter [--secrets &lt;propsfile&gt;] list-feeds
     feedletter [--secrets &lt;propsfile&gt;] list-items-excluded
     feedletter [--secrets &lt;propsfile&gt;] list-subscribables
     feedletter [--secrets &lt;propsfile&gt;] list-subscribers
     feedletter [--secrets &lt;propsfile&gt;] list-untemplates
     feedletter [--secrets &lt;propsfile&gt;] send-test-email
     feedletter [--secrets &lt;propsfile&gt;] set-config
     feedletter [--secrets &lt;propsfile&gt;] set-extra-params
     feedletter [--secrets &lt;propsfile&gt;] set-untemplates
     feedletter [--secrets &lt;propsfile&gt;] subscribe
 
 Manage e-mail subscriptions to and notifications from RSS feeds.
 
 Options and flags:
     --help
         Display this help text.
     --secrets &lt;propsfile&gt;
         Path to properties file containing SMTP, postgres, c3p0, and other configuration details.
 
 Environment Variables:
     FEEDLETTER_SECRETS=&lt;path&gt;
         Path to properties file containing SMTP, postgres, c3p0, and other configuration details.
 
 Subcommands:
     add-feed
         Add a new feed from which mail or notifications may be generated.
     alter-feed
         Alter the timings of an already-defined feed.
     daemon
         Run daemon that watches feeds and sends notifications.
     db-dump
         Dump a backup of the database into a configured directory.
     db-init
         Initialize the database schema.
     db-migrate
         Migrate to the latest version of the database schema.
     define-bluesky-subscribable
         Define a BlueSky subscribable, a source from which BlueSky feeds can receive automatic posts..
     define-email-subscribable
         Define a new email subscribable, a mailing lost to which users can subscribe.
     define-mastodon-subscribable
         Define a Mastodon subscribable, a source from which Mastodon feeds can receive automatic posts..
     drop-feed-and-subscribables
         Removes a feed, along with any subscribables defined upon it, from the service.
     drop-subscribable
         Removes a subscribable from the service.
     edit-subscribable
         Edit an already-defined subscribable.
     export-subscribers
         Dump subscriber information for a subscribable in CSV format.
     list-config
         List all configuration parameters.
     list-feeds
         List all feeds the application is watching.
     list-items-excluded
         List items excluded from generating notifications.
     list-subscribables
         List all subscribables.
     list-subscribers
         List all subscribers to a subscribable.
     list-untemplates
         List available untemplates.
     send-test-email
         Send a brief email to test your SMTP configuration.
     set-config
         Set configuration parameters.
     set-extra-params
         Add, update, or remove extra params you may define to affect rendering of notifications and messages.
     set-untemplates
         Update the untemplates used to render subscriptions.
     subscribe
         Subscribe to a subscribable.
</code></pre>
   <div class="note">
    <p>This might be surrounded by some noise from the <a href="https://mill-build.org/mill/index.html"><code>mill</code></a> process used to launch it. It might end with <code>Subprocess failed.</code></p>
    <p>That's all fine.</p>
   </div>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#12-initialize-the-feedletter-database" id="12-initialize-the-feedletter-database" name="12-initialize-the-feedletter-database" class="anchorlink"></a>12. Initialize the feedletter database</h3>
   <p>As user <code>feedletter</code>, from within <code>/opt/feedletter</code>, type</p>
   <pre><code class="language-plaintext">$ ./feedletter db-init
</code></pre>
   <p>That's all!</p>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#13-add-a-feed-you-wish-to-syndicate" id="13-add-a-feed-you-wish-to-syndicate" name="13-add-a-feed-you-wish-to-syndicate" class="anchorlink"></a>13. Add a feed you wish to syndicate</h3>
   <p>As user <code>feedletter</code>, from within <code>/opt/feedletter</code>, type</p>
   <pre><code class="language-plaintext">$ ./feedletter add-feed --help
</code></pre>
   <p>You should see</p>
   <pre><code class="language-plaintext"> Usage:
     feedletter add-feed --ping &lt;feed-url&gt;
     feedletter add-feed [--min-delay-minutes &lt;minutes&gt;] [--await-stabilization-minutes &lt;minutes&gt;] [--max-delay-minutes &lt;minutes&gt;] [--recheck-every-minutes &lt;minutes&gt;] &lt;feed-url&gt;
 
 Add a new feed from which mail or notifications may be generated.
 
 Options and flags:
     --help
         Display this help text.
     --ping
         Check feed as often as possible, notify as soon as possible, regardless of (in)stability.
     --min-delay-minutes &lt;minutes&gt;
         Minimum wait (in miunutes) before a newly encountered item can be notified.
     --await-stabilization-minutes &lt;minutes&gt;
         Period (in minutes) over which an item should not have changed before it is considered stable and can be notified.
     --max-delay-minutes &lt;minutes&gt;
         Notwithstanding other settings, maximum period past which an item should be notified, regardless of its stability.
     --recheck-every-minutes &lt;minutes&gt;
         Delay between refreshes of feeds, and redetermining items' availability for notification.
</code></pre>
   <p><code>feedletter</code> is general very cautious about announcing / e-mailing posts. Since posts are often edited soon after they are published, by default it waits a period of time, and then checks to make sure the post has been stable a while before announcing or e-mailing. By default <code>min-delay-minutes</code> is 30, <code>await-stabilization-minutes</code> is 15, <code>max-delay-minutes</code> is 180, and <code>recheck-every-minutes</code> is 10.</p>
   <p>It's probably best to use cautious settings like this, so you don't announce your links while you are still re-editing them. (I don't think I'm the only writer who inevitably finds important edits just after hitting publish.)</p>
   <p>For this tutorial, I'm going to use a feed of all the articles in my newsreader, <a href="https://www.inoreader.com">inoreader</a>. Its URL looks like</p>
   <blockquote>
    <p><code>https://www.inoreader.com/stream/user/0000000000/tag/all-articles</code>,</p>
   </blockquote>
   <p>although <code>0000000000</code> is not in fact my user id, I'm altering that for privacy. You should use whatever feed you are interested in syndicating.</p>
   <p>To use the defaults, you could just type</p>
   <pre><code class="language-plaintext">$ ./feedletter add-feed https://www.inoreader.com/stream/user/0000000000/tag/all-articles
</code></pre>
   <p>For the purposes of our little experiment here, I want articles announced as soon as <code>feedletter</code> sees them, even if they have not "stabilized". For that, it will just be</p>
   <pre><code class="language-plaintext">$ ./feedletter add-feed --ping https://www.inoreader.com/stream/user/0000000000/tag/all-articles
</code></pre>
   <p>You should see something like</p>
   <pre><code class="language-plaintext">+---------+-------------------------------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
¦ Feed ID ¦ Feed URL                                                          ¦ Min Delay Mins ¦ Await Stabilization Mins ¦ Max Delay Mins ¦ Recheck Every Mins ¦ Added                       ¦ Last Assigned               ¦
+---------+-------------------------------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
¦ 1       ¦ https://www.inoreader.com/stream/user/0000000000/tag/all-articles ¦ 0              ¦ 0                        ¦ 0              ¦ 0                  ¦ 2025-01-11T05:00:47.128363Z ¦ 2025-01-11T05:00:47.128363Z ¦
+---------+-------------------------------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
</code></pre>
   <p>The numbers will be different if you (wisely!) don't use the <code>--ping</code> flag.</p>
   <div class="note">
    <p>Using <code>--ping</code> will cause the feed to be checked very frequently, currently about once a minute. Some servers may grow cross! You may be blocked or rate-limited!</p>
    <p>You can use <code>./feedletter alter-feed</code> to set a gentler <code>recheck-every-minutes</code>.</p>
   </div>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#14-define-your-subscribables" id="14-define-your-subscribables" name="14-define-your-subscribables" class="anchorlink"></a>14. Define your subscribables</h3>
   <p><code>feedletter</code> is a layered application. First you tell it what feeds to watch, then you define different kinds of "subscribables" — e.g. email, Mastodon, BlueSky — to each of which multiple recipients can subscribe in order to receive notifications.</p>
   <p>Typically an e-mail subscribable will have many — 100s, 1000s — of destinations.</p>
   <p>BlueSky and Mastodon "subscribable" often have just one subscriber, the accounts to which entries will be syndicated. You can attach as many subscribers as you want, though, if you want to post announcements to many accounts.</p>
   <p>Let's start with our Mastodon subscribable:</p>
   <pre><code class="language-plaintext">$ ./feedletter define-mastodon-subscribable --help
</code></pre>
   <p>You'll see something like</p>
   <pre><code class="language-plaintext"> Usage: feedletter define-mastodon-subscribable --feed-id &lt;feed-id&gt; --name &lt;name&gt; [--extra-param &lt;key:value&gt;]...
 
 Define a Mastodon subscribable, a source from which Mastodon feeds can receive automatic posts..
 
 Options and flags:
     --help
         Display this help text.
     --feed-id &lt;feed-id&gt;
         The ID of the RSS feed to be watched.
     --name &lt;name&gt;
         A name for the new subscribable.
     --extra-param &lt;key:value&gt;
         An extra parameter your notification renderers might use.
</code></pre>
   <p>We saw the <code>feed-id</code> in the output to <code>./feedletter add-feed</code> (and if we forget it, we can always run <code>./feedletter list-feeds</code>).</p>
   <p>The subscribable name can be anything we want, but by default it will appear in announcements. I'm going to call this subscribable <code>stevefeeds-masto</code>:</p>
   <pre><code class="language-plaintext">$ ./feedletter define-mastodon-subscribable --feed-id=1 --name=stevefeeds-masto
 
 -*-*-*-
 
 Subscribable Name:    stevefeeds-masto
 Feed ID:              1
 Subscription Manager: {
     "extraParams": {},
     "type": "Mastodon.Announce",
     "version": 1
 }
 A Mastodon subscribable to feed with ID '1' named 'stevefeeds-masto' has been created.
</code></pre>
   <p>Let's do the same, and make a BlueSky subscribable:</p>
   <pre><code class="language-plaintext">$ ./feedletter define-bluesky-subscribable --feed-id=1 --name=stevefeeds-bsky

 -*-*-*-
 
 Subscribable Name:    stevefeeds-bsky
 Feed ID:              1
 Subscription Manager: {
     "extraParams": {},
     "type": "BlueSky.Announce",
     "version": 1
 }
 A BlueSky subscribable to feed with ID '1' named 'stevefeeds-bsky' has been created.
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#15-subscribe-the-target-mastodon-and-bluesky-accounts-to-the-subscribables" id="15-subscribe-the-target-mastodon-and-bluesky-accounts-to-the-subscribables" name="15-subscribe-the-target-mastodon-and-bluesky-accounts-to-the-subscribables" class="anchorlink"></a>15. Subscribe the target Mastodon and BlueSky accounts to the subscribables.</h3>
   <p>Let's check out the <code>subscribe</code> subcommand.</p>
   <pre><code class="language-plaintext">$ ./feedletter subscribe --help

 Usage:
     feedletter subscribe --subscribable-name &lt;name&gt; --e-mail &lt;address&gt; [--display-name &lt;name&gt;] [--unconfirmed]
     feedletter subscribe --subscribable-name &lt;name&gt; --sms &lt;number&gt; [--unconfirmed]
     feedletter subscribe --subscribable-name &lt;name&gt; --masto-instance-name &lt;name&gt; --masto-instance-url &lt;url&gt; [--unconfirmed]
     feedletter subscribe --subscribable-name &lt;name&gt; --bsky-identifier &lt;identifier&gt; [--bsky-entryway-url &lt;name&gt;] [--unconfirmed]
 
 Subscribe to a subscribable.
 
 Options and flags:
     --help
         Display this help text.
     --subscribable-name &lt;name&gt;
         The name of an already-defined subscribable.
     --e-mail &lt;address&gt;
         The e-mail address to subscribe.
     --display-name &lt;name&gt;
         A display name to wrap around the e-mail address.
     --sms &lt;number&gt;
         The number to which messages should be sent.
     --masto-instance-name &lt;name&gt;
         A private name for this Mastodon instance.
     --masto-instance-url &lt;url&gt;
         The URL of the Mastodon instance
     --bsky-identifier &lt;identifier&gt;
         An account identifier, usually a DNS name or value beginning with 'did:'.
     --bsky-entryway-url &lt;name&gt;
         The base URL of the bluesky service.
     --unconfirmed
         Mark the subscription unconfirmed.
</code></pre>
   <p>Recall that when we placed our Mastodon access token in <code>feedletter-secrets.properties</code>, we gave it a name. We chose "arbitrary-name", because it's lovely. That becomes our <code>masto-instance-name</code>. The URL of the instance that hosts our accounts will be <code>masto-instance-url</code>. So we just...</p>
   <pre><code class="language-plaintext">./feedletter subscribe --subscribable-name stevefeeds-masto --masto-instance-name arbitrary-name --masto-instance-url https://mas.to/
</code></pre>
   <p>For BlueSky, at least for now, we don't really need to provide a URL, there's just one. (In the future, hopefully there will be more BlueSky-like <a href="https://atproto.com/">atproto</a> services, for which you would provide and <code>entryway-url</code>). All you need to provide is <code>bsky-identifier</code>, the DNS handle or <a href="https://atproto.com/specs/did"><code>did</code></a> associated with your BlueSky account.</p>
   <pre><code class="language-plaintext">./feedletter subscribe --subscribable-name stevefeeds-bsky --bsky-identifier testable-bsky.bsky.social
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#16-test-in-the-terminal" id="16-test-in-the-terminal" name="16-test-in-the-terminal" class="anchorlink"></a>16. Test in the terminal</h3>
   <p>Finally, all of our setup is done!</p>
   <p>We can get <code>feedletter</code> checking out our feed and syndicating announcements just by running what's usually the daemon process in the terminal.</p>
   <pre><code class="language-plaintext">$ ./feedletter daemon

Jan 13, 2025 5:33:34 PM com.mchange.v2.log.MLog 
INFO: MLog clients using java 1.4+ standard logging.
2025-01-13@17:33:36 [INFO] [com.mchange.feedletter.Daemon] feedletter-0.1.0-13-60e19c daemon (re)starting. 
2025-01-13@17:33:36 [INFO] [com.mchange.feedletter.Daemon] Spawning daemon fibers. 
2025-01-13@17:33:37 [INFO] [com.mchange.feedletter.Daemon] Starting web API service on interface '127.0.0.1', port 8024. 
timestamp=2025-01-13T17:33:37.596959114Z level=INFO thread=#zio-fiber-1822226262 message="Starting the server..." location=com.mchange.feedletter.Daemon.webDaemon file=Daemon.scala line=189
timestamp=2025-01-13T17:33:37.714089350Z level=INFO thread=#zio-fiber-1822226262 message="Server started" location=com.mchange.feedletter.Daemon.webDaemon file=Daemon.scala line=189
2025-01-13@17:33:50 [FINE] [com.mchange.feedletter.db.PgDatabase] Deleting any as-yet-unassigned items that have been deleted from feed with ID 1 
2025-01-13@17:33:50 [INFO] [com.mchange.feedletter.db.PgDatabase] Updated/assigned all items from feed with ID 1, feed URL 'https://www.inoreader.com/stream/user/0000000000/tag/all-articles' 
2025-01-13@17:33:59 [FINE] [com.mchange.feedletter.db.PgDatabase] Deleting any as-yet-unassigned items that have been deleted from feed with ID 1 
2025-01-13@17:33:59 [INFO] [com.mchange.feedletter.db.PgDatabase] Updated/assigned all items from feed with ID 1, feed URL 'https://www.inoreader.com/stream/user/0000000000/tag/all-articles' 
2025-01-13@17:34:03 [FINE] [com.mchange.feedletter.db.PgDatabase] Deleting any as-yet-unassigned items that have been deleted from feed with ID 1 
</code></pre>
   <p>Great! This is what it looks like when the daemon is watch feeds. (In this case, just one feed.)</p>
   <p>Eventually, when a new item is posted, you'll see entries like</p>
   <pre><code class="language-plaintext">2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Added new item, feed ID 1, guid 'http://www.inoreader.com/article/3a9c6e7789e019a2'. 
2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Item with GUID 'http://www.inoreader.com/article/3a9c6e7789e019a2' from feed with ID 1 has been assigned in subscribable 'stevefeeds-bsky' with assignable identifier 'http://www.inoreader.com/article/3a9c6e7789e019a2'. 
2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Item with GUID 'http://www.inoreader.com/article/3a9c6e7789e019a2' from feed with ID 1 has been assigned in subscribable 'stevefeeds-masto' with assignable identifier 'http://www.inoreader.com/article/3a9c6e7789e019a2'. 
2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Item with GUID 'http://www.inoreader.com/article/3a9c6e7789e019a2' from feed with ID 1 has been assigned (or refused assignment) in all subscribables to that feed. 
</code></pre>
   <p>In English, a new item has been found, and it's been "assigned" to the various subscribables watching the feed, here one that distributes to mastodon, and another that distributes to Mastodon and another that distributes to BlueSky. (You can also <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html#12-define-subscribables-to-feeds">make various forms of e-mail subscribables</a>!)</p>
   <p>Some subscribables collect many posts before distributing them. (For example, a weekly digest e-mail.)</p>
   <p>But for Mastodon and BlueSky post announcements, each post should be distributed immediately following its observation. So soon after we see an add message, we'll see messages like...</p>
   <pre><code class="language-plaintext">2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Queued Mastodon post for distribution. Content: [stevefeeds-masto] New Post: Thousands sign petition calling on ad titan WPP to rethink its 4-day RTO demand, by pthompson@insider.com (Polly Thompson) https://www.businessinsider.com/wpp-return-to-office-thousands-sign-petition-workers-2025-1 
2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Assignable (item collection) defined by subscribable name 'stevefeeds-masto', within-type-id 'http://www.inoreader.com/article/3a9c6e7789e019b1' has been deleted. 
2025-01-13@17:34:42 [FINE] [com.mchange.feedletter.db.PgDatabase] Cached values of items fully distributed have been cleared. 
2025-01-13@17:34:42 [INFO] [com.mchange.feedletter.db.PgDatabase] Completed assignable 'http://www.inoreader.com/article/3a9c6e7789e019b1' with subscribable 'stevefeeds-masto'. 
2025-01-13@17:34:42 [INFO] [com.mchange.feedletter.db.PgDatabase] Cleaned away data associated with completed assignable 'http://www.inoreader.com/article/3a9c6e7789e019b1' in subscribable 'stevefeeds-masto'. 
</code></pre>
   <p>After "completion", all data about the post is deleted, except the RSS guid and link are retained to prevent reannouncing the same post should it reappear in the RSS.</p>
   <p>Once queued for distribution, you will see messages about postings to Mastodon and BlueSky.</p>
   <p>Since on very active feeds, you can get a lot of posts at once when they are republished, <code>feedletter</code> spaces postings to a single account by one minute (currently hardcoded, eventually configurable), though it sends its posting streams to all subscribed accounts in parallel.</p>
   <p>So you'll see stuff like this:</p>
   <pre><code class="language-plaintext">2025-01-13@17:52:48 [INFO] [com.mchange.feedletter.db.PgDatabase] Posted BlueSky notification to (https://bsky.social/,testable-bsky.bsky.social) 
2025-01-13@17:53:13 [FINE] [com.mchange.feedletter.db.PgDatabase] Deleting any as-yet-unassigned items that have been deleted from feed with ID 1 
2025-01-13@17:53:13 [INFO] [com.mchange.feedletter.db.PgDatabase] Updated/assigned all items from feed with ID 1, feed URL 'https://www.inoreader.com/stream/user/0000000000/tag/all-articles' 
2025-01-13@17:53:15 [INFO] [com.mchange.feedletter.db.PgDatabase] Posted Mastodon notification to (https://mas.to/,arbitrary-name) 
</code></pre>
   <p>And we see posts!</p>
   <div style="text-align: center; margin-bottom: 1em;">
    <img src="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/example-masto.png" width="80%">
   </div>
   <div style="text-align: center;">
    <img src="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/example-bsky.png" width="80%">
   </div>
   <p>Sometimes things do go wrong!</p>
   <pre><code class="language-plaintext">2025-01-13@17:56:49 [WARNING] [com.mchange.feedletter.db.PgDatabase] Failed attempt to post to Bluesky destination 'https://bsky.social/', retried = 0 (maxRetries: 10) 
requests.RequestFailedException: Request to https://bsky.social/xrpc/com.atproto.repo.createRecord failed with status code 400
{"error":"InvalidRequest","message":"Invalid app.bsky.feed.post record: Record/text must not be longer than 300 graphemes"}
	at requests.Requester$$anon$1.readBytesThrough(Requester.scala:360)
	at geny.Readable.writeBytesTo(Writable.scala:93)
	at geny.Readable.writeBytesTo$(Writable.scala:91)
        ...
2025-01-13@17:56:49 [WARNING] [com.mchange.feedletter.db.PgDatabase] Attempt to post BlueSky notification to (https://bsky.social/,testable-bsky.bsky.social) failed or was skipped. Postable: BskyPostable(6,[stevefeeds-bsky] New Post: In DISSENT's winter issue, I make the case for left-YIMBYism in a debate with Brian Callaci and Sandeep Vaheesan https://www.dissentmagazine.org/article/supply-and-the-housing-crisis-a-debate/, by @resnikoff.bsky.social - Ned Resnikoff https://bsky.app/profile/resnikoff.bsky.social/post/3lfnb24zzbc2c,https://bsky.social/,testable-bsky.bsky.social,0,List()) 
</code></pre>
   <p><code>feedletter</code> will retry failed postings up to 10 times by default (the retry count is reconfigurable), then give up. This issue — the announcement is just too long to fit in BlueSky's 300 character limit — will not be cured, so that's what will happen. (I'll probably modify the BlueSky subscribable to just reject too-long posts, but for now they are just tried, retried, and eventually dropped.)</p>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#17-enable-feedletter-as-a-systemd-daemon" id="17-enable-feedletter-as-a-systemd-daemon" name="17-enable-feedletter-as-a-systemd-daemon" class="anchorlink"></a>17. Enable feedletter as a systemd daemon</h3>
   <p>We just place a systemd unit file <code>/opt/feedletter</code>, and then symlink it from <code>/etc/systemd/system</code>.</p>
   <pre><code class="language-plaintext">[Unit]
Description=Feedletter RSS-To-Mail-Etc Service
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/opt/feedletter/feedletter.pid
User=feedletter
Group=feedletter
WorkingDirectory=/opt/feedletter

#
# feedletter daemon behaves as a traditional forking service
# when given the --fork flag
#
# its launcher, mill, will fork a feedletter process,
# write a PID file for that process in the base working directory
# and then exit
#
ExecStart=/opt/feedletter/feedletter daemon --fork

TimeoutStopSec=90
Restart=on-failure
RestartSec=10s
StandardError=journal
StandardOutput=journal
StandardInput=null

[Install]
WantedBy=multi-user.target
</code></pre>
   <p>Then it's just</p>
   <pre><code class="language-plaintext"># systemctl enable feedletter
# systemctl start feedletter
</code></pre>
   <p>We verify that the service is running.</p>
   <pre><code class="language-plaintext"># journalctl -u feedletter --follow
Jan 13 20:15:55 temp-feedletter systemd[1]: feedletter.service: Consumed 18.609s CPU time, 222M memory peak.
Jan 13 20:15:55 temp-feedletter systemd[1]: Starting feedletter.service - Feedletter RSS-To-Mail-Etc Service...
Jan 13 20:15:56 temp-feedletter feedletter[70034]: =========================================== runMainDaemon PreMain daemon --fork ======================================
Jan 13 20:15:56 temp-feedletter feedletter[70034]: ======================================================================================================================
Jan 13 20:15:59 temp-feedletter feedletter[70034]: [62/62] =================================== runMainDaemon PreMain daemon --fork =================================== 3s
Jan 13 20:15:59 temp-feedletter feedletter[70034]: ======================================================================================================================
Jan 13 20:16:00 temp-feedletter systemd[1]: Started feedletter.service - Feedletter RSS-To-Mail-Etc Service.
Jan 13 20:16:01 temp-feedletter feedletter[70086]: Jan 13, 2025 8:16:01 PM com.mchange.v2.log.MLog
Jan 13 20:16:01 temp-feedletter feedletter[70086]: INFO: MLog clients using java 1.4+ standard logging.
Jan 13 20:16:03 temp-feedletter feedletter[70086]: 2025-01-13@20:16:03 [INFO] [com.mchange.feedletter.Daemon] feedletter-0.1.0-13-60e19c daemon (re)starting.
Jan 13 20:16:03 temp-feedletter feedletter[70086]: 2025-01-13@20:16:03 [INFO] [com.mchange.feedletter.Daemon] Spawning daemon fibers.
Jan 13 20:16:03 temp-feedletter feedletter[70086]: 2025-01-13@20:16:03 [INFO] [com.mchange.feedletter.Daemon] Starting web API service on interface '127.0.0.1', port 8024.
Jan 13 20:16:04 temp-feedletter feedletter[70086]: timestamp=2025-01-13T20:16:04.337801942Z level=INFO thread=#zio-fiber-614230192 message="Starting the server..." location=com.mchange.feedletter.Daemon.webDaemon file=Daemon.scala line=189
Jan 13 20:16:04 temp-feedletter feedletter[70086]: timestamp=2025-01-13T20:16:04.470643106Z level=INFO thread=#zio-fiber-614230192 message="Server started" location=com.mchange.feedletter.Daemon.webDaemon file=Daemon.scala line=189
Jan 13 20:16:41 temp-feedletter feedletter[70086]: 2025-01-13@20:16:41 [FINE] [com.mchange.feedletter.db.PgDatabase] Deleting any as-yet-unassigned items that have been deleted from feed with ID 1
Jan 13 20:16:41 temp-feedletter feedletter[70086]: 2025-01-13@20:16:41 [INFO] [com.mchange.feedletter.db.PgDatabase] Updated/assigned all items from feed with ID 1, feed URL 'https://www.inoreader.com/stream/user/0000000000/tag/all-articles'

</code></pre>
   <p>Looks Good!</p>
   <h3><a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/#18-conclusion" id="18-conclusion" name="18-conclusion" class="anchorlink"></a>18. Conclusion</h3>
   <p>That's it!</p>
   <p>It seems like a lot, but it's much easier done than said. Give it a try. It won't bite.</p>
   <p>It is also possible to customize the announcement messages that feedletter syndicates, or to include post text, length permitting. If that would be useful to you, <a href="mailto:swaldman@mchange.com">Let me know</a> and I'll add a quick tutorial on that.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-01-14 @ <a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/index.html" class="pubtime">04:00 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 6 Jan 2025 20:30:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2025/01/06/supporting-all-item-rss/index.html</guid>
      <description>
        <![CDATA[In addition to single-item RSS for each post, this blog now offers all-item-rss. Check it out.. It's effectively a full-content archive of the site, in the form of easy-to-parse RSS. drafts.interfluidity.com supports both of these features as well. (Here's the all-items-feed, an example single-item-feed.) The channel element of these feeds includes metadata describing them. iffy:curation describes how many and what sort of items are included in the feed. iffy:completeness describes how complete...]]>
      </description>
      <link>https://tech.interfluidity.com/2025/01/06/supporting-all-item-rss/index.html</link>
      <title>Supporting all-item RSS</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-supporting-all-item-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>In addition to <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html">single-item RSS</a> for each post, this blog now offers <em>all-item-rss</em>. <a href="https://tech.interfluidity.com/all-item-feed/index.rss">Check it out.</a>. It's effectively a full-content archive of the site, in the form of easy-to-parse RSS.</p>
   <p><a href="https://tech.interfluidity.com/2025/01/06/supporting-all-item-rss/drafts.interfluidity.com"><code>drafts.interfluidity.com</code></a> supports both of these features as well. (Here's the <a href="https://drafts.interfluidity.com/all-item-feed/index.rss">all-items-feed</a>, an example <a href="https://drafts.interfluidity.com/2024/09/17/abundance-is-overcapacity/index.rss">single-item-feed</a>.)</p>
   <p>The channel element of these feeds includes metadata describing them. <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-curation"><code>iffy:curation</code></a> describes how many and what sort of items are included in the feed. <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-completeness"><code>iffy:completeness</code></a> describes how complete <em>each</em> item is, i.e. whether it include full content, or even potentially embeds media.</p>
   <p>Here's an example from an all-item feed:</p>
   <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    ...
    &lt;iffy:curation&gt;
      &lt;iffy:all/&gt;
    &lt;/iffy:curation&gt;
    &lt;iffy:completeness&gt;Content&lt;/iffy:completeness&gt;
    ...
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   <p>Here is an example from a single-item feed:</p>
   <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    ...
    &lt;iffy:curation&gt;
      &lt;iffy:single/&gt;
    &lt;/iffy:curation&gt;
    &lt;iffy:completeness&gt;Content&lt;/iffy:completeness&gt;
    ...
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   <p>An ordinary syndicatin feed that includes curation and completeness metadata looks like this:</p>
   <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    ...
    &lt;iffy:curation&gt;
      &lt;iffy:recent last="5"/&gt;
    &lt;/iffy:curation&gt;
    &lt;iffy:completeness&gt;Content&lt;/iffy:completeness&gt;
    ...
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   <p>All-item and single-item feeds, like syndication feeds, are discoverable in <code>&lt;link rel="alternate"&gt;</code> elements of the HTML pages of the blog.</p>
   <p>But they are not intended to be discovered by feed readers, which expect short feeds of recent posts for syndication. In order to prevent discovery of these feeds by feed readers, we give them special MIME type <em>in HTML link elements only</em>. These are still RSS feeds. Their "true" MIME type is still <code>application/rss+xml</code>.</p>
   <p>But in HTML link elements — only in HTML link elements — I use more specific, less standard MIME types, to throw unwitting feed readers off the scent. These MIME types are <code>application/x-all-item-rss+xml</code> and <code>application/x-single-item-rss+xml</code>.</p>
   <p>Here's the HTML link element to a site's all-item feed:</p>
   <pre><code class="language-html">  &lt;link rel="alternate" type="application/x-all-item-rss+xml" title="drafts.interfluidity.com - all items" href="https://drafts.interfluidity.com/all-item-feed/index.rss"&gt;
</code></pre>
   <p>Here's the HTML link element from a post permalink to that post's single-item feed:</p>
   <pre><code class="language-html">  &lt;link rel="alternate" type="application/x-single-item-rss+xml" title="Segmentation fault" href="index.rss"&gt;
</code></pre>
   <p>While ordinary feed readers should ignore these feeds, clients resolving <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-item-ref"><code>iffy:item-ref</code></a> tags might find single-item and all-item feeds very useful.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2025-01-06 @ <a href="https://tech.interfluidity.com/2025/01/06/supporting-all-item-rss/index.html" class="pubtime">08:30 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sun, 22 Dec 2024 10:40:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index-updated-2024-12-22-10-40-00.html</guid>
      <description>
        <![CDATA[A significant update of The 'iffy' XML namespace was made on 2024-12-22 @ 10:40 AM EST. → Document iffy:item-ref and iffy:in-reply-to. The post was originally published 2024-05-13 @ 04:10 AM EDT. This is an automatically generated post. by Update-o-Bot on 2024-12-22 @ 10:40 AM...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index-updated-2024-12-22-10-40-00.html</link>
      <title>Updated: The 'iffy' XML namespace</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-12-22T15:40:00Z</atom:updated>
          <atom:summary><![CDATA[Document <code>iffy:item-ref</code> and <code>iffy:in-reply-to</code>.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-c1c3071b0ac3127c2969b24e26d439510fdc8c96.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-c1c3071b0ac3127c2969b24e26d439510fdc8c96-to-7f272e9b81c08396eb5e1f9e2209e6977a2f39af.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[The 'iffy' XML namespace]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/xml/iffy/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/xml/iffy/index.html</iffy:uid>
            <atom:published>2024-05-13T08:10:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/xml/iffy/index.html"><i>The 'iffy' XML namespace</i></a> was made on 2024-12-22 @ 10:40 AM EST.</p>
  <blockquote>
   → Document <code>iffy:item-ref</code> and <code>iffy:in-reply-to</code>.
  </blockquote>
  <p>The post was originally published 2024-05-13 @ 04:10 AM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-12-22 @ <a href="https://tech.interfluidity.com/xml/iffy/index-updated-2024-12-22-10-40-00.html" class="pubtime">10:40 AM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Fri, 15 Nov 2024 01:10:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index-updated-2024-11-15-01-10-00.html</guid>
      <description>
        <![CDATA[A significant update of The 'iffy' XML namespace was made on 2024-11-15 @ 01:10 AM EST. → Document iffy:curation, and curation type elements iffy:all, iffy:recent, iffy:selection, iffy:single. The post was originally published 2024-05-13 @ 04:10 AM EDT. This is an automatically generated post. by Update-o-Bot on 2024-11-15 @ 01:10 AM...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index-updated-2024-11-15-01-10-00.html</link>
      <title>Updated: The 'iffy' XML namespace</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-11-15T06:10:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Document <code>iffy:curation</code>, and curation type elements <code>iffy:all</code>, <code>iffy:recent</code>, <code>iffy:selection</code>, <code>iffy:single</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-5fcd99373d2d940a0c6e1468979be59e2d6bcced.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-5fcd99373d2d940a0c6e1468979be59e2d6bcced-to-c1c3071b0ac3127c2969b24e26d439510fdc8c96.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[The 'iffy' XML namespace]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/xml/iffy/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/xml/iffy/index.html</iffy:uid>
            <atom:published>2024-05-13T08:10:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/xml/iffy/index.html"><i>The 'iffy' XML namespace</i></a> was made on 2024-11-15 @ 01:10 AM EST.</p>
  <blockquote>
   → Document <code>iffy:curation</code>, and curation type elements <code>iffy:all</code>, <code>iffy:recent</code>, <code>iffy:selection</code>, <code>iffy:single</code>.
  </blockquote>
  <p>The post was originally published 2024-05-13 @ 04:10 AM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-11-15 @ <a href="https://tech.interfluidity.com/xml/iffy/index-updated-2024-11-15-01-10-00.html" class="pubtime">01:10 AM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Tue, 12 Nov 2024 06:30:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html</guid>
      <description>
        <![CDATA[This blog now generates single-item RSS alongside each blog post. This is in preparation for how I mean to support blog-to-blog comments, most directly. But in general it is offered as an alternative to approaches like microformats. Microformats exist and other people use them. I feel a bit bad not to adopt them. But my preference is to have meta-data more cleanly separated from displayed HTML, even if it is "POSH". It seems to me like too many concerns are mixed. If microformats were very...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html</link>
      <title>Supporting single-item RSS</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-supporting-single-item-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>This blog now <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.rss">generates</a> single-item RSS alongside each blog post.</p>
   <p>This is in preparation for how I mean to support blog-to-blog comments, most directly.</p>
   <p>But in general it is offered as an alternative to approaches like <a href="https://microformats.org/">microformats</a>.</p>
   <p>Microformats exist and other people use them. I feel a bit bad not to adopt them. But my preference is to have meta-data more cleanly separated from displayed HTML, even if it is "<a href="https://microformats.org/wiki/posh">POSH</a>". It seems to me like too many concerns are mixed.</p>
   <p>If microformats were very widely adopted — particularly if the JVM ecosystem already had well-supported, widely used microformats parsers — I might swallow my own preference and run with them. But I don't think that's the case. I'm going to have to do my own parsing, and I have good tools for that with XML and RSS.</p>
   <p><a href="https://github.com/swaldman/unstatic"><code>unstatic</code></a> <code>SimpleBlog</code> instances now support generating single-item RSS. Just override</p>
   <pre><code class="language-scala">val generateSingleItemRss : Boolean
</code></pre>
   <p>to <code>true</code>, and they will appear.</p>
   <p>By default, each entry's single-item RSS is placed by converting each <code>whatever.html</code> to <code>whatever.rss</code>, under the same path. (If the leaf of the path does not end with <code>.html</code>, then <code>.rss</code> is simply appended to the full path.)</p>
   <p>If you prefer a different scheme, you can override</p>
   <pre><code class="language-scala">def singleItemRssSiteRootedFromPermalinkSiteRooted( permalinkSiteRooted : Rooted ) : Rooted
</code></pre>
   <p>where <code>Rooted</code> is a <a href="https://github.com/swaldman/unstatic/blob/main/src/unstatic/UrlPath.scala"><code>unstantic.UrlPath.Rooted</code></a>.</p>
   <p>Single-item RSS and the HTML "permalink" for the item should mutually refer to one another.</p>
   <p>In the HTML header tag, we add a <code>&lt;link&gt;</code> tag with <code>rel="alternate"</code> to point to the single-item RSS.</p>
   <p>We <em>don't</em> want feed readers to subscribe to single-item RSS, so, a bit clumsily, we make up a special content type that feed readers won't recognize, <code>application/x-single-item-rss+xml</code>.</p>
   <p>Here's the link you'll find in the source of this post.</p>
   <pre><code class="language-html">&lt;link rel="alternate" type="application/x-single-item-rss+xml" title="Supporting single-item RSS" href="index.rss"&gt;
</code></pre>
   <p>The single-item RSS links back to the HTML as a matter of course, via the standard <code>&lt;link&gt;</code> element within the sole <code>&lt;item&gt;</code>.</p>
   <p>Check out <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.rss">the single-item RSS for this post</a>!</p>
   <hr>
   <div style="font-size: smaller">
    <p><strong>Note:</strong> If an <code>&lt;atom:link rel="self" /&gt;</code> tag is included in the <code>&lt;channel&gt;</code> element of a single-item RSS stream, the type should be the standard <code>type="application/rss+xml"</code>, <span style="color: red"> <strong>and definitely not</strong> </span> <code>application/x-single-item-rss+xml</code>. (I recommend <code>&lt;atom:link rel="self" /&gt;</code> <em>always</em> be included in the <code>&lt;channel&gt;</code> of an RSS stream, whenever there exists a stable link to the stream.) Single-item RSS is just standard RSS for all purposes other than a feed-reader deciding whether to treat a feed as subscribable.</p>
   </div>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-11-12 @ <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" class="pubtime">06:30 AM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 2 Nov 2024 17:15:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index-updated-2024-11-02-17-15-00.html</guid>
      <description>
        <![CDATA[A significant update of The 'iffy' XML namespace was made on 2024-11-02 @ 05:15 PM EDT. → Clarifications of iffy:provenance and iffy:update-history. The post was originally published 2024-05-13 @ 04:10 AM EDT. This is an automatically generated post. by Update-o-Bot on 2024-11-02 @ 05:15 PM...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index-updated-2024-11-02-17-15-00.html</link>
      <title>Updated: The 'iffy' XML namespace</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-11-02T21:15:00Z</atom:updated>
          <atom:summary><![CDATA[Clarifications of iffy:provenance and iffy:update-history.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-34d8dab8f187c6d9512615dbb83c95395aa49a3b.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-34d8dab8f187c6d9512615dbb83c95395aa49a3b-to-5fcd99373d2d940a0c6e1468979be59e2d6bcced.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[The 'iffy' XML namespace]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/xml/iffy/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/xml/iffy/index.html</iffy:uid>
            <atom:published>2024-05-13T08:10:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/xml/iffy/index.html"><i>The 'iffy' XML namespace</i></a> was made on 2024-11-02 @ 05:15 PM EDT.</p>
  <blockquote>→ Clarifications of iffy:provenance and iffy:update-history.</blockquote>
  <p>The post was originally published 2024-05-13 @ 04:10 AM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-11-02 @ <a href="https://tech.interfluidity.com/xml/iffy/index-updated-2024-11-02-17-15-00.html" class="pubtime">05:15 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Fri, 16 Aug 2024 11:20:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/06/06/neonix/index-updated-2024-08-16-11-20-00.html</guid>
      <description>
        <![CDATA[A significant update of Neonix was made on 2024-08-16 @ 11:20 AM EDT. → Add update regarding new location of Bill Mill's "modern unix tool list" The post was originally published 2024-06-06 @ 03:35 PM EDT. This is an automatically generated post. by Update-o-Bot on 2024-08-16 @ 11:20 AM...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/06/neonix/index-updated-2024-08-16-11-20-00.html</link>
      <title>Updated: Neonix</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-08-16T15:20:00Z</atom:updated>
          <atom:summary><![CDATA[Add update regarding new location of Bill Mill's "modern unix tool list"]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/06/neonix/index-oldcommit-758902715b5d838eb65acaac13ac5dcda53f5314.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/06/neonix/index-diff-758902715b5d838eb65acaac13ac5dcda53f5314-to-bef1d5cfc2e26b7def96a2eed8d1b09663f01042.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[Neonix]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/2024/06/06/neonix/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/2024/06/06/neonix/index.html</iffy:uid>
            <atom:published>2024-06-06T19:35:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/2024/06/06/neonix/index.html"><i>Neonix</i></a> was made on 2024-08-16 @ 11:20 AM EDT.</p>
  <blockquote>→ Add update regarding new location of Bill Mill's "modern unix tool list"</blockquote>
  <p>The post was originally published 2024-06-06 @ 03:35 PM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-08-16 @ <a href="https://tech.interfluidity.com/2024/06/06/neonix/index-updated-2024-08-16-11-20-00.html" class="pubtime">11:20 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 1 Jul 2024 14:40:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index-updated-2024-07-01-14-40-00.html</guid>
      <description>
        <![CDATA[A significant update of The 'iffy' XML namespace was made on 2024-07-01 @ 02:40 PM EDT. → Major revision of iffy:synthetic, generalize iffy:initial, iffy:update, iffy:update-history, define iffy:uid. The post was originally published 2024-05-13 @ 04:10 AM EDT. This is an automatically generated post. by Update-o-Bot on 2024-07-01 @ 02:40 PM...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index-updated-2024-07-01-14-40-00.html</link>
      <title>Updated: The 'iffy' XML namespace</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-07-01T18:40:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Major revision of <code>iffy:synthetic</code>, generalize <code>iffy:initial</code>, <code>iffy:update</code>, <code>iffy:update-history</code>, define <code>iffy:uid</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-0df7787c056ab2b983e2de4d107c2fa477b7c8f4.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-0df7787c056ab2b983e2de4d107c2fa477b7c8f4-to-34d8dab8f187c6d9512615dbb83c95395aa49a3b.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[The 'iffy' XML namespace]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/xml/iffy/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/xml/iffy/index.html</iffy:uid>
            <atom:published>2024-05-13T08:10:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/xml/iffy/index.html"><i>The 'iffy' XML namespace</i></a> was made on 2024-07-01 @ 02:40 PM EDT.</p>
  <blockquote>
   → Major revision of <code>iffy:synthetic</code>, generalize <code>iffy:initial</code>, <code>iffy:update</code>, <code>iffy:update-history</code>, define <code>iffy:uid</code>.
  </blockquote>
  <p>The post was originally published 2024-05-13 @ 04:10 AM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-07-01 @ <a href="https://tech.interfluidity.com/xml/iffy/index-updated-2024-07-01-14-40-00.html" class="pubtime">02:40 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 22 Jun 2024 21:35:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/06/22/condensing-updates-that-appear-in-digests/index.html
      </guid>
      <description>
        <![CDATA[In the previous post, I claimed to be "finished" my exploration of handling updates. Ha! I don't like how my update notifications appear in digests — in e-mail newsletters that gather up all the posts over a period of time. There are two problems: Update notifications appear in digests as separate, cookie-cutter posts, which bury and dilute "real" posts. On websites, we can make synthetic update posts visually distinct to help guide visitors past them. We could do that in HTML mail digests too,...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/22/condensing-updates-that-appear-in-digests/index.html</link>
      <title>Condensing updates that appear in digests</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>In the <a href="https://tech.interfluidity.com/2024/06/20/sprouted/index.html">previous post</a>, I claimed to be "finished" my exploration of handling updates.</p>
   <p>Ha!</p>
   <p>I don't like how my update notifications appear in digests — in e-mail newsletters that gather up all the posts over a period of time.</p>
   <p>There are two problems:</p>
   <ol>
    <li>
     <p><strong>Update notifications appear in digests as separate, cookie-cutter posts, which bury and dilute "real" posts.</strong></p>
     <p>On websites, we can make synthetic update posts visually distinct to help guide visitors past them. We could do that in HTML mail digests too, but I think update posts will still put people off actually reading new material when they are going quickly through their e-mail, particularly when updates are more recent and therefore come before the "real" posts.</p>
    </li>
    <li>
     <p><strong>Updates appear even for posts that are included in the current digest.</strong></p>
     <p><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"><em>feedletter</em></a> digests always include the most recently seen version of a post, so from the digest reader's perspective, the "update" notification tells them about nothing that isn't already in the post.</p>
    </li>
   </ol>
   <p>To address this, I mean to do a bunch of things.</p>
   <ol>
    <li>
     <p>I'm going to modify the definition of <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-synthetic"><code>iffy:synthetic</code></a>, reversing course on my my current admonition that</p>
     <blockquote>
      <p>Applications that include <code>iffy:synthetic</code> as a direct child of channel SHOULD NOT also mark individual <code>item</code>s as <code>iffy:synthetic</code>, unless there is some meaningful sense in which some items are <em>more</em> synthetic than others. It serves no purpose to mark every item of a feed <code>iffy:synthetic</code> when the channel is already so marked.</p>
     </blockquote>
     <p>Never mind.</p>
     <p>Until now, <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-synthetic"><code>iffy:synthetic</code></a> has been basically just a marker, so there was no point in marking posts twice. Marking at the <code>channel</code> level implied the syntheticness and the types at the item level.</p>
     <p>But now we'll reconceive of <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-synthetic"><code>iffy:synthetic</code></a> as also the carrier of the data on which the item content (in <a href="https://www.rssboard.org/rss-specification#hrelementsOfLtitemgt"><code>description</code></a>, <a href="https://www.rssboard.org/rss-profile#namespace-elements-content-encoded"><code>content:encoded</code></a>, or <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.1.3"><code>atom:content</code></a>) is based.</p>
     <p>The item content, of course, remains the post's HTML, whether it is a synthetic post or not. But we'll want the information we used to <em>compose</em> synthetic posts to be available, in an <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-type"><code>iffy:type</code></a>-dependent way, inside <code>item &gt; iffy:synthetic</code>. So even when a <code>channel</code> is marked synthetic, with a type that implies the type of elements, we will want explicitly to include an <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-synthetic"><code>iffy:synthetic</code></a> element in each item.</p>
     <p>For synthethic items of type <code>UpdateAnnouncement</code> — the relevant case here — we've already defined an element that carries most the relevant data, <a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-update"><code>iffy:update</code></a>.</p>
     <p>We'll also need the <code>guid</code> of the post updated. So we'll <a href="https://tech.interfluidity.com/xml/iffy/index-oldcommit-394986cb8d9c57f567d324e691a44d50102101ce.html#iffy-original-guid">bring back</a> <code>iffy:original-guid</code>, with a slightly modified role.</p>
    </li>
    <li>
     <p>I'll define a <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html#16-advanced-customize-the-content"><em>feedletter</em> content <code>Customizer</code></a> that</p>
     <ol>
      <li>filters away upates to <code>items</code> already in the post;</li>
      <li>combines the remaining updates into a single notification post; and</li>
      <li>places that notification post at the end of the digest.</li>
     </ol>
    </li>
   </ol>
   <p>So. We have a plan!</p>
   <p>Let's see if it works.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-06-22 @ <a href="https://tech.interfluidity.com/2024/06/22/condensing-updates-that-appear-in-digests/index.html" class="pubtime">09:35 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Thu, 20 Jun 2024 17:50:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/06/20/sprouted/index-updated-2024-06-20-17-50-00.html
      </guid>
      <description>
        <![CDATA[A significant update of Sprouted was made on 2024-06-20 @ 05:50 PM EDT. → Add bold update crediting Maggie Appleton for some of these ideas. The post was originally published 2024-06-20 @ 03:05 PM EDT. This is an automatically generated post. by Update-o-Bot on 2024-06-20 @ 05:50 PM...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/20/sprouted/index-updated-2024-06-20-17-50-00.html</link>
      <title>Updated: Sprouted</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-06-20T21:50:00Z</atom:updated>
          <atom:summary><![CDATA[Add bold update crediting Maggie Appleton for some of these ideas.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/20/sprouted/index-oldcommit-f22b4df6db0c2b09d42406fce93175d3fb7e1ed5.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/20/sprouted/index-diff-f22b4df6db0c2b09d42406fce93175d3fb7e1ed5-to-current.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[Sprouted]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/2024/06/20/sprouted/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/2024/06/20/sprouted/index.html</iffy:uid>
            <atom:published>2024-06-20T19:05:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/2024/06/20/sprouted/index.html"><i>Sprouted</i></a> was made on 2024-06-20 @ 05:50 PM EDT.</p>
  <blockquote>→ Add bold update crediting Maggie Appleton for some of these ideas.</blockquote>
  <p>The post was originally published 2024-06-20 @ 03:05 PM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-06-20 @ <a href="https://tech.interfluidity.com/2024/06/20/sprouted/index-updated-2024-06-20-17-50-00.html" class="pubtime">05:50 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Thu, 20 Jun 2024 15:05:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/06/20/sprouted/index.html</guid>
      <description>
        <![CDATA[I've finally "finished" my reaction to Chris Krycho's provocation, Feeds are Not Fit for Gardening. (ht Erlend Sogge Heggen). I think I now have infrastructure sufficient to publish evolving content, that might start as an unfinished sketch and "blossom" over time (and with help and interaction from you, dear reader). The approach I've taken — of course since I am an RSS fanboy — is to graft what I need on top of existing RSS infrastructure. Among RSS infrastructure, I include both conventional...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/20/sprouted/index.html</link>
      <title>Sprouted</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2024-06-20T21:50:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-sprouted">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I've finally "finished" my reaction to Chris Krycho's provocation, <a href="https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/"><em>Feeds are Not Fit for Gardening</em></a>. (ht <a href="https://mastodon.social/@erlend@writing.exchange">Erlend Sogge Heggen</a>).</p>
   <p>I think I now have infrastructure sufficient to publish evolving content, that might start as an unfinished sketch and "blossom" over time (and with help and interaction from you, dear reader).</p>
   <p>The approach I've taken — of course since I am an RSS fanboy — is to graft what I need on top of existing RSS infrastructure. Among RSS infrastructure, I include both conventional feed readers and "announcers": RSS consumers that notify parties about new items in ways that may be more disruptive than just another item in a well-populated feed.</p>
   <p>An example on an announcer is my own <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"><em>feedletter</em></a>, which notifies RSS items by e-mailing posts one at a time or in digests, and also by posting to Mastodon.</p>
   <p>My approach is quite manual. No software determines when an "update" has been made. "Tweaks" — which may include correcting typos, reworking sentences, or even rewriting whole paragraphs without changing the intended meaning — shouldn't be notified as updates. Modifications, however big or small, that substantially augment or alter the content of the item usually should be notified. In my view, which is which is the author's judgment call. So authors manually add an item to their post's <em>update history</em> when they wish to provoke such a notification.</p>
   <p>Once authors begin to define an update history, that history becomes appended to the end of posts. <a href="https://tech.interfluidity.com/xml/iffy/index.html#update-history">Example</a>.</p>
   <p>When authors declare a meaningful update, all they <em>must</em> provide is a timestamp. An <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.15"><code>atom:updated</code></a> element will be included in the RSS item with that timestamp.</p>
   <p>Authors also <em>may</em> provide a description, a "revision-spec" (usually a git commit identifier) for the revision superceded, and an author list (if authorship as well as content is changing with the update). <a href="https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/index.html#example-update-history">Example</a>.</p>
   <p>The more authors provide, the richer the update history. Update histories will include any description given, along with links to the prior ("superceded") revision, and a diff between the updated post and the superceded revision.</p>
   <p>Whenever a new update is declared, a synthetic post will be produced, whose publication date is the moment of the update, announcing the update. <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html">Example</a>.</p>
   <p>That post will have its own RSS <a href="https://www.rssboard.org/rss-specification#ltguidgtSubelementOfLtitemgt"><code>guid</code></a> and permalink. So, without requiring any change to the behavior of existing feed readers, followers will be notified of these updates.</p>
   <p>The RSS items generated for these updates will be marked "<a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-synthetic">synthetic</a>", of "<a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-type">type</a>" <code>UpdateAnnouncement</code>, so that announcers (for the moment only my <i>feedletter</i>, but please join in!) can decide whether they wish to notify these items.</p>
   <p>They include a "<a href="https://tech.interfluidity.com/xml/iffy/index.html#iffy-hint-announce">hint</a>" for announcers to adopt a <code>Piggyback</code> policy, meaning the synthetic update notifications should be included in digests and other multi-post announcements that include at least one not-piggyback post, but they should not trigger announcements on their own. Announcers are free to follow this hint, or to make a different choice.</p>
   <p>For subscribers to notication services that accept the hint, synthetic update posts will not cause people to get spammed with "here's an update!" messages. That would be annoying. On the other hand, e-mail subscribers will not be notified of all updates to existing posts. One-at-a-time subscribers will see none of the update notifications. Digest subscribers will see update notifications only when the digest would also include at least one "organic" post. There is a trade-off to navigate between annoyance and information.</p>
   <p>For posts intended to evolve over time, that might invite the attention of particular followers or collaborators, authors can explicitly declare a post to be a "sprout". <a href="https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/index.html#example-update-history">Example</a>.</p>
   <p>The term is taken from Chris Krycho's <a href="https://tech.interfluidity.com/2024/06/20/sprouted/(https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/)">essay</a>. These posts will be accompanied by their own RSS feeds (<a href="https://tech.interfluidity.com/xml/iffy/index-sprout.rss">example</a>), and will track declared updates only to that particular item. The implementation is not great — ideally each notification would include and highlight the changes — but so far my diffs are too lame for that. However, subscribers will be notified, via a dedicated feed, of each update to evolving items that they mean attentively to follow.</p>
   <p>Obviously, nothing is really "finished". Everything in life is a garden!</p>
   <p>But I think that this is enough that I can start sketching and evolving posts intended to develop over time, rather than finished-product "atomic" posts.</p>
   <p>Thanks to Chris Krycho and Erlend Sogge Heggen for inspiring me to think about all this!</p>
   <hr>
   <p><strong>Update:</strong> Chris Krycho <a href="https://x.com/chriskrycho/status/1803903739419332636">credits</a> <a href="https://x.com/Mappletons">Maggie Appleton</a> for some of these ideas, so I will too!</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/2024/06/20/sprouted/index.html#major-updates">Last major update at 2024-06-20 @ 05:50 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-06-20 @ <a href="https://tech.interfluidity.com/2024/06/20/sprouted/index.html" class="pubtime">03:05 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2024-06-20T21:50:00Z</atom:updated>
          <atom:summary><![CDATA[Add bold update crediting Maggie Appleton for some of these ideas.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/20/sprouted/index-oldcommit-f22b4df6db0c2b09d42406fce93175d3fb7e1ed5.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/20/sprouted/index-diff-f22b4df6db0c2b09d42406fce93175d3fb7e1ed5-to-current.html
          </iffy:diff>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Thu, 20 Jun 2024 13:10:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html
      </guid>
      <description>
        <![CDATA[A significant update of Feedletter tutorial was made on 2024-06-20 @ 01:10 PM EDT. → Add note to Section 16, "Advanced: Customize the content" documenting feedletter API changes that slightly modify this section of the tutorial. The post was originally published 2024-01-29 @ 10:30 AM EST. This is an automatically generated post. by Update-o-Bot on 2024-06-20 @ 01:10 PM...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html</link>
      <title>Updated: Feedletter tutorial</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-06-20T17:10:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Add note to Section 16, "Advanced: Customize the content" documenting <i>feedletter</i> API changes that slightly modify this section of the tutorial.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-oldcommit-acb84c08c1bbcc83036b9cad70f6a3c5d60865c4.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-diff-acb84c08c1bbcc83036b9cad70f6a3c5d60865c4-to-current.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[Feedletter tutorial]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html</iffy:uid>
            <atom:published>2024-01-29T15:30:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"><i>Feedletter tutorial</i></a> was made on 2024-06-20 @ 01:10 PM EDT.</p>
  <blockquote>
   → Add note to Section 16, "Advanced: Customize the content" documenting <i>feedletter</i> API changes that slightly modify this section of the tutorial.
  </blockquote>
  <p>The post was originally published 2024-01-29 @ 10:30 AM EST.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-06-20 @ <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html" class="pubtime">01:10 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Thu, 20 Jun 2024 11:05:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index-updated-2024-06-20-11-05-00.html</guid>
      <description>
        <![CDATA[A significant update of The 'iffy' XML namespace was made on 2024-06-20 @ 11:05 AM EDT. → Document iffy:type, update documentation of iffy:synthetic as optionally including iffy:type. The post was originally published 2024-05-13 @ 04:10 AM EDT. This is an automatically generated post. by Update-o-Bot on 2024-06-20 @ 11:05 AM...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index-updated-2024-06-20-11-05-00.html</link>
      <title>Updated: The 'iffy' XML namespace</title>
      <iffy:synthetic>
        <iffy:type>UpdateAnnouncement</iffy:type>
        <iffy:update>
          <atom:updated>2024-06-20T15:05:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Document <code>iffy:type</code>, update documentation of <code>iffy:synthetic</code> as optionally including <code>iffy:type</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-f19e4870e2c719f71d2f5024cb3e2e8f477622dc.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-f19e4870e2c719f71d2f5024cb3e2e8f477622dc-to-0df7787c056ab2b983e2de4d107c2fa477b7c8f4.html
          </iffy:diff>
          <iffy:initial>
            <atom:title><![CDATA[The 'iffy' XML namespace]]></atom:title>
            <atom:link href="https://tech.interfluidity.com/xml/iffy/index.html"/>
            <iffy:uid>https://tech.interfluidity.com/xml/iffy/index.html</iffy:uid>
            <atom:published>2024-05-13T08:10:00Z</atom:published>
            <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
          </iffy:initial>
        </iffy:update>
      </iffy:synthetic>
      <dc:creator><![CDATA[Update-o-Bot]]></dc:creator>
      <iffy:hint-announce>
        <iffy:policy>Piggyback</iffy:policy>
      </iffy:hint-announce>
      <content:encoded>
        <![CDATA[<article class="presentation-rss synthetic">
 <div class="entry-header"></div>
 <div class="entry-body">
  <p>A significant update of <a href="https://tech.interfluidity.com/xml/iffy/index.html"><i>The 'iffy' XML namespace</i></a> was made on 2024-06-20 @ 11:05 AM EDT.</p>
  <blockquote>
   → Document <code>iffy:type</code>, update documentation of <code>iffy:synthetic</code> as optionally including <code>iffy:type</code>.
  </blockquote>
  <p>The post was originally published 2024-05-13 @ 04:10 AM EDT.</p>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="synthetic-note">
    <em>This is an automatically generated post.</em>
   </div>
   <div>
    by Update-o-Bot on 2024-06-20 @ <a href="https://tech.interfluidity.com/xml/iffy/index-updated-2024-06-20-11-05-00.html" class="pubtime">11:05 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sun, 16 Jun 2024 19:10:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/06/16/html-iconography/index.html</guid>
      <description>
        <![CDATA[My web skillz are very old-school. I only recently learned we're not supposed to use <tt> anymore. (<code> is what the kids use.) We're not supposed to use <a name="whatev"> for our in-document link targets. We should just use <a id="whatev">. (To be fair, it's pretty cool the targets don't have to be <a> tags any more.) Anyway, back in my day, to add little icons that might represent your website, we just added a 16x16 pixel /favicon.ico file in some weird, nonstandard Microsoft image format....]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/16/html-iconography/index.html</link>
      <title>HTML iconography</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2024-06-17T18:35:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>My web skillz are very old-school.</p>
   <p>I only recently learned we're not supposed to use <code>&lt;tt&gt;</code> anymore. (<code>&lt;code&gt;</code> is what the kids use.) We're not supposed to use <code>&lt;a name="whatev"&gt;</code> for our in-document link targets. We should just use <code>&lt;a id="whatev"&gt;</code>.</p>
   <p>(To be fair, it's pretty cool the targets don't have to be <code>&lt;a&gt;</code> tags any more.)</p>
   <p>Anyway, back in my day, to add little icons that might represent your website, we just added a 16x16 pixel <code>/favicon.ico</code> file in some weird, nonstandard Microsoft image format.</p>
   <p>Thank you <em>Internet Explorer</em>, the very first evil internet silo that kids these days have never encountered!</p>
   <p>My ancient <a href="https://www.interfluidity.com/">"interfluidity main" site</a> has one of those old-school <code>/favicon.ico</code> files, and I'm not messing with it. But I thought I'd add fresh icons for this site and <a href="https://drafts.interfluidity.com/"><em>interfluidity drafts</em></a>. One 16x16 icon file isn't enough for the modern world. Your site might need an icon on a phone, a tablet, a watch, whatver. Android and Apple devices treat icons differently. Firefox, I discovered, chooses icons differently than other browsers.</p>
   <p>The best resource I found to help make sense of the brave new world of website icons was <a href="https://mathiasbynens.be/notes/touch-icons">an article by Mathias Bynens</a>.</p>
   <p>That article's last update was in 2013, so maybe it's not current? It's a decade newer than my old habits, so hey.</p>
   <p>I used <a href="https://affinity.serif.com/en-us/photo/"><em>Affinity Photo</em></a> to take the photo I use as an avatar on social media, and label it, for this website as "tech". For prettiness as icons on mobile devices, I also needed to give it rounded corners. I wanted to select a rectangle, round the corners, then invert the selection, and delete to transparent to make rounded corners.</p>
   <p>That'a basically what I did, but there's nowhere to set a corner radius on a straight-up rectangualar selection in <em>Affinity Photo</em>.</p>
   <p>However, there is a rounded rectangle drawing tool, which draws on its own layer, and — very useful to know! — there is a <a href="https://forum.affinity.serif.com/index.php?/topic/45495-affinity-photo-how-to-create-rounded-corners/">Selection From Layer</a> menu item, that converts a shape drawn in a layer to a selection. Once I had my selection, invert and delete was no problem and I got my rounded corners.</p>
   <p style="text-align: center;"><img src="https://tech.interfluidity.com/2024/06/16/html-iconography/interfluidity-wave-tech-180x180.png" style="width: min-content; left-margin: auto; right-margin: auto;"></p>
   <p>I gather one can omit rounding corners oneself, if you only care about Apple devices. Apple defines <code>apple-touch-icon</code> and <code>apple-touch-icon-precomposed</code>, and if you supply the not-precomposed version, devices should round corners and maybe drop shadow to "compose" your icon.</p>
   <p>Most resources I looked at suggested taking control, so you know what you will get and can use the same icons crossplatform, so that's what I did. So, I rounded my own corners yee-haw!</p>
   <p>Then I exported my image as a PNG in all of the sizes recommended by <a href="https://mathiasbynens.be/notes/touch-icons">the Bynens article</a>, stole his recommended HTML snippet, and added it — with some modification, see below! — to the <a href="https://github.com/swaldman/tech.interfluidity.com/blob/main/untemplate/com/interfluidity/tech/layout-main.html.untemplate">main layout</a> of my <a href="https://github.com/swaldman/unstatic"><code>unstatic</code></a>-based static-site generators.</p>
   <pre><code class="language-html">    &lt;!-- icons / favicons --&gt;

    &lt;!-- we just want the squared-corner image with no overlays for traditional favicon uses at tiny sizes --&gt;
    &lt;!-- swaldman added, ick, firefox scales down the biggest size for its tab icon, so we use the graphic we want for small sizes as the largest... --&gt;
    &lt;link rel="icon" type="image/png" sizes="500x500" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-blank-square-500x500.png"&gt; 
    &lt;link rel="icon" type="image/png" sizes="32x32" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-blank-square-32x32.png"&gt;     &lt;!-- swaldman added, for standard favicon size --&gt;
    &lt;link rel="icon" type="image/png" sizes="16x16" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-blank-square-16x16.png"&gt;     &lt;!-- swaldman added, for standard favicon size --&gt;
    &lt;link rel="icon" type="image/png" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-blank-square-57x57.png"&gt;                   &lt;!-- swaldman added, for small icons by default --&gt;

    &lt;!-- at bigger sizes, we overlay a bit of text --&gt;
    &lt;!-- icons as recommened by https://mathiasbynens.be/notes/touch-icons --&gt;
    &lt;!-- For Chrome for Android: --&gt;
    &lt;link rel="icon" sizes="192x192" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-192x192.png"&gt;
    &lt;!-- For iPhone 6 Plus with @3× display: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="180x180" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-180x180.png"&gt;
    &lt;!-- For iPad with @2× display running iOS ≥ 7: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="152x152" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-152x152.png"&gt;
    &lt;!-- For iPad with @2× display running iOS ≤ 6: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="144x144" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-144x144.png"&gt;
    &lt;!-- For iPhone with @2× display running iOS ≥ 7: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="120x120" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-120x120.png"&gt;
    &lt;!-- For iPhone with @2× display running iOS ≤ 6: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="114x114" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-114x114.png"&gt;
    &lt;!-- For the iPad mini and the first- and second-generation iPad (@1× display) on iOS ≥ 7: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="76x76" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-76x76.png"&gt;
    &lt;!-- For the iPad mini and the first- and second-generation iPad (@1× display) on iOS ≤ 6: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" sizes="72x72" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-tech-72x72.png"&gt;
    &lt;!-- For non-Retina iPhone, iPod Touch, and Android 2.1+ devices: --&gt;
    &lt;link rel="apple-touch-icon-precomposed" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-blank-square-57x57.png"&gt;

    &lt;!-- end icons / favicons --&gt;
</code></pre>
   <p>A complication emerged, in that my text-labeled icons looked busy and bad, and the text was illegible, when rendered at very small sizes. So you'll note that, for small sizes, I use <code>interfluidity-wave-blank-square</code> files rather than <code>interfluidity-wave-tech</code>. (I thought the very small icons looked better with square corners as well.)</p>
   <p>But Firefox kept picking up the <em>largest</em> <code>&lt;link rel="icon" ... &gt;</code> and downsampling from that, rather than downloading the nearest or nearest-larger icon.</p>
   <p>So I added the image I want used only for small icons also as a very large icon.</p>
   <pre><code class="language-html">    &lt;link rel="icon" type="image/png" sizes="500x500" href="&lt;( iconLoc.relative )&gt;/interfluidity-wave-blank-square-500x500.png"&gt; 
</code></pre>
   <p>Less quirky browsers hopefully never choose this to render from, because there is always a better-sized icon to choose from. But Firefox does choose this one and downsample to render its very small icons-in-a-tab, so the trick gets rid of the ugly, illegibly scaled text in tiny icons under Firefox.</p>
   <p>(It does seem a bit wasteful to trick Firefox into downloading 500x500 images to render at 16x16 or 32x32, but if it smartens up, it can download icons prerendered in just those tiny sizes!)</p>
   <p>Anyway, that was what I did to add icons to this site and to <a href="https://drafts.interfluidity.com/"><em>drafts</em></a>.</p>
   <p>Please let me know if there are much better ways!</p>
   <hr>
   <p><strong>Update (17-June-2024):</strong></p>
   <p>Carlana Johnson <a href="https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs">points me</a> to a great article by Andrey Sitnik, <a href="https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs"><em>How to Favicon in 2024: Six files that fit most needs</em></a>.</p>
   <p>For now, because I'm lazy, and because my icons are not SVG-friendly, I'm leaving things as they are.</p>
   <p>But perhaps someday I'll make better, vector, logos and icons, rather than just repurpose my social media avatar. Then I will try out this carefully thought-out approach.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/2024/06/16/html-iconography/index.html#major-updates">Last major update at 2024-06-17 @ 02:35 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-06-16 @ <a href="https://tech.interfluidity.com/2024/06/16/html-iconography/index.html" class="pubtime">07:10 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2024-06-17T18:35:00Z</atom:updated>
          <atom:summary><![CDATA[Add bold update, link to Andrey Sitnik article, via Carlana Johnson]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/16/html-iconography/index-oldcommit-85841ab8af7303ef4aca2910529551c68dab4867.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/16/html-iconography/index-diff-85841ab8af7303ef4aca2910529551c68dab4867-to-current.html
          </iffy:diff>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Sat, 8 Jun 2024 19:50:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/06/08/should-blogs-adopt-the-itunescategory-rss-tag/index.html
      </guid>
      <description>
        <![CDATA[Apple organized a whole slew of standard categories or genres for podcasts, when they defined the itunes RSS namespace for podcasts. This helped discoverability of podcasts, as podcast applications and indexers can let users search or browse by genre, or make suggestions based on genres users seem to prefer. Apple seems to have done a pretty good job at this. It's not obvious that "podcast genres" are meaningfully distinct from "blog genres". We could, of course, invent some analogous kind of...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/08/should-blogs-adopt-the-itunescategory-rss-tag/index.html</link>
      <title>Should blogs adopt the itunes:category RSS tag?</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>Apple organized a <a href="https://podcasters.apple.com/support/1691-apple-podcasts-categories">whole slew of standard categories or genres</a> for podcasts, when they defined the <a href="https://help.apple.com/itc/podcasts_connect/#/itcb54353390"><code>itunes</code> RSS namespace</a> for podcasts. This helped discoverability of podcasts, as podcast applications and indexers can let users search or browse by genre, or make suggestions based on genres users seem to prefer.</p>
   <p>Apple seems to have done a pretty good job at this. It's not obvious that "podcast genres" are meaningfully distinct from "blog genres". We could, of course, invent some analogous kind of categorization just for blogs, but why? As Dave Winer <a href="http://scripting.com/2017/05/09/rulesForStandardsmakers.html">hath writ</a>:</p>
   <blockquote>
    <p><strong>Fewer format features is better</strong></p>
    <p>If you want to add a feature to a format, first carefully study the existing format and namespaces to be sure what you're doing hasn't already been done. If it has, use the original version. This is how you maximize interop.</p>
   </blockquote>
   <p>Podcasts got a huge lift from what was originally the blog-centric RSS format. Why haven't blogs adopted podcast-RSS best practices to get a lift right back?</p>
   <p>There's a potential issue that some applications may use the presence of <code>itunes</code> RSS tags to imply an RSS feed is for a podcast. But that's pretty dumb. If applications expecting podcasts import blogs without soundfiles because they use this heuristic, well, bad on them. They should fix that. When blogs do contain some posts with audio <code>&lt;enclosure/&gt;</code> elements, then arguably they are podcasts <em>inter alia</em>. Client applications should use intelligent criteria to decide what they want to consider suitably a "podcast" or "podcast episode".</p>
   <p>It strikes me as a good idea to make use of good ideas from the <code>itunes</code> (and <a href="https://github.com/Podcastindex-org/podcast-namespace"><code>podcast</code></a>) namespace for blogs and other RSS applications.</p>
   <p>Starting, perhaps, with <code>itunes:category</code>.</p>
   <p>Apple <a href="https://help.apple.com/itc/podcasts_connect/#/itcb54353390">defines</a> <code>itunes:category</code> as a channel-level element that permits multiple entries (you don't have to be just one genre), and nested entries for subcategories. Seems pretty good!</p>
   <p>What do you think?</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-06-08 @ <a href="https://tech.interfluidity.com/2024/06/08/should-blogs-adopt-the-itunescategory-rss-tag/index.html" class="pubtime">07:50 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Thu, 6 Jun 2024 15:35:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/06/06/neonix/index.html</guid>
      <description>
        <![CDATA[I've found ripgrep to be an invaluable tool. At some level it's just grep, but its speed and ergonomics make it something else. I find things much more quickly. In combination with projectile, it gives me a fast project-wide find, reducing one of the advantages of commercial IDEs over my humble emacs. Today, Bill Mill points me to a command line tool called fzf which looks like kind of a command-line Swiss army knife. It certainly makes sorting through very long find . output a breeze. Some of...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/06/neonix/index.html</link>
      <title>Neonix</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2025-04-04T01:10:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-readying-a-blog-for-sprouts">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I've found <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> to be an invaluable tool. At some level it's just grep, but its speed and ergonomics make it something else. I find things much more quickly. In combination with <a href="https://docs.projectile.mx/projectile/index.html">projectile</a>, it gives me a fast project-wide find, reducing one of the advantages of commercial IDEs over my humble <a href="https://www.gnu.org/software/emacs/">emacs</a>.</p>
   <p>Today, Bill Mill <a href="https://notes.billmill.org/computer_usage/cli_tips_and_tools/fzf.html">points me</a> to a command line tool called <a href="https://junegunn.github.io/fzf/"><code>fzf</code></a> which looks like kind of a command-line Swiss army knife. It certainly makes sorting through very long <code>find .</code> output a breeze.</p>
   <p>Some of Bill's scripts use a find replacement called <a href="https://github.com/sharkdp/fd"><code>fd</code></a>, which I plan to take a look at.</p>
   <p>I think this is an interesting trend, taking venerable UNIX command-line tools and rethinking, reimplementing them with modern languages and the decades of experience since that first, revolutioary, burst of command-line creativity in the early UNIX days.</p>
   <p>I'll let this post become a <a href="https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/">"sprout"</a> from which I can track these kinds of tools as I encounter them.</p>
   <ul>
    <li>
     <p><a href="https://github.com/sharkdp/fd"><code>fd</code></a>
      <br>
      A modern retake on <code>find</code> I haven't played with yet.</p>
    </li>
    <li>
     <p><a href="https://junegunn.github.io/fzf/"><code>fzf</code></a>
      <br>
      A fuzzy-matching tool for interactively sorting through large command line and command completion outputs. See <a href="https://notes.billmill.org/computer_usage/cli_tips_and_tools/fzf.html">Bill Mill</a>.</p>
    </li>
    <li>
     <p><a href="https://github.com/charmbracelet/gum"><code>gum</code></a>
      <br>
      Elegant TUI effects composable for scripting (ht <a href="https://notes.billmill.org/computer_usage/cli_tips_and_tools/gum.html">Bill Mill</a>, of course)</p>
    </li>
    <li>
     <p><a href="https://github.com/BurntSushi/ripgrep"><code>rg</code></a>
      <br>
      "ripgrep". A new take on grep, super fast, seachers directories recursively, by default excluding <code>.git</code> and whatever is <code>.gitignore</code>-d.</p>
    </li>
   </ul>
   <p>I'll add more as I, um, <code>fd</code> them!</p>
   <hr>
   <p>p.s. apparently there's a <a href="https://www.insomniac.com/music/artists/neonix/">DJ called Neonix</a>! Sorry! I'm using the, er, neologism to refer to neo-UNIX.</p>
   <hr>
   <p><strong>Update 2024-06-06:</strong> Kartik Agaram's <a href="https://merveilles.town/@akkartik/112571589796019251">points</a> me to <s><a href="https://notes.billmill.org/link_blog/2023/10/modern_unix_tools.html">Bill Mill's "modern unix tools" page</a>.</s> (See below.) Which itself contains a link to a <a href="https://github.com/ibraheemdev/modern-unix">"Modern Unix" collection by Ibraheem Ahmed</a>. So much to play with!</p>
   <p><strong>Update 2024-08-16:</strong> The current version of Bill Mill's "modern unix tool list" is now <a href="https://notes.billmill.org/computer_usage/cli_tips_and_tools/modern_unix_tool_list.html">here</a>.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/2024/06/06/neonix/index.html#major-updates">Last major update at 2025-04-03 @ 09:10 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-06-06 @ <a href="https://tech.interfluidity.com/2024/06/06/neonix/index.html" class="pubtime">03:35 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2025-04-04T01:10:00Z</atom:updated>
          <atom:summary><![CDATA[Add update regarding 'gum', ht Bill Mill]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/06/neonix/index-oldcommit-bef1d5cfc2e26b7def96a2eed8d1b09663f01042.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/06/neonix/index-diff-bef1d5cfc2e26b7def96a2eed8d1b09663f01042-to-current.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-08-16T15:20:00Z</atom:updated>
          <atom:summary><![CDATA[Add update regarding new location of Bill Mill's "modern unix tool list"]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/06/neonix/index-oldcommit-758902715b5d838eb65acaac13ac5dcda53f5314.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/06/neonix/index-diff-758902715b5d838eb65acaac13ac5dcda53f5314-to-bef1d5cfc2e26b7def96a2eed8d1b09663f01042.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-06-06T22:30:00Z</atom:updated>
          <atom:summary><![CDATA[Add Kartik Agaram's pointer to Bill Mill's "modern unix tools"]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/06/neonix/index-oldcommit-711778c5fa4d93cd89e9421da6b8d9fb6e71a534.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/06/neonix/index-diff-711778c5fa4d93cd89e9421da6b8d9fb6e71a534-to-758902715b5d838eb65acaac13ac5dcda53f5314.html
          </iffy:diff>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Wed, 5 Jun 2024 23:00:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/index.html
      </guid>
      <description>
        <![CDATA[I've been developing support for my take on Chris Krycho' "sprouts" against this blog. Much of that support is now built into unstatic, my library for building static-site generators. But it does also require some support from within applications of that library, from the scala code and the untemplates of the individual site generators. I'm going to upgrade my "drafts" blog to support revisions, diffs, and sprouts. I'll document what it takes to do that here. Enable revision- and...]]>
      </description>
      <link>
        https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/index.html
      </link>
      <title>Readying a blog for revision histories and sprouts under unstatic</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2024-06-06T17:30:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-readying-a-blog-for-sprouts">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I've been developing support for my take on <a href="https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/">Chris Krycho' "sprouts"</a> against this blog. Much of that support is now built into <a href="https://github.com/swaldman/unstatic"><code>unstatic</code></a>, my library for building static-site generators. But it does also require some support from within applications of that library, from the scala code and the <a href="https://github.com/swaldman/untemplate-doc">untemplates</a> of the individual site generators.</p>
   <p>I'm going to upgrade my <a href="https://drafts.interfluidity.com/archive.html">"drafts"</a> blog to support revisions, diffs, and sprouts. I'll document what it takes to do that here.</p>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#enable-revision--and-diff-generation-in-scala-code" id="enable-revision--and-diff-generation-in-scala-code" name="enable-revision--and-diff-generation-in-scala-code" class="anchorlink"></a>Enable revision- and diff-generation in Scala code</h3>
   <p>In the object <a href="https://github.com/swaldman/drafts.interfluidity.com/blob/main/src/com/interfluidity/drafts/DraftsSite.scala"><code>DraftsSite</code></a>, the <a href="https://github.com/swaldman/unstatic/blob/main/ztapir/src/unstatic/ztapir/ZTSite.scala"><code>unstatic.ztapir.ZTSite</code></a> that defines the site to be generated, inside the <a href="https://github.com/swaldman/unstatic/blob/main/ztapir/src/unstatic/ztapir/simple/SimpleBlog.scala"><code>unstatic.ztapir.simple.SimpleBlog</code></a> that defines the blog, add a <a href="https://github.com/swaldman/unstatic/blob/main/ztapir/src/unstatic/ztapir/simple/RevisionBinder.scala"><code>RevisionBinder</code></a> that can pull old revisions of pages and generate them into the website, and a <a href="https://github.com/swaldman/unstatic/blob/main/ztapir/src/unstatic/ztapir/simple/DiffBinder.scala"><code>DiffBinder</code></a> that can generate diffs between current and new revisions:</p>
   <pre><code class="language-scala"> override val revisionBinder : Option[RevisionBinder] = Some( RevisionBinder.GitByCommit(DraftsSite, JPath.of("."), siteRooted =&gt; Rel("public/").embedRoot(siteRooted)) )
 override val diffBinder     : Option[DiffBinder]     = Some( DiffBinder.JavaDiffUtils(DraftsSite) )
</code></pre>
   <p>By default, <code>SimpleBlog</code> sets these values to null. We override them.</p>
   <p>The <code>RevisionBinder</code> we are using is <code>RevisionBinder.GitByCommit</code>. Its constructor accepts</p>
   <ol>
    <li>our <code>ZTSite</code>;</li>
    <li>a file path (<code>java.nio.file.Path</code>) to the git repository in which revisions are stored, just '.' for us because the git repository is the static-site generator's working directory;</li>
    <li>a function that converts a site-rooted path (<a href="https://github.com/swaldman/unstatic/blob/main/src/unstatic/UrlPath.scala"><code>unstatic.UrlPath.Rooted</code></a>) into the associated path within the repository relative to its root (as <a href="https://github.com/swaldman/unstatic/blob/main/src/unstatic/UrlPath.scala"><code>unstatic.UrlPath.Rel</code></a>);</li>
    <li>A <code>RevisionBinder.RevisionPathFinder</code>, a function which takes a document's site-rooted path and a "revision spec" (which for this revision binder is a full-size hex git commit) and determines the path the revision should take within the site.</li>
   </ol>
   <p>We omit the fourth argument because we use a default, which coverts a path like <code>/a/b/whatever.html</code> to <code>/a/b/whatever-oldcommit-c6e71f4d689f2b208c3eae19e647435322fa6d04.html</code></p>
   <p>For a <code>DiffBinder</code>, we use <code>DiffBinder.JavaDiffUtils</code>, based on the <a href="https://github.com/java-diff-utils/java-diff-utils"><code>java-diff-utils</code></a> library. When we ask it to generate a diff for a path, we give it a reference to the <code>RevisionBinder.RevisionPathFinder</code> so it can know the filenames old versions get generated into. We also give it a <code>DiffBinder.DiffPathFinder</code>, which computes the pathnames of the generated diffs. Again, the <code>DiffBinder.DiffPathFinder</code> is omitted our code. We rely a default argument, which produces diff paths like <code>/a/b/whatever-diff-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0-to-199e44561de3fd9e731a335d8b2a655f42d9bc04.html</code>.</p>
   <p>Now, if we ever <a href="https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/index.html">provide update histories</a> to any posts, copies of any old revisions referenced will be generated into the public directory of the site, as well as diffs between adjacent items in the update history.</p>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#modify-the-site-to-generate-update-histories-at-the-end-of-posts" id="modify-the-site-to-generate-update-histories-at-the-end-of-posts" name="modify-the-site-to-generate-update-histories-at-the-end-of-posts" class="anchorlink"></a>Modify the site to generate update histories at the end of posts</h3>
   <p>It's a matter of taste, but we'll display update histories only on single-post permalink pages, not at the end of each post when concatenated together. And we won't include them as content in RSS. (Update histories <a href="https://tech.interfluidity.com/xml/iffy/index.html"><em>do</em> get included</a> as additional metadata in RSS. That's built in.) <code>SimpleBlog</code> conveniently distinguishes between <code>Single</code>, <code>Multiple</code>, and <code>Rss</code>; we can just check our presentation and behave appropriately.</p>
   <p>So... We'll</p>
   <ol>
    <li>Steal <a href="https://github.com/swaldman/tech.interfluidity.com/blob/main/untemplate/com/interfluidity/tech/blog/layout-update-history.html.untemplate"><code>layout-update-history.html.untemplate</code></a> from the tech blog, and <a href="https://github.com/swaldman/drafts.interfluidity.com/blob/main/untemplate/com/interfluidity/drafts/mainblog/layout-update-history.html.untemplate">bring it in as a layout of drafts</a>. (I had to import <code>com.interfluidity.drafts.DraftsSite.MainBlog</code>, and modify the link in the note to point to the drafts got repository, rather than the tech rep.)</li>
    <li>Modify <a href="https://github.com/swaldman/drafts.interfluidity.com/blob/main/untemplate/com/interfluidity/drafts/mainblog/layout-entry.html.untemplate"><code>layout-entry.html.untemplate</code></a> in drafts to bring in the new layout of update history. That turns out to be really easy, because we already have logic at the end of our entry layout to restrict addition of previous and next links to single page presentations. So all we have to do is add our update history layout just after the <code>div</code> for those links, but within the conditionally added region. It's literally just
     <pre><code class="language-plaintext">&lt;( layout_update_history_html( input ) )&gt;
</code></pre>
     <p>inserted just after that <code>div</code>, still within the conditional region.</p></li>
   </ol>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#modify-the-main-layout-and-css-so-that-old-revisions-are-visually-distinct-from-and-link-back-to-current-revisions" id="modify-the-main-layout-and-css-so-that-old-revisions-are-visually-distinct-from-and-link-back-to-current-revisions" name="modify-the-main-layout-and-css-so-that-old-revisions-are-visually-distinct-from-and-link-back-to-current-revisions" class="anchorlink"></a>Modify the main layout and CSS so that old revisions are visually distinct from, and link back to, current revisions</h3>
   <p>At the top of the <code>body</code> element of <a href="https://github.com/swaldman/drafts.interfluidity.com/blob/main/untemplate/com/interfluidity/drafts/layout-main.html.untemplate"><code>layout-main.html.untemplate</code></a>, we add an empty <code>div</code> element called <code>top-banner</code>.</p>
   <pre><code class="language-html">  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="top-banner"&gt;&lt;/div&gt;
</code></pre>
   <p>In current revisions, this will remain invisible and empty. But we'll add a bit of javascript to detect if we're in an old revision, and add some HTML with a link back to the current revision. If we are in an old revision, we'll also add a class called <code>old-draft</code> to the body element, so that we can do whatever we feel like in CSS to make the old revision visually distinct.</p>
   <p>We use a javascript regular expression and our current location to decide if we are in an old revision.</p>
   <pre><code class="language-javascript">    &lt;script&gt;
      document.addEventListener("DOMContentLoaded", function() {
          const regex = /(^.*)\-oldcommit\-[0-9A-Fa-f]+\.html/;
          const match = window.location.pathname.match(regex);
          if (match) {
              const b  = document.querySelector("body");
              const tb = document.getElementById("top-banner");
              b.classList.add("old-draft");
              tb.innerHTML = "You are looking at an old, superceded version of this page. For the current version, please &lt;a href=\"" + match[1] + ".html\"&gt;click here&lt;/a&gt;.";
          }
       });
    &lt;/script&gt;
</code></pre>
   <p>We adjust <a href="https://github.com/swaldman/drafts.interfluidity.com/blob/main/static/css/style.css">our main CSS</a> to keep the top-banner <code>div</code> at the top of our document, when it's relevant:</p>
   <pre><code class="language-css">body.old-draft #top-banner {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    color: black;
    background-color: yellow;
    text-align: center;
    font-family: 'RobotoCondensed', 'Arial', 'Helvetica', sans-serif;
    font-variation-settings: "wght" 500;
    padding-top: 4px;
    padding-bottom: 4px;
    border-bottom: 2px solid black;
}
</code></pre>
   <p>Also add CSS so that, when viewing old revisions, the documents look, well, old.</p>
   <pre><code class="language-css">body.old-draft {
    padding-top: 1em;
    background-color: #F3F5DA;
    color: #6E7FD9;
    font-family: 'GabrieleD', 'Courier';
}
</code></pre>
   <p>(These choices were inspired by the TT2020 image <a href="https://www.creativebloq.com/typography/free-typewriter-fonts-1131774">here</a>, although ultimately I went for Gabriele, because the TT2020 file sizes were very large.)</p>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#add-a-prologue-to-posts-with-revisions-or-that-generate-sprout-rss" id="add-a-prologue-to-posts-with-revisions-or-that-generate-sprout-rss" name="add-a-prologue-to-posts-with-revisions-or-that-generate-sprout-rss" class="anchorlink"></a>Add a prologue to posts with revisions or that generate sprout RSS</h3>
   <p>When a post is a revision or a sprout, we want a prologue that indicated that it is, with links to the prior revision, the update history, and the sprout RSS.</p>
   <p>I'm too lazy to describe what it took to add that in detail, but here's <a href="https://github.com/swaldman/drafts.interfluidity.com/commit/d88d72d099cbe0c542ce2cce039243fb0975e52e">a nice, concise commit</a>. Check out the diff.</p>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#miscellaneous-tweaks" id="miscellaneous-tweaks" name="miscellaneous-tweaks" class="anchorlink"></a>Miscellaneous tweaks</h3>
   <p>I don't want to have to import <code>UpdateRecord</code> whenever I want to add update histories to entries, so I added them as an extra import to my <a href="https://github.com/swaldman/untemplate-doc?tab=readme-ov-file#customizers">untemplate customizer</a> in my mill build file, <a href="https://github.com/swaldman/drafts.interfluidity.com/blob/main/build.sc"><code>build.sc</code></a>:</p>
   <pre><code class="language-scala">  override def untemplateSelectCustomizer: untemplate.Customizer.Selector = { key =&gt;
    var out = untemplate.Customizer.empty

    if (key.inferredPackage.indexOf("mainblog")&gt;=0 &amp;&amp; key.inferredFunctionName.startsWith("entry_")) {
      out = out.copy(extraImports=Seq("unstatic.*","com.interfluidity.drafts.DraftsSite.MainBlog","unstatic.ztapir.simple.UpdateRecord"))
    }
</code></pre>
   <p>The "update history note" should be small, so I add to css:</p>
   <pre><code class="language-css">.update-history-note {
    font-size: smaller;
    line-height: 100%;
}
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#republish-the-site" id="republish-the-site" name="republish-the-site" class="anchorlink"></a>Republish the site</h3>
   <p>Even though nothing visible should change, let's go ahead and republish the site, so that our javascript and css scaffolding for old-looking updates become available.</p>
   <h3><a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/#test-and-tweak" id="test-and-tweak" name="test-and-tweak" class="anchorlink"></a>Test and tweak</h3>
   <p>Even though I don't have any actual new revisions to create, I added a fake revision history to the most recent post, played around in CSS with the look of the old revision until I liked it, then commented away the fake update history.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/index.html#major-updates">Last major update at 2024-06-06 @ 01:30 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-06-05 @ <a href="https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/index.html" class="pubtime">11:00 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2024-06-06T17:30:00Z</atom:updated>
          <atom:summary><![CDATA[Correct bad publication date and time.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/index-oldcommit-f9b8a24e6219588d1f7f570dd9d448d02a5c6529.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/06/02/readying-a-blog-for-revision-histories-and-sprouts-under-unstatic/index-diff-f9b8a24e6219588d1f7f570dd9d448d02a5c6529-to-current.html
          </iffy:diff>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Sun, 2 Jun 2024 03:15:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/index.html</guid>
      <description>
        <![CDATA[Erlend Sogge Heggen pointed me to a post by Chris Krycho on "sprouts". Krycho points out that most of our online infrastructure is organized around feeds of posts, which are "published" or "announced" as finished work. But creative work naturally develops in drafts and increments. It might be best to publish at first only the barest outline of a thing, and then collaborate in the open to flesh it out and bring it forward. What we want to announce, then, are not new posts, but a beginning and...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/index.html</link>
      <title>Green shoots of sprouts</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-green-shoots-of-sprouts">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><a href="https://mastodon.social/@erlend@writing.exchange">Erlend Sogge Heggen</a> pointed me to a <a href="https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/">post by Chris Krycho on "sprouts"</a>.</p>
   <p>Krycho points out that most of our online infrastructure is organized around feeds of posts, which are "published" or "announced" as finished work. But creative work naturally develops in drafts and increments. It might be best to publish at first only the barest outline of a thing, and then collaborate in the open to flesh it out and bring it forward. What we want to announce, then, are not new posts, but a beginning and then new milestones. If we can, we'd want to retain the full history of the process.</p>
   <p>I've gone a fair distance towards implementing one version of this vision recently. My blogging infrastructure is my own static-site generation library <a href="https://github.com/swaldman/unstatic/">unstatic</a>, which is built on top of "<a href="https://github.com/swaldman/untemplate-doc#readme">untemplates</a>". Untemplates are just thin wrappers around Scala functions.</p>
   <p>Like lots of static-site generators, I write in files that are mostly markdown, with some metadata in a special header. But in the untemplate header, I literally write Scala code.</p>
   <p>Here's a very simple example, from a recent post, "<a href="https://tech.interfluidity.com/2024/03/18/c3p0-and-loom/index.html">c3p0 and loom</a>":</p>
   <pre><code class="language-plaintext">&gt; val UntemplateAttributes = immutable.Map[String,Any] (
&gt;   "Title"     -&gt; "c3p0 and loom",
&gt;   "PubDate"   -&gt; "2024-03-18T22:20:00-04:00",
&gt;   "Anchor"    -&gt; "c3p0-and-loom"
&gt; )

given PageBase = PageBase.fromPage(input.renderLocation)

(input : MainBlog.EntryInput)[]~()&gt;      ### modify Title/Author/Pubdate above, add markdown or html below!

I write [a lot of open source software](https://github.com/swaldman), but I've only ever really had one "hit".
That makes me pretty sad, actually. I think some of what I've written is pretty great, and it's lonesome to be the
sole user...
</code></pre>
   <p>For most posts, I just copy and modify this header, and then write markdown text below. But if I want to do anything more fancy, well, I have the full Scala programming language to work with.</p>
   <p>In order to realize a vision of "sprouts", I first implemented update histories as a simple <code>List</code> of <code>UpdateRecord</code> objects.</p>
   <p>The <a href="https://tech.interfluidity.com/xml/iffy/index.html">post prior to this one</a> has already become a particularly sprouty sprout. The post documents experiments with extensions to RSS. I try stuff out, then, as often as not, I untry it. So there's lots of revising. Here's the beginning of that post, for now: <a id="example-update-history" href="https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/"></a></p>
   <pre><code class="language-plaintext">&gt; val updateHistory =
&gt;    UpdateRecord("2024-06-02T00:25:00-04:00",Some("Drop &lt;code&gt;iffy:timestamp&lt;/code&gt;. We can just reuse &lt;code&gt;atom:updated&lt;/code&gt; for the same work."),Some("199e44561de3fd9e731a335d8b2a655f42d9bc04")) ::
&gt;    UpdateRecord("2024-06-01T21:35:00-04:00",Some("Add initial take on tags related to updates and revisions."),Some("72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0")) ::
&gt;    UpdateRecord("2024-05-25T23:00:00-04:00",Some("Add JS/CSS so that prior revisions are visually distinct from current."),Some("13de0232319ceab2f830591c318089d18cbec78d")) ::
&gt;    UpdateRecord("2024-05-24T00:25:00-04:00",Some("Drop tags &lt;code&gt;iffy:when-updated&lt;/code&gt; and &lt;code&gt;iffy:original-guid&lt;/code&gt;, bad appraoch to updates."),Some("394986cb8d9c57f567d324e691a44d50102101ce")) ::
&gt;    Nil
&gt;
&gt; val UntemplateAttributes = immutable.Map[String,Any] (
&gt;   "Title"         -&gt; "The 'iffy' XML namespace",
&gt;   "PubDate"       -&gt; "2024-05-13T04:10:00-04:00",
&gt;   "Permalink"     -&gt; "/xml/iffy/index.html",
&gt;   "UpdateHistory" -&gt; updateHistory,
&gt;   "Sprout"        -&gt; true,
&gt;   "Anchor"        -&gt; "iffy-xml-namespace"
&gt; )

given PageBase = PageBase.fromPage(input.renderLocation)

(input : MainBlog.EntryInput)[]~()&gt;      ### modify Title/Author/Pubdate above, add markdown or html below!

I want to do a lot of things with RSS that require
extensions of RSS (as the RSS spec [foresees](https://www.rssboard.org/rss-specification#extendingRss))...
</code></pre>
   <p>Each <code>UpdateRecord</code> marks a discretionary choice, to declare a "significant" or "material" update. Most updates are not! There are typically several minor revisions, typo fixes, and tweaks, between these noted updates.</p>
   <p>When I decide a revision is serious, I provide a timestamp, and, optionally, a description and a "revision spec". The description is self-explanatory. The revision spec is arbitrary. When I define a site, I optionally provide an <a href="https://github.com/swaldman/unstatic/blob/main/ztapir/src/unstatic/ztapir/simple/RevisionBinder.scala"><code>RevisionBinder</code></a> that is able to convert a revision spec and a path into the contents of a resource within the referenced revision.</p>
   <p>There might be many different implementations of <code>RevisionBinder</code>, each with its own kind of revision specification. The one that exists for now just pulls resources from git commits.</p>
   <p>The revision specs shown are just git commits, referenced in full-length hex. With each "major" update, I provide the hex for the commit <em>prior</em> to my update, the one it is superceding. That usually <em>will not</em> be the same commit as the "major" update prior, because most "major" updates are followed by a series of minor tweaks.</p>
   <p>So, as I work on an evolving document, I note significant updates by adding records to a list, and I include the list I build in <code>UntemplateAttributes</code>, the standard <code>Map</code> in which I also define <code>Title</code>, <code>PubDate</code>, <code>Author</code>, etc. (The example posts omit <code>Author</code>, because this site has a default author — me! — if that field is left unset.)</p>
   <p>The update history converts pretty directly into a user readable history. Let's <a href="https://tech.interfluidity.com/xml/iffy/index.html#update-history">take a look</a>!</p>
   <p>(If you want to see the template that lays out the update history, you can find it <a href="https://github.com/swaldman/tech.interfluidity.com/blob/main/untemplate/com/interfluidity/tech/blog/layout-update-history.html.untemplate">here</a>.)</p>
   <p>To realize the "sprout" vision, we need more than this. We need some means by which people can follow the evolutions of the document. Ideally, when a "major update" is published, subscribers to the blog should see something about that in their feeds. The RSS feeds we generate include <code>&lt;atom:updated&gt;</code> tags, but as Krycho points out, very few feed readers do anything with that.</p>
   <p>You'll note that in addition to the <code>UpdateHistory</code>, we've added to <code>UntemplateAttributes</code> a key called <code>Sprout</code>. When the site generator encounters a mapping of <code>Sprout</code> to <code>true</code> on an untemplate, it generates an additional RSS feed that will track the update history of just this post. For our example post, you can find that feed <a href="https://tech.interfluidity.com/xml/iffy/index-sprout.rss">here</a></p>
   <p>The <a href="https://github.com/swaldman/tech.interfluidity.com/blob/main/untemplate/com/interfluidity/tech/blog/layout-entry.html.untemplate">template that lays out blog entries</a> looks for an update history, and if it is there, checks for prior revisions references, diffs, and the <code>sprouts</code> flag. It prepends to the post a brief note with links, to the prior revision if it's available, to the update history, and to the post-specific RSS feed. Go ahead, check out the beginning of our <a href="https://tech.interfluidity.com/xml/iffy/index.html">example post</a>.</p>
   <p>Going forward, I think I will add the capability of generating "synthetic" posts when there are new major updates. They'd just be formulaic announcements of the updates. They might never appear on the blog front page. But they would be included in the RSS feed. I'd add metadata to the RSS items for these posts, indicating that they are synthetic and describing them, so that tools like <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"><code>feedletter</code></a> can make intelligent choices about whether and how subscribers should receive notificatios about these posts.</p>
   <p>But that is all still to come!</p>
   <p>For now, we have update histories with links to prior revisions and diffs, and dedicated RSS feeds by which dedicated collaborators can stay abreast of our burgeoning sprouts.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-06-02 @ <a href="https://tech.interfluidity.com/2024/06/02/green-shoots-of-sprouts/index.html" class="pubtime">03:15 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 13 May 2024 04:10:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/xml/iffy/index.html</guid>
      <description>
        <![CDATA[I want to do a lot of things with RSS that require extensions of RSS (as the RSS spec foresees). The URL http://tech.interfluidity.com/xml/iffy/ will mark an XML namespace in which some of these extensions will be defined. The conventional prefix associated with this namespace will be iffy. The current version of this namespace is v0.0.1-SNAPSHOT. (-SNAPSHOT signifies that the version preceding that suffix has not yet been finalized. Much more to come!) Table of Contents iffy:all...]]>
      </description>
      <link>https://tech.interfluidity.com/xml/iffy/index.html</link>
      <title>The 'iffy' XML namespace</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2025-08-30T22:50:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-iffy-xml-namespace">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I want to do a lot of things with RSS that require extensions of RSS (as the RSS spec <a href="https://www.rssboard.org/rss-specification#extendingRss">foresees</a>).</p>
   <p>The URL <code>http://tech.interfluidity.com/xml/iffy/</code> will mark an XML namespace in which some of these extensions will be defined.</p>
   <p>The conventional prefix associated with this namespace will be <code>iffy</code>.</p>
   <p><strong>The current version of this namespace is <code>v0.0.1-SNAPSHOT</code>.</strong></p>
   <p>(<code>-SNAPSHOT</code> signifies that the version preceding that suffix has not yet been finalized. Much more to come!)</p>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#table-of-contents" id="table-of-contents" name="table-of-contents" class="anchorlink"></a>Table of Contents</h2>
   <ul>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-all"><code>iffy:all</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-completeness"><code>iffy:completeness</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-curation"><code>iffy:curation</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-diff"><code>iffy:diff</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-hint-announce"><code>iffy:hint-announce</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-in-reply-to"><code>iffy:in-reply-to</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-item-ref"><code>iffy:item-ref</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-policy"><code>iffy:policy</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-provenance"><code>iffy:provenance</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-recent"><code>iffy:recent</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-restriction"><code>iffy:restriction</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-revision"><code>iffy:revision</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-selection"><code>iffy:selection</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-single"><code>iffy:single</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-uid"><code>iffy:uid</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-update"><code>iffy:update</code></a></li>
    <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code></a></li>
   </ul>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyall-" id="element--iffyall-" name="element--iffyall-" class="anchorlink"></a>Element — <code>iffy:all</code> <a id="iffy-all" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-beneath-iffycuration" id="when-beneath-iffycuration" name="when-beneath-iffycuration" class="anchorlink"></a>When beneath <a href="https://tech.interfluidity.com/xml/iffy/#iffy-curation"><code>iffy:curation</code></a></h3>
    <p><code>iffy:all</code> is a <em>curation type</em>, a description of how the feed is curated relative to the body of work a subset of which it presents.</p>
    <p>Curation type <code>iffy:all</code> signifies that the full, unabridged collection of work is represented by <code>item</code> elements in this feed.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example" id="example" name="example" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:curation&gt;
      &lt;iffy:all/&gt;
    &lt;/iffy:curation&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffycompleteness-" id="element--iffycompleteness-" name="element--iffycompleteness-" class="anchorlink"></a>Element — <code>iffy:completeness</code> <a id="iffy-completeness" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#solely-a-channel-level-element" id="solely-a-channel-level-element" name="solely-a-channel-level-element" class="anchorlink"></a>Solely a channel level element</h3>
    <p>Contains one of the following four values:</p>
    <ol>
     <li><code>Ping</code></li>
     <li><code>Metadata</code></li>
     <li><code>Content</code></li>
     <li><code>Media</code></li>
    </ol>
    <p><code>iffy:completeness</code> describes the completeness that clients should expect of RSS <a href="https://www.rssboard.org/rss-specification#hrelementsOfLtitemgt"><code>item</code></a> elements.</p>
    <ul>
     <li>
      <p><code>Ping</code> makes the least commitment. Items need not include a <a href="https://www.rssboard.org/rss-specification#ltguidgtSubelementOfLtitemgt"><code>guid</code></a> element, or any elements at all beyond <a href="https://www.rssboard.org/rss-specification#hrelementsOfLtitemgt">RSS' requirement</a> that at least one of <code>title</code> or <code>description</code> be present. RSS documents have completion <code>Ping</code> by default. Any or all items may meet the requirement for a higher completeness level, but no promises or commitment is made beyond the base specification.</p>
     </li>
     <li>
      <p><code>Metadata</code> commits that each item MUST include a <a href="https://www.rssboard.org/rss-specification#ltguidgtSubelementOfLtitemgt"><code>guid</code></a> element, as well as meeting the base requirements for an RSS <a href="https://www.rssboard.org/rss-specification#hrelementsOfLtitemgt"><code>item</code></a>.</p>
     </li>
     <li>
      <p><code>Content</code> commits that each item, either inside its <code>description</code> tag, or via an extension such as <code>content:encoded</code>, includes the full content of the items it includes, suitable for independent rendering by any client capable also of resolving references to linked media externally. No limitation is placed on whether the full content is placed in a <code>description</code> element, in <code>content:encoded</code>, or in some other extension.</p>
     </li>
     <li>
      <p><code>Media</code> augments <code>Content</code> by <em>embedding attachments to subsidiary media</em> inside the RSS document. Subsidiary media does not include all potential links, just links which share a prefix with the current RSS document, which by default means all links subsidiary to the parent of the RSS document as specified in an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a></p>
      <p><em>More information on this soon when <code>iffy:attachment</code> is defined</em></p>
     </li>
    </ul>
    <p>The four values represent nested, hierarchical levels of commitment. <code>Ping</code> commits to nothing more than the spec requires. <code>Media</code> makes every commitment promised by the prior three levels, and an additional one.</p>
    <p>If not specified, no commitment is made, the feed should be considered <code>Ping</code>.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-1" id="example-1" name="example-1" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:completeness&gt;Content&lt;/iffy:completeness&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;

</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffycuration-" id="element--iffycuration-" name="element--iffycuration-" class="anchorlink"></a>Element — <code>iffy:curation</code> <a id="iffy-curation" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#solely-a-channel-level-element-1" id="solely-a-channel-level-element-1" name="solely-a-channel-level-element-1" class="anchorlink"></a>Solely a <code>channel</code> level element</h3>
    <p><code>iffy:curation</code> provides a description of how the feed is curated relative to the body of work a subset of which it presents. It MUST include as a sub-element a <em>curation type</em>. The following curation types are defined:</p>
    <ul>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-all"><code>iffy:all</code></a></li>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-selection"><code>iffy:selection</code></a></li>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-single"><code>iffy:single</code></a></li>
    </ul>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-2" id="example-2" name="example-2" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:curation&gt;
      &lt;iffy:selection&gt;
        &lt;iffy:recent since="2024-08-16T22:22:14.297722-04:00" last="10" operator="and"/&gt;
      &lt;/iffy:selection&gt;
    &lt;/iffy:curation&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffydiff-" id="element--iffydiff-" name="element--iffydiff-" class="anchorlink"></a>Element — <code>iffy:diff</code> <a id="iffy-diff" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-iffyupdate" id="when-a-subelement-of-iffyupdate" name="when-a-subelement-of-iffyupdate" class="anchorlink"></a>When a subelement of <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update"><code>iffy:update</code></a></h3>
    <p>MUST contain a URL, URI, or <a href="https://datatracker.ietf.org/doc/html/rfc3987">IRI</a> of a human-reviewable a <a href="https://en.wikipedia.org/wiki/Diff"><em>diff</em></a> of the current updated and <em>the final minor revision</em> of the update prior (or of the initially published post, if the current update is the first declared update).</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-3" id="example-3" name="example-3" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;iffy:diff&gt;https://tech.interfluidity.com/xml/iffy/index-diff-394986cb8d9c57f567d324e691a44d50102101ce-to-13de0232319ceab2f830591c318089d18cbec78d.html&lt;/iffy:diff&gt;
</code></pre>
    <p>See also <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code> example</a>.</p>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyhint-announce-" id="element--iffyhint-announce-" name="element--iffyhint-announce-" class="anchorlink"></a>Element — <code>iffy:hint-announce</code> <a id="iffy-hint-announce" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item" id="when-a-subelement-of-item" name="when-a-subelement-of-item" class="anchorlink"></a>When a subelement of <code>item</code></h3>
    <p>Represents a <em>hint</em> to RSS consumers that "push" — announce, rebroadcast, or notify — items whether this item should be so pushed. Consumers are free to ignore this hint or make use of it as they wish.</p>
    <p>MUST contain an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-policy"><code>iffy:policy</code></a> element, whose values MUST BE one of</p>
    <ul>
     <li><code>Always</code> — the item should always be notified</li>
     <li><code>Never</code> — the item should never be notified</li>
     <li><code>Piggyback</code> — the item should be notified as part of digests or other announcements of multiple items, but should not constitute its own announcement.</li>
    </ul>
    <p>MAY contain an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-restriction"><code>iffy:restriction</code></a> element, which represents an application-specific restriction over the consumers to which it is addressed. No restrictions are placed on the content of the <code>iffy:restriction</code> element. Applications can define restrictions as they see fit.</p>
    <p>An <code>iffy:hint-announce</code> element with NO <code>iffy:restriction</code> or an empty <code>iffy:restriction</code> tag should be interpreted as the intended default for ALL applications not addressed by an <code>iffy:hint-announce</code> with a more specific restriction.</p>
    <p>Multiple <code>iffy:hint-announce</code> elements may be placed within a single <code>item</code>, provided that only one has an omitted or empty <code>iffy:restriction</code>, and all <code>iffy:hint-announce</code> elements containing an <code>iffy:restriction</code> contain a unique restriction. Each <code>iffy:restriction</code> SHOULD apply to nonoverlapping application-specific contexts. If that is not the case, how applications prioritize or respond to conflicting <code>iffy-hint-announce</code> elements whose restrictions both apply must be determined by the application.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-4" id="example-4" name="example-4" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;iffy:hint-announce&gt;
  &lt;iffy:policy&gt;Piggyback&lt;/iffy:policy&gt;
&lt;/iffy:hint-announce&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyin-reply-to-" id="element--iffyin-reply-to-" name="element--iffyin-reply-to-" class="anchorlink"></a>Element — <code>iffy:in-reply-to</code> <a id="iffy-in-reply-to" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item-1" id="when-a-subelement-of-item-1" name="when-a-subelement-of-item-1" class="anchorlink"></a>When a subelement of <code>item</code></h3>
    <p>Marks an item as a reply to some other <code>item</code>, which may be published anywhere. Contains one <a href="https://tech.interfluidity.com/xml/iffy/#iffy-item-ref"><code>iffy:item-ref</code></a>.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-5" id="example-5" name="example-5" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;iffy:in-reply-to&gt;
  &lt;iffy:item-ref href="https://tech.interfluidity.com/feed/index.rss" type="application/rss+xml" guid="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" /&gt;
&lt;/iffy:in-reply-to&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyinitial-" id="element--iffyinitial-" name="element--iffyinitial-" class="anchorlink"></a>Element — <code>iffy:initial</code> <a id="iffy-initial" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>In general, describes the initial state of the item referred to by the element that contains it.</p>
    <p>MAY contain any or all of</p>
    <ul>
     <li>an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.14"><code>atom:title</code></a> element, containing the initial title of the item, which may have since been revised.</li>
     <li>an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.14"><code>atom:link</code></a> element, containing the initial link to the item, which may have since been revised.</li>
     <li>an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-uid"><code>iffy:uid</code></a> element, containing the <a href="https://www.rssboard.org/rss-specification#ltguidgtSubelementOfLtitemgt"><code>guid</code></a> of the item that has been updated.</li>
     <li>an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.9"><code>atom:published</code></a> element containing the date-time of initial publication</li>
     <li>a sequence of <a href="https://www.rssboard.org/rss-profile#namespace-elements-dublin-creator"><code>dc:creator</code></a> elements, describing the initial authorship of an item, which may since have been revised.</li>
    </ul>
    <p><em><strong>Note:</strong> We define an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-uid"><code>iffy:uid</code></a> element, rather than rely upon <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.6"><code>atom:id</code></a>, because <code>atom:id</code> requires that its contents be an IRI, but we mean to impose no such restriction.</em></p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item--iffyupdate-history" id="when-a-subelement-of-item--iffyupdate-history" name="when-a-subelement-of-item--iffyupdate-history" class="anchorlink"></a>When a subelement of <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code></a></h3>
    <p>An <code>iffy:initial</code> MAY BE included under <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code></a>, but is recommended ONLY IF the title, authorship, or link have changed.</p>
    <p>Since <code>item</code> &gt; <code>guid</code> and <code>item</code> &gt; <code>pubDate</code> never change, generators SHOULD NOT include these items under <code>item</code> &gt; <code>iffy:update-history</code>. They are available directly in the containing item.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-6" id="example-6" name="example-6" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;iffy:initial&gt;
  &lt;!-- Perhaps more recent updates, and the current item, include more authors --&gt;
  &lt;dc:creator&gt;First Author, Esq.&lt;/dc:creator&gt;
&lt;/iffy:initial&gt;
</code></pre>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item--iffysynthetic--iffyupdate-and-iffytype-of-the-synthetic-element-is-updateannouncement" id="when-a-subelement-of-item--iffysynthetic--iffyupdate-and-iffytype-of-the-synthetic-element-is-updateannouncement" name="when-a-subelement-of-item--iffysynthetic--iffyupdate-and-iffytype-of-the-synthetic-element-is-updateannouncement" class="anchorlink"></a>When a subelement of <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update"><code>iffy:update</code></a> AND <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a> of the synthetic element is <code>UpdateAnnouncement</code></h3>
    <p>An <code>iffy:initial</code> MUST BE provided containing all of the analogous values defined in the <code>item</code> <em>whose update the announcement describes</em>.</p>
    <p>This information <em>would not be otherwise available</em>, because values in the parent <code>item</code> describe the <em>synthetic update announcement post</em>, rather than the post whose update is announced.</p>
    <ul>
     <li>If an <code>item</code> &gt; <code>title</code> is defined in the post that was updated, that MUST BE recorded as <code>atom:title</code></li>
     <li>If an <code>item</code> &gt; <code>link</code> is defined in the post that was updated, that MUST BE recorded as <code>atom:link</code></li>
     <li>If an <code>item</code> &gt; <code>guid</code> is defined in the post that was updated, that MUST BE recorded as <code>iffy:uid</code></li>
     <li>If an <code>item</code> &gt; <code>pubDate</code> is defined in the post that was updated, that MUST BE recorded as <code>atom:published</code></li>
     <li>If an <code>item</code> &gt; <code>dc:creator</code> is defined in the post that was updated, that MUST BE recorded as <code>dc:creator</code> If, in the post that was updated, authorship was defined using <code>item</code> &gt; <code>author</code> or <code>item</code> &gt; <code>atom:author</code> those items should be converted into a form appropriate for <code>dc:creator</code> elements.</li>
    </ul>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-7" id="example-7" name="example-7" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;item&gt;
  &lt;pubDate&gt;Thu, 20 Jun 2024 13:10:00 -0400&lt;/pubDate&gt;
  &lt;guid isPermalink="true"&gt;
    https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html
  &lt;/guid&gt;
  &lt;link&gt;https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html&lt;/link&gt;
  &lt;title&gt;Updated: Feedletter tutorial&lt;/title&gt;
  &lt;!-- other item elements --&gt;
  &lt;iffy:synthetic&gt;
    &lt;iffy:type&gt;UpdateAnnouncement&lt;/iffy:type&gt;
    &lt;iffy:update&gt;
      &lt;atom:updated&gt;2024-06-20T17:10:00Z&lt;/atom:updated&gt;
      &lt;!-- other iffy:updated elements --&gt;
      &lt;iffy:initial&gt;
        &lt;atom:title&gt;&lt;![CDATA[Feedletter tutorial]]&gt;&lt;/atom:title&gt;
        &lt;atom:link href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"/&gt;
        &lt;iffy:uid&gt;https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html&lt;/iffy:uid&gt;
        &lt;atom:published&gt;2024-01-29T15:30:00Z&lt;/atom:published&gt;
        &lt;dc:creator&gt;&lt;![CDATA[Steve Randy Waldman]]&gt;&lt;/dc:creator&gt;
      &lt;/iffy:initial&gt;
    &lt;/iffy:update&gt;
  &lt;/iffy:synthetic&gt;
  &lt;dc:creator&gt;&lt;![CDATA[Update-o-Bot]]&gt;&lt;/dc:creator&gt;
&lt;/item&gt;
</code></pre>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item--iffysynthetic--iffyupdate-history-and-iffytype-of-the-synthetic-element-is-updatecumulation-" id="when-a-subelement-of-item--iffysynthetic--iffyupdate-history-and-iffytype-of-the-synthetic-element-is-updatecumulation-" name="when-a-subelement-of-item--iffysynthetic--iffyupdate-history-and-iffytype-of-the-synthetic-element-is-updatecumulation-" class="anchorlink"></a>When a subelement of <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code></a> AND <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a> of the synthetic element is <code>UpdateCumulation</code> <a id="iffy-initial-update-cumulation" href="https://tech.interfluidity.com/xml/iffy/"></a></h3>
    <p>An <code>iffy:initial</code> MUST BE provided containing all of the analogous values defined in the <code>item</code> <em>whose update the announcement describes</em>.</p>
    <p>This information <em>would not be otherwise available</em>, because values in the parent <code>item</code> describe the <em>synthetic update cumulation (summary) post</em>, rather than the post whose update history is documented.</p>
    <ul>
     <li>If an <code>item</code> &gt; <code>title</code> is defined in the post that was updated, that MUST BE recorded as <code>atom:title</code></li>
     <li>If an <code>item</code> &gt; <code>link</code> is defined in the post that was updated, that MUST BE recorded as <code>atom:link</code></li>
     <li>If an <code>item</code> &gt; <code>guid</code> is defined in the post that was updated, that MUST BE recorded as <code>iffy:uid</code></li>
     <li>If an <code>item</code> &gt; <code>pubDate</code> is defined in the post that was updated, that MUST BE recorded as <code>atom:published</code></li>
     <li>If an <code>item</code> &gt; <code>dc:creator</code> is defined in the post that was updated, that MUST BE recorded as <code>dc:creator</code> If, in the post that was updated, authorship was defined using <code>item</code> &gt; <code>author</code> or <code>item</code> &gt; <code>atom:author</code> those items should be converted into a form appropriate for <code>dc:creator</code> elements.</li>
    </ul>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyitem-ref-" id="element--iffyitem-ref-" name="element--iffyitem-ref-" class="anchorlink"></a>Element — <code>iffy:item-ref</code> <a id="iffy-item-ref" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>Represents a reference to an RSS <code>item</code> in RSS data available elsewhere.</p>
    <p><code>iffy:item-ref</code> SHOULD be an empty XML element, given meaning by its attributes.</p>
    <ul>
     <li>
      <p>An <code>iffy:item-ref</code> MUST contain an <code>href</code> attribute, which points to a source of RSS data or to an HTML document that refers to RSS data in an HTML <code>link</code> element.</p>
     </li>
     <li>
      <p>An <code>iffy:item-ref</code> SHOULD contain a <code>type</code> attribute. The type should either be <code>text/html</code> or <code>application/*rss+xml</code> where the <code>*</code> may refer to the empty string (so just <code>application/rss+xml</code>) or a prefix, <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html">like</a> <code>application/x-single-item-rss+xml</code>. (If a type attribute is missing, a consumer MAY try to examine the contents at <code>href</code> and do the right thing.) (Mime types can, as always, include a parameter, like <code>text/html;charset=UTF-8</code>.)</p>
     </li>
     <li>
      <p>An <code>iffy:item-ref</code> MUST contain a <code>guid</code> attribute UNLESS the <code>href</code> refers to <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html">single-item RSS</a>.</p>
     </li>
    </ul>
    <p>To resolve an <code>iffy:item-ref</code> consumers should:</p>
    <ol>
     <li>
      <p>Check the <code>type</code> attribute, or if missing, check the contents referred to by the <code>href</code>, to see whether the referent is an HTML or an RSS document.</p>
     </li>
     <li>
      <p>If the referent is an RSS document and the <code>iffy:item-ref</code> includes a <code>guid</code> attribute, the <code>item-ref</code> refers to the RSS <code>item</code> element containing a <code>guid</code> element whose contents matched the <code>iffy:item-ref</code>'s <code>guid</code> attribute.</p>
     </li>
     <li>
      <p>If the referent is an RSS document and the <code>iffy:item-ref</code> does NOT include a <code>guid</code> attribute, then the <code>item-ref</code> refers to the single RSS item in the document. If there is more than one RSS <code>item</code>, the resolution fails.</p>
     </li>
     <li>
      <p>If the referent is an HTML document and the <code>iffy:item-ref</code> contains a <code>guid</code> attribute, the consumer must gather all HTML <code>link</code> elements with <code>rel="alternative"</code> and <code>type="application/*rss+xml</code> where the <code>*</code> may refer to the empty string (so just <code>application/rss+xml</code>) or a prefix, <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html">like</a> <code>application/x-single-item-rss+xml</code>. The type may also contain a parameter, like <code>application/x-single-item-rss+xml;completeness=Content</code> The consumer tries <code>link</code> elements whose <code>type</code> attribute is an exact match to the <code>iffy:item-ref</code>'s <code>type</code> attribute first, in the order they appear in the HTML file, and then other <code>link</code> elements with <code>type="application/*rss+xml</code>, in the order they appear. For each <code>link</code> tried, if the linked RSS contains that an RSS <code>item</code> with the <code>item-ref</code>'s specified <code>guid</code>, then the <code>item-ref</code> refers to that <code>item</code> and the resolution process terminates immediately.</p>
     </li>
     <li>
      <p>If the referent is an HTML document and the <code>iffy:item-ref</code> DOES NOT contain a <code>guid</code> attribute, the consumer must search for an HTML <code>link</code> element whose <code>rel="alternative"</code> and whose <code>type="application/x-single-item-rss+xml"</code>. If there are no or multiple <code>link</code> elements so specified, resoluton fails. If there is a unique <code>&lt;link rel="alternative" type="application/x-single-item-rss+xml" href="..."&gt;</code>, and its referent contains RSS data with a single <code>item</code> attribute, the <code>iffy:item-ref</code> successfully resolves to that attribute.</p>
     </li>
    </ol>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-single-item-rss" id="example-single-item-rss" name="example-single-item-rss" class="anchorlink"></a>Example (single-item RSS):</h4>
    <pre><code class="language-xml">&lt;iffy:item-ref href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.rss" type="application/x-single-item-rss+xml" /&gt;
</code></pre>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-rss-by-guid" id="example-rss-by-guid" name="example-rss-by-guid" class="anchorlink"></a>Example (RSS, by guid):</h4>
    <pre><code class="language-xml">&lt;iffy:item-ref href="https://tech.interfluidity.com/feed/index.rss" type="application/rss+xml" guid="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" /&gt;
</code></pre>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-html-search-for-single-item-rss" id="example-html-search-for-single-item-rss" name="example-html-search-for-single-item-rss" class="anchorlink"></a>Example (HTML, search for single-item RSS):</h4>
    <pre><code class="language-xml">&lt;iffy:item-ref href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" type="text/html" /&gt;
</code></pre>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-html-search-all-feeds-for-guid" id="example-html-search-all-feeds-for-guid" name="example-html-search-all-feeds-for-guid" class="anchorlink"></a>Example (HTML, search all feeds for guid):</h4>
    <pre><code class="language-xml">&lt;!-- here the item guid is also the permalink, that is the href. but that needn't always be the case! --&gt;
&lt;iffy:item-ref href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" type="text/html" guid="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html" /&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffypolicy-" id="element--iffypolicy-" name="element--iffypolicy-" class="anchorlink"></a>Element — <code>iffy:policy</code> <a id="iffy-policy" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>In general, represents a statement of some kind of policy with respect to its containing element, suggested to feed consumers for handling a feed or item.</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-iffyhint-announce" id="when-a-subelement-of-iffyhint-announce" name="when-a-subelement-of-iffyhint-announce" class="anchorlink"></a>When a subelement of <a href="https://tech.interfluidity.com/xml/iffy/#iffy-hint-announce"><code>iffy:hint-announce</code></a></h3>
    <p>Please see <a href="https://tech.interfluidity.com/xml/iffy/#iffy-hint-announce"><code>iffy:hint-announce</code></a>.</p>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyprovenance-" id="element--iffyprovenance-" name="element--iffyprovenance-" class="anchorlink"></a>Element — <code>iffy:provenance</code> <a id="iffy-provenance" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>In general, this element tracks the provenance of a feed or item. It can be at the <code>channel</code>-level or at the <code>item</code>-level. Also, <code>iffy:provenance</code> elements can be nested within <code>iffy:provenance</code> elements (see below).</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-no-shape-attribute-is-set-or-shapesequence" id="when-no-shape-attribute-is-set-or-shapesequence" name="when-no-shape-attribute-is-set-or-shapesequence" class="anchorlink"></a>When no <code>shape</code> attribute is set, or <code>shape="sequence"</code></h3>
    <p><code>iffy:provenance</code> elements of shape <code>sequence</code> (the default) contain</p>
    <ul>
     <li>a sequence of one or more <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> elements, each of whose
      <ul>
       <li><code>rel</code> attribute is MUST BE <code>via</code></li>
       <li><code>href</code> attribute MUST BE the URL of an RSS feed from which the base contents of this item were drawn</li>
       <li><code>type</code> attribute SHOULD BE <code>application/rss+xml</code></li>
      </ul></li>
     <li>optionally, a terminating <code>iffy:provenance</code> whose shape attribute is set to <code>merge</code></li>
    </ul>
    <p>If the item or channel from which the current item or channel was sourced does not contain an <code>iffy:provenance</code>, then the current item should include just one <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a>.</p>
    <p>If the item from which the current item was sourced <em>does</em> contains an <code>iffy:provenance</code>:</p>
    <ul>
     <li>
      <p>If the contained <code>iffy:provenance</code> has no <code>shape</code> attribute set, or if <code>shape</code> is set to <code>sequence</code>, then the current feed SHOULD include all items of that element, with the URL of the feed from which the item was sourced PREPENDED as an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a>. This will ensure the most immediate source will be the first <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> element. The origin — or at least the source for which no further provenance is known — will be the last <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> or <code>iffy:provenance</code> subelement.</p>
     </li>
     <li>
      <p>If the contained <code>iffy:provenance</code> has a <code>shape</code> attribute set to <code>merge</code>, then the full element should be included as a subelement, after an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> to its source.</p>
     </li>
    </ul>
    <p>If one is present, processors SHOULD use a channel level <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> element with <code>rel="self"</code> and <code>type="application/rss+xml"</code> to as the basis for provenance in source documents. See <a href="https://www.rssboard.org/rss-profile#namespace-elements-atom-link">RSS Best Practices</a>. However, if no such <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> is available at the <code>channel</code> level, processes may default to the URL by which they accessed the source.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-from-here" id="example-from-here" name="example-from-here" class="anchorlink"></a>Example (from <a href="https://www.interfluidity.com/unify-rss/all-blogs.rss">here</a>):</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;
  &lt;channel&gt;
    &lt;title&gt;interfluidity, all blogs&lt;/title&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://www.interfluidity.com/unify-rss/all-blogs.rss"/&gt;
    &lt;item&gt;
      &lt;title&gt;Industrial policy and ecosystems&lt;/title&gt;
      &lt;guid isPermalink="true"&gt;https://drafts.interfluidity.com/2024/05/11/industrial-policy-and-ecosystems/index.html&lt;/guid&gt;
      &lt;author&gt;nospam@dev.null (Steve Randy Waldman)&lt;/author&gt;
      &lt;link&gt;https://drafts.interfluidity.com/2024/05/11/industrial-policy-and-ecosystems/index.html&lt;/link&gt;
      &lt;!-- Other item elements --&gt;
      &lt;iffy:provenance&gt;
        &lt;atom:link type="application/rss+xml" rel="via" href="https://drafts.interfluidity.com/feed/index.rss"/&gt;
      &lt;/iffy:provenance&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-the-shape-attribute-is-set-to-merge" id="when-the-shape-attribute-is-set-to-merge" name="when-the-shape-attribute-is-set-to-merge" class="anchorlink"></a>When the <code>shape</code> attribute is set to <code>merge</code></h3>
    <p><code>iffy:provenance</code> elements of shape <code>merge</code> describe an <code>item</code> or <code>channel</code> that has derived from multiple sources. When <code>shape="merge"</code>, the ordering of items within <code>iffy:provenance</code> is not significant.</p>
    <p>Any <code>iffy:provenance</code> element of shape <code>merge</code> can contain any number of <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> and <code>iffy:provenance</code> of shape <code>sequence</code>, or with no <code>shape</code> attribute set.</p>
    <p>When merging items or feeds whose provenance is itself the result of a merge, processors SHOULD bring what would become elements of a nested <code>iffy:provenance</code> with <code>shape="merge"</code> into the top-level merge.</p>
    <p>In other words, <code>iffy:provenance</code> elements with shape <code>merge</code> should not be <strong>directly</strong> nested, one inside the other. Elements of the inner <code>iffy:provenance</code> with <code>shape="merge"</code> should be flattened into the outer <code>iffy:provenance</code> with <code>shape="merge"</code>.</p>
    <p><code>iffy:provenance</code> elements with shape <code>merge</code> CAN and SHOULD be <strong>indirectly</strong> nested, when a merge brings in an <code>iffy:provenance</code> element of shape <code>sequence</code> (or no shape set), which then includes a nested <code>iffy:provenance</code> elements with shape <code>merge</code>.</p>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyrestriction-" id="element--iffyrestriction-" name="element--iffyrestriction-" class="anchorlink"></a>Element — <code>iffy:restriction</code> <a id="iffy-restriction" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>In general, represents an expression of some kind of restriction over the application of its containing element.</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-iffyhint-announce-1" id="when-a-subelement-of-iffyhint-announce-1" name="when-a-subelement-of-iffyhint-announce-1" class="anchorlink"></a>When a subelement of <a href="https://tech.interfluidity.com/xml/iffy/#iffy-hint-announce"><code>iffy:hint-announce</code></a></h3>
    <p>Please see <a href="https://tech.interfluidity.com/xml/iffy/#iffy-hint-announce"><code>iffy:hint-announce</code></a>.</p>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyrecent-" id="element--iffyrecent-" name="element--iffyrecent-" class="anchorlink"></a>Element — <code>iffy:recent</code> <a id="iffy-recent" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-beneath-iffyselection" id="when-beneath-iffyselection" name="when-beneath-iffyselection" class="anchorlink"></a>When beneath <a href="https://tech.interfluidity.com/xml/iffy/#iffy-selection"><code>iffy:selection</code></a></h3>
    <p><code>iffy:recent</code> describes a <a href="https://tech.interfluidity.com/xml/iffy/#iffy-selection">selection</a> (see also <a href="https://tech.interfluidity.com/xml/iffy/#iffy-curation"><code>iffy:curation</code></a>) that represents the most recent posts to a feed.</p>
    <p>(Curations that are selections of recent posts represent the most common use-case for RSS, although most feeds do not yet annotate themselves as such.)</p>
    <p><code>iffy:recent</code> has three attributes:</p>
    <ul>
     <li>
      <p><code>last</code> — When the attribute <code>last="&lt;positive-integer-value-n&gt;"</code> is defined, the feed displays a subset of the most recent <code>n</code> items, if there are at least <code>n</code> items in the unabridged body of work.</p>
     </li>
     <li>
      <p><code>since</code> — When the attribute <code>since="&lt;timestamp&gt;"</code> is defined, all elements more recent than the given timestamp are represented as items in this feed. Timestamps may de defined as <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-3.3">atom "date constructs"</a> OR in the format expected for <a href="https://www.rssboard.org/rss-specification"><code>pubDate</code> in standard RSS</a>.</p>
     </li>
     <li>
      <p><code>operation</code> — Values must be one of <code>and</code> or <code>or</code>. Determines whether, if both <code>last</code> and <code>since</code> are set, items must be more recent than the <code>since</code> timestamp AND among the most recent <code>n</code> defined by <code>last</code>, or whether all items more recent than the <code>since</code> timestamp OR among the most recent <code>n</code> defined by <code>last</code> are included. If no <code>operation</code> is set, and both <code>last</code> and <code>since</code> are set, then <code>operation</code> should be presumed to default to <code>and</code>.</p>
     </li>
    </ul>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-8" id="example-8" name="example-8" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:curation&gt;
      &lt;iffy:selection&gt;
        &lt;iffy:recent since="2024-08-16T22:22:14.297722-04:00" last="10" operator="and"/&gt;
      &lt;iffy:selection&gt;
    &lt;/iffy:curation&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyrevision-" id="element--iffyrevision-" name="element--iffyrevision-" class="anchorlink"></a>Element — <code>iffy:revision</code> <a id="iffy-revision" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>MUST contain a URL, URI, or <a href="https://datatracker.ietf.org/doc/html/rfc3987">IRI</a> of a either a fixed past revision or the current (potentially evolving) revision of an item.</p>
    <p><strong>Example</strong>:</p>
    <pre><code class="language-xml">&lt;iffy:revision&gt;https://tech.interfluidity.com/xml/iffy/index-oldcommit-13de0232319ceab2f830591c318089d18cbec78d.html&lt;/iffy:revision&gt;
</code></pre>
    <p>See <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code> example</a>.</p>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyselection-" id="element--iffyselection-" name="element--iffyselection-" class="anchorlink"></a>Element — <code>iffy:selection</code> <a id="iffy-selection" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-beneath-iffycuration-1" id="when-beneath-iffycuration-1" name="when-beneath-iffycuration-1" class="anchorlink"></a>When beneath <a href="https://tech.interfluidity.com/xml/iffy/#iffy-curation"><code>iffy:curation</code></a></h3>
    <p><code>iffy:selection</code> is a <em>curation type</em>, a description of how the feed is curated relative to the body of work a subset of which it presents.</p>
    <p>Curation type <code>iffy:selection</code> signifies that this feed is the result of a potentially arbitrary query against or restriction of the full body of work.</p>
    <p>An <code>iffy:selection</code> tag SHOULD contain subelements, documenting the query or restriction that produced this selection, ideally with sufficient information to reproduce the selection from a specified upstream source.</p>
    <p>This specification defines only a single query type for <code>iffy:selection</code>:</p>
    <ul>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-recent"><code>iffy:recent</code></a></li>
    </ul>
    <p>However, many other queries or selections are possible, and at least for now, there are no restrictions on descriptions that might be provide. It is a playground for developer creativity.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-recent-items" id="example-recent-items" name="example-recent-items" class="anchorlink"></a>Example (recent items):</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:curation&gt;
      &lt;iffy:selection&gt;
        &lt;iffy:recent since="2024-08-16T22:22:14.297722-04:00" last="10" operator="and"/&gt;
      &lt;/iffy:selection&gt;
    &lt;/iffy:curation&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-arbitrary-query" id="example-arbitrary-query" name="example-arbitrary-query" class="anchorlink"></a>Example (arbitrary query):</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:curation&gt;
      &lt;iffy:selection&gt;
        &lt;acme:query&gt; &lt;!-- totally faking it here --&gt;
          &lt;acme:dbhost&gt;articles.zine.dk&lt;/acme:dbhost&gt;
          &lt;acme:dbport&gt;5432&lt;/acme:dbhost&gt;
          &lt;acme:sql&gt;SELECT article_id FROM article WHERE author = 'Jane Doe'&lt;/acme:sql&gt;
        &lt;/acme:query&gt;
      &lt;/iffy:selection&gt;
    &lt;/iffy:curation&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffysingle-" id="element--iffysingle-" name="element--iffysingle-" class="anchorlink"></a>Element — <code>iffy:single</code> <a id="iffy-single" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-beneath-iffycuration-2" id="when-beneath-iffycuration-2" name="when-beneath-iffycuration-2" class="anchorlink"></a>When beneath <a href="https://tech.interfluidity.com/xml/iffy/#iffy-curation"><code>iffy:curation</code></a></h3>
    <p><code>iffy:single</code> is a <em>curation type</em>, a description of how the feed is curated relative to the body of work a subset of which it presents.</p>
    <p>Curation type <code>iffy:single</code> signifies that this is <a href="https://tech.interfluidity.com/2024/11/12/supporting-single-item-rss/index.html">single-item RSS</a>.</p>
    <p>The feed contains just one item, not by happenstance because there is only one recent item, nor because some <a href="https://tech.interfluidity.com/xml/iffy/#iffy-selection">selection</a> yielded just one item, but intentionally, so that metadata related to the item can have its own permanent RSS home.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-9" id="example-9" name="example-9" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;?xml version='1.0' encoding='UTF-8'?&gt;

&lt;rss version="2.0" xmlns:iffy="http://tech.interfluidity.com/xml/iffy/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/"&gt;
  &lt;channel&gt;
    &lt;title&gt;tech — interfluidity&lt;/title&gt;
    &lt;atom:link type="application/rss+xml" rel="self" href="https://tech.interfluidity.com/feed/index.rss"/&gt;
    &lt;iffy:curation&gt;
      &lt;iffy:single/&gt;
    &lt;/iffy:curation&gt;
    &lt;!-- Other channel elements --&gt;
    &lt;item&gt;
      &lt;!-- Other item elements --&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffysynthetic-" id="element--iffysynthetic-" name="element--iffysynthetic-" class="anchorlink"></a>Element — <code>iffy:synthetic</code> <a id="iffy-synthetic" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>This element marks channels or items that are in some sense automated or "synthetic".</p>
    <p>SHOULD contain an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy-type</code></a>, and then other type-specific subelements.</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-channel" id="when-a-subelement-of-channel" name="when-a-subelement-of-channel" class="anchorlink"></a>When a subelement of <code>channel</code></h3>
    <p><code>channel</code> &gt; <code>iffy:synthetic</code> implies that ALL of the items in the channel are synthetic or automatically produced. An aggregation or curation of human-authored items SHOULD NOT be marked <code>iffy:synthetic</code>.</p>
    <p>Known types:</p>
    <ul>
     <li><code>ItemUpdateFeed</code> — A synthetic feed announcing updates of a particular logical item from another feed.</li>
    </ul>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-channel-and-iffytype-is-itemupdatefeed" id="when-a-subelement-of-channel-and-iffytype-is-itemupdatefeed" name="when-a-subelement-of-channel-and-iffytype-is-itemupdatefeed" class="anchorlink"></a>When a subelement of <code>channel</code> AND <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a> is <code>ItemUpdateFeed</code></h3>
    <p>SHOULD include an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.7"><code>atom:link</code></a> with <code>rel</code> attribute set to <code>related</code>, pointing to the same resource as the <code>link</code> element of the item whose updates are being announced.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-10" id="example-10" name="example-10" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">  &lt;channel&gt;
    &lt;!-- other channel elements --&gt;
    &lt;iffy:synthetic&gt;
      &lt;iffy:type&gt;ItemUpdateFeed&lt;/iffy:type&gt;
      &lt;atom:link rel="related" href="https://tech.interfluidity.com/xml/iffy/index.html"/&gt;
    &lt;/iffy:synthetic&gt;
  &lt;/channel&gt;
</code></pre>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item-2" id="when-a-subelement-of-item-2" name="when-a-subelement-of-item-2" class="anchorlink"></a>When a subelement of <code>item</code></h3>
    <p>The <code>iffy:synthetic</code> element of an <code>item</code> SHOULD contain — in some form of parsable XML — all the data from which the item content (as reflected in <code>item</code> &gt; <code>content:encoded</code> or <code>item</code> &gt; <code>atom:content</code>) has been generated.</p>
    <p>Consumers may opt to ignore these content items, and use the data from <code>iffy:synthetic</code> for custom renderings or further processing.</p>
    <p>Known types:</p>
    <ul>
     <li><code>UpdateAnnouncement</code> — A synthetic item marking an update of an older item in the feed (or that once would have been in the feed)</li>
     <li><code>UpdateCumulation</code> — A synthetic item describing an aggregation of updates, which may include updates of multiple items, and multiple updates for each item.</li>
    </ul>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item-and-iffytype-is-updateannouncement" id="when-a-subelement-of-item-and-iffytype-is-updateannouncement" name="when-a-subelement-of-item-and-iffytype-is-updateannouncement" class="anchorlink"></a>When a subelement of <code>item</code> AND <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a> is <code>UpdateAnnouncement</code></h3>
    <p>In addition to <code>iffy:type</code>, MUST contain an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update"><code>iffy:update</code></a> element, which in turn MUST contain an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a> element describing the initial state of the updated post.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-11" id="example-11" name="example-11" class="anchorlink"></a>Example:</h4>
    <pre><code class="language-xml">&lt;item&gt;
  &lt;pubDate&gt;Thu, 20 Jun 2024 13:10:00 -0400&lt;/pubDate&gt;
  &lt;guid isPermalink="true"&gt;
    https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html
  &lt;/guid&gt;
  &lt;link&gt;https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-updated-2024-06-20-13-10-00.html&lt;/link&gt;
  &lt;title&gt;Updated: Feedletter tutorial&lt;/title&gt;
  &lt;!-- other item elements --&gt;
  &lt;iffy:synthetic&gt;
    &lt;iffy:type&gt;UpdateAnnouncement&lt;/iffy:type&gt;
    &lt;iffy:update&gt;
      &lt;atom:updated&gt;2024-06-20T17:10:00Z&lt;/atom:updated&gt;
      &lt;atom:summary&gt;
        &lt;![CDATA[Add note to Section 16, "Advanced: Customize the content" documenting &lt;i&gt;feedletter&lt;/i&gt; API changes that slightly modify this section of the tutorial.]]&gt;
      &lt;/atom:summary&gt;
      &lt;iffy:revision&gt;
        https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-oldcommit-acb84c08c1bbcc83036b9cad70f6a3c5d60865c4.html
      &lt;/iffy:revision&gt;
      &lt;iffy:diff&gt;
        https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-diff-acb84c08c1bbcc83036b9cad70f6a3c5d60865c4-to-current.html
      &lt;/iffy:diff&gt;
      &lt;iffy:initial&gt;
        &lt;atom:title&gt;&lt;![CDATA[Feedletter tutorial]]&gt;&lt;/atom:title&gt;
        &lt;atom:link href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html"/&gt;
        &lt;iffy:uid&gt;https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html&lt;/iffy:uid&gt;
        &lt;atom:published&gt;2024-01-29T15:30:00Z&lt;/atom:published&gt;
        &lt;dc:creator&gt;&lt;![CDATA[Steve Randy Waldman]]&gt;&lt;/dc:creator&gt;
      &lt;/iffy:initial&gt;
    &lt;/iffy:update&gt;
  &lt;/iffy:synthetic&gt;
  &lt;dc:creator&gt;&lt;![CDATA[Update-o-Bot]]&gt;&lt;/dc:creator&gt;
  &lt;content:encoded&gt;&lt;!-- generated HTML content --&gt;&lt;/content:encoded&gt;
&lt;/item&gt;
</code></pre>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffytype-" id="element--iffytype-" name="element--iffytype-" class="anchorlink"></a>Element — <code>iffy:type</code> <a id="iffy-type" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>In general, marks the "type" of its containing element.</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-channel--iffysynthetic" id="when-a-subelement-of-channel--iffysynthetic" name="when-a-subelement-of-channel--iffysynthetic" class="anchorlink"></a>When a subelement of <code>channel</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a></h3>
    <p>Marks what kind of synthetic channel its parent is. Currently known values include</p>
    <ul>
     <li><code>ItemUpdateFeed</code> — A synthetic feed announcing updates of a particular logical item from another feed.</li>
    </ul>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-subelement-of-item--iffysynthetic" id="when-a-subelement-of-item--iffysynthetic" name="when-a-subelement-of-item--iffysynthetic" class="anchorlink"></a>When a subelement of <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a></h3>
    <p>Marks what kind of synthetic item its parent is. Currently known values include</p>
    <ul>
     <li>
      <p><code>UpdateAnnouncement</code> — A synthetic item marking an update of an older item in the feed (or that once would have been in the feed)</p>
     </li>
     <li>
      <p><code>UpdateCumulation</code> — A synthetic item describing an aggregation of updates, which may include updates of multiple items, and multiple updates for each item.</p>
     </li>
    </ul>
    <p>Please see known containing elements, including</p>
    <ul>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a>.</li>
    </ul>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyuid-" id="element--iffyuid-" name="element--iffyuid-" class="anchorlink"></a>Element — <code>iffy:uid</code> <a id="iffy-uid" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>Refers to the <a href="https://www.rssboard.org/rss-specification#ltguidgtSubelementOfLtitemgt"><code>guid</code></a> of an <code>item</code> from a different item or construct.</p>
    <p><em><strong>Note:</strong> We define an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-uid"><code>iffy:uid</code></a> element, rather than rely upon <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.6"><code>atom:id</code></a>, because <code>atom:id</code> requires that its contents be an IRI, but we mean to impose no such restriction.</em></p>
    <p>Please see known containing elements, including</p>
    <ul>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a>.</li>
    </ul>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyupdate-" id="element--iffyupdate-" name="element--iffyupdate-" class="anchorlink"></a>Element — <code>iffy:update</code> <a id="iffy-update" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <p>In general, describes or announces updates to previously published items.</p>
    <p><strong><em>Typo fixes, small rephrasings, and other tweaks are not expected to be recorded as distinct updates. That is, within a "single update" there may be a sequence of smaller revisions that go unrecorded.</em></strong></p>
    <p>Applications that want a more forensic history might consider including and exposing every published change in version control.</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-sub-element-of-item--iffyupdate-history" id="when-a-sub-element-of-item--iffyupdate-history" name="when-a-sub-element-of-item--iffyupdate-history" class="anchorlink"></a>When a sub-element of <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code></a></h3>
    <p>MUST contain one <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.15"><code>atom:updated</code></a> element.</p>
    <p>MAY also contain one each of</p>
    <ul>
     <li><a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.13"><code>atom:summary</code></a></li>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-diff"><code>iffy:diff</code></a></li>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-revision"><code>iffy:revision</code></a></li>
    </ul>
    <p>MAY contain an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.14"><code>atom:title</code></a> element, if the title has been revised since a previous version</p>
    <p>MAY contain any number of <a href="https://www.rssboard.org/rss-profile#namespace-elements-dublin-creator"><code>dc:creator</code></a> elements, reflecting <em>authorship specific to this revision</em>.</p>
    <p>By default, an update's title and authors are the same the containing item, which always reflects the <em>current</em> revisions authors.</p>
    <p>If the title changes, or authorship is evolving over time, these items should be specified in every update that alters them.</p>
    <p>The initial title and authorship SHOULD BE specified in an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a> element if either have been revised.</p>
    <p>See <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code> example</a>.</p>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-sub-element-of-item--iffysynthetic-with-iffytype-updateannouncement" id="when-a-sub-element-of-item--iffysynthetic-with-iffytype-updateannouncement" name="when-a-sub-element-of-item--iffysynthetic-with-iffytype-updateannouncement" class="anchorlink"></a>When a sub-element of <code>item</code> &gt; <a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a> with <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a> <code>UpdateAnnouncement</code></h3>
    <p>MUST contain one <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.15"><code>atom:updated</code></a> element.</p>
    <p>MUST contain an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a> describing the initial state of the item updated.</p>
    <p>(Information in the containing <code>item</code> refers to the <em>update announcement</em> rather than the post whose update is announced, so an <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a> element is necessary.</p>
    <p>MAY also contain one each of</p>
    <ul>
     <li><a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.13"><code>atom:summary</code></a></li>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-diff"><code>iffy:diff</code></a></li>
     <li><a href="https://tech.interfluidity.com/xml/iffy/#iffy-revision"><code>iffy:revision</code></a></li>
    </ul>
    <p>MAY contain an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.14"><code>atom:title</code></a> element, if the title has been revised since a previous version.</p>
    <p>MAY contain any number of <a href="https://www.rssboard.org/rss-profile#namespace-elements-dublin-creator"><code>dc:creator</code></a> elements, if authorship has been revised since a previous version..</p>
   </div>
   <hr>
   <h2><a href="https://tech.interfluidity.com/xml/iffy/#element--iffyupdate-history-" id="element--iffyupdate-history-" name="element--iffyupdate-history-" class="anchorlink"></a>Element — <code>iffy:update-history</code> <a id="iffy-update-history" href="https://tech.interfluidity.com/xml/iffy/"></a></h2>
   <div class="iffy-element-desc">
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-an-item-level-element" id="when-an-item-level-element" name="when-an-item-level-element" class="anchorlink"></a>When an <code>item</code> level element</h3>
    <p>MUST contain a sequence of <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update"><code>iffy:update</code></a> elements, in reverse chronological order, describing the histories of <em>major revisions</em> to an item.</p>
    <p>MAY contain one <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a> element.</p>
    <p>Items containing an <code>iffy:update-history</code> SHOULD also include an <a href="https://datatracker.ietf.org/doc/html/rfc4287#section-4.2.15"><code>atom:updated</code></a> tag corresponding to the most recent update.</p>
    <p><strong><em>Typo fixes, small rephrasings, and other minor tweaks are not expected to be recorded as distinct updates. That is, within a "single update" there may be a sequence of smaller revisions that go unrecorded.</em></strong> Applications that want a more forensic history might consider including and exposing every published change in version control.</p>
    <h4><a href="https://tech.interfluidity.com/xml/iffy/#example-" id="example-" name="example-" class="anchorlink"></a>Example: <a id="iffy-item-update-history-example" href="https://tech.interfluidity.com/xml/iffy/"></a></h4>
    <pre><code class="language-xml">&lt;item&gt;
  &lt;!-- Other item elements --&gt;
  &lt;iffy:update-history&gt;
    &lt;iffy:update&gt;
      &lt;atom:updated&gt;2024-06-02T04:20:00Z&lt;/atom:updated&gt;
      &lt;atom:summary&gt;
        &lt;![CDATA[Drop &lt;code&gt;iffy:timestamp&lt;/code&gt;. We can just reuse &lt;code&gt;atom:updated&lt;/code&gt; for the same work.]]&gt;
      &lt;/atom:summary&gt;
      &lt;iffy:revision&gt;
        https://tech.interfluidity.com/xml/iffy/index-oldcommit-199e44561de3fd9e731a335d8b2a655f42d9bc04.html
      &lt;/iffy:revision&gt;
      &lt;iffy:diff&gt;
        https://tech.interfluidity.com/xml/iffy/index-diff-199e44561de3fd9e731a335d8b2a655f42d9bc04-to-current.html
      &lt;/iffy:diff&gt;
    &lt;/iffy:update&gt;
    &lt;iffy:update&gt;
      &lt;atom:updated&gt;2024-06-02T01:35:00Z&lt;/atom:updated&gt;
      &lt;atom:summary&gt;&lt;![CDATA[Add initial take on tags related to updates and revisions.]]&gt;&lt;/atom:summary&gt;
      &lt;iffy:revision&gt;
        https://tech.interfluidity.com/xml/iffy/index-oldcommit-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0.html
      &lt;/iffy:revision&gt;
      &lt;iffy:diff&gt;
        https://tech.interfluidity.com/xml/iffy/index-diff-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0-to-199e44561de3fd9e731a335d8b2a655f42d9bc04.html
      &lt;/iffy:diff&gt;
    &lt;/iffy:update&gt;
    &lt;iffy:update&gt;
      &lt;atom:updated&gt;2024-05-26T03:00:00Z&lt;/atom:updated&gt;
      &lt;atom:summary&gt;&lt;![CDATA[Add JS/CSS so that prior revisions are visually distinct from current.]]&gt;&lt;/atom:summary&gt;
      &lt;iffy:revision&gt;
        https://tech.interfluidity.com/xml/iffy/index-oldcommit-13de0232319ceab2f830591c318089d18cbec78d.html
      &lt;/iffy:revision&gt;
      &lt;iffy:diff&gt;
        https://tech.interfluidity.com/xml/iffy/index-diff-13de0232319ceab2f830591c318089d18cbec78d-to-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0.html
      &lt;/iffy:diff&gt;
    &lt;/iffy:update&gt;
    &lt;iffy:update&gt;
      &lt;atom:updated&gt;2024-05-24T04:25:00Z&lt;/atom:updated&gt;
      &lt;atom:summary&gt;
        &lt;![CDATA[Drop tags &lt;code&gt;iffy:when-updated&lt;/code&gt; and &lt;code&gt;iffy:original-guid&lt;/code&gt;, bad appraoch to updates.]]&gt;
      &lt;/atom:summary&gt;
      &lt;iffy:revision&gt;
        https://tech.interfluidity.com/xml/iffy/index-oldcommit-394986cb8d9c57f567d324e691a44d50102101ce.html
      &lt;/iffy:revision&gt;
      &lt;iffy:diff&gt;
        https://tech.interfluidity.com/xml/iffy/index-diff-394986cb8d9c57f567d324e691a44d50102101ce-to-13de0232319ceab2f830591c318089d18cbec78d.html
      &lt;/iffy:diff&gt;
    &lt;/iffy:update&gt;
  &lt;/iffy:update-history&gt;
&lt;/item&gt;
</code></pre>
    <h3><a href="https://tech.interfluidity.com/xml/iffy/#when-a-sub-element-of-iffysynthetic-with-iffytype-updatecumulation" id="when-a-sub-element-of-iffysynthetic-with-iffytype-updatecumulation" name="when-a-sub-element-of-iffysynthetic-with-iffytype-updatecumulation" class="anchorlink"></a>When a sub-element of <a href="https://tech.interfluidity.com/xml/iffy/#iffy-synthetic"><code>iffy:synthetic</code></a> with <a href="https://tech.interfluidity.com/xml/iffy/#iffy-type"><code>iffy:type</code></a> <code>UpdateCumulation</code></h3>
    <p>MUST contain a sequence of <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update-history"><code>iffy:update-history</code></a> elements, each of which contains <a href="https://tech.interfluidity.com/xml/iffy/#iffy-update"><code>iffy:update</code></a> elements in reverse chronological order, describing a sequence of <em>major revisions</em> to an item, and MUST ALSO contain one <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial"><code>iffy:initial</code></a> element, which MUST include an <code>iffy:uid</code> element identifying and describing the <code>item</code> whose updates are documented. See <a href="https://tech.interfluidity.com/xml/iffy/#iffy-initial-update-cumulation">discussion under <code>iffy:initial</code></a></p>
   </div>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/xml/iffy/index.html#major-updates">Last major update at 2025-08-30 @ 06:50 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-05-13 @ <a href="https://tech.interfluidity.com/xml/iffy/index.html" class="pubtime">04:10 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2025-08-30T22:50:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Revise definition of curation, so it has only three types: all, selection, and single. iffy:recent becomes a query under selection.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-7f272e9b81c08396eb5e1f9e2209e6977a2f39af.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-7f272e9b81c08396eb5e1f9e2209e6977a2f39af-to-current.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-12-22T15:40:00Z</atom:updated>
          <atom:summary><![CDATA[Document <code>iffy:item-ref</code> and <code>iffy:in-reply-to</code>.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-c1c3071b0ac3127c2969b24e26d439510fdc8c96.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-c1c3071b0ac3127c2969b24e26d439510fdc8c96-to-7f272e9b81c08396eb5e1f9e2209e6977a2f39af.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-11-15T06:10:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Document <code>iffy:curation</code>, and curation type elements <code>iffy:all</code>, <code>iffy:recent</code>, <code>iffy:selection</code>, <code>iffy:single</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-5fcd99373d2d940a0c6e1468979be59e2d6bcced.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-5fcd99373d2d940a0c6e1468979be59e2d6bcced-to-c1c3071b0ac3127c2969b24e26d439510fdc8c96.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-11-02T21:15:00Z</atom:updated>
          <atom:summary><![CDATA[Clarifications of iffy:provenance and iffy:update-history.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-34d8dab8f187c6d9512615dbb83c95395aa49a3b.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-34d8dab8f187c6d9512615dbb83c95395aa49a3b-to-5fcd99373d2d940a0c6e1468979be59e2d6bcced.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-07-01T18:40:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Major revision of <code>iffy:synthetic</code>, generalize <code>iffy:initial</code>, <code>iffy:update</code>, <code>iffy:update-history</code>, define <code>iffy:uid</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-0df7787c056ab2b983e2de4d107c2fa477b7c8f4.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-0df7787c056ab2b983e2de4d107c2fa477b7c8f4-to-34d8dab8f187c6d9512615dbb83c95395aa49a3b.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-06-20T15:05:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Document <code>iffy:type</code>, update documentation of <code>iffy:synthetic</code> as optionally including <code>iffy:type</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-f19e4870e2c719f71d2f5024cb3e2e8f477622dc.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-f19e4870e2c719f71d2f5024cb3e2e8f477622dc-to-0df7787c056ab2b983e2de4d107c2fa477b7c8f4.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-06-18T03:50:00Z</atom:updated>
          <atom:summary><![CDATA[Document <code>iffy:synthetic</code>.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-b8f2ae57694f9fb88b10df011f69ee9acfe4c0ac.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-b8f2ae57694f9fb88b10df011f69ee9acfe4c0ac-to-f19e4870e2c719f71d2f5024cb3e2e8f477622dc.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-06-11T18:10:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Document <code>iffy:hint-announce</code>, <code>iffy:policy</code>, and <code>iffy:restriction</code>.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-6c5fef82527bd419e8e9c7e7f3a6420c9925cf10.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-6c5fef82527bd419e8e9c7e7f3a6420c9925cf10-to-b8f2ae57694f9fb88b10df011f69ee9acfe4c0ac.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-06-02T04:25:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Drop <code>iffy:timestamp</code>. We can just reuse <code>atom:updated</code> for the same work.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-199e44561de3fd9e731a335d8b2a655f42d9bc04.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-199e44561de3fd9e731a335d8b2a655f42d9bc04-to-6c5fef82527bd419e8e9c7e7f3a6420c9925cf10.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-06-02T01:35:00Z</atom:updated>
          <atom:summary><![CDATA[Add initial take on tags related to updates and revisions.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0-to-199e44561de3fd9e731a335d8b2a655f42d9bc04.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-05-26T03:00:00Z</atom:updated>
          <atom:summary><![CDATA[Add JS/CSS so that prior revisions are visually distinct from current.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-13de0232319ceab2f830591c318089d18cbec78d.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-13de0232319ceab2f830591c318089d18cbec78d-to-72eaf9fdfebc9e627bff33bbe1102d4d250ad1d0.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-05-24T04:25:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Drop tags <code>iffy:when-updated</code> and <code>iffy:original-guid</code>, bad appraoch to updates.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/xml/iffy/index-oldcommit-394986cb8d9c57f567d324e691a44d50102101ce.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/xml/iffy/index-diff-394986cb8d9c57f567d324e691a44d50102101ce-to-13de0232319ceab2f830591c318089d18cbec78d.html
          </iffy:diff>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Tue, 9 Apr 2024 01:15:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/04/09/names-too-on-the-nose/index.html</guid>
      <description>
        <![CDATA[This will be an odd post for a tech blog. But here is a list of names "too on-the-nose": Kenneth Chesebro — Guy from Wisconsin who came up with the alternative electors idea to try to confuse the 2020 elections so the House could throw it to Trump. He seems like a pretty cheesy bro to me. Bernie Madoff — He made off with the money. Terra Rodgers — a "director for superhot rock energy", that is a form of geothermal energy, a kind of terrestrial energy. Yahya Sinwar — Whatever you think of the...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/04/09/names-too-on-the-nose/index.html</link>
      <title>Names too on the nose</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2024-06-02T03:40:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-names-too-on-the-nose">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>This will be an odd post for a tech blog. But here is a list of names "too on-the-nose":</p>
   <ul>
    <li><strong>Kenneth Chesebro</strong> — <a href="https://en.wikipedia.org/wiki/Kenneth_Chesebro">Guy</a> from Wisconsin who came up with the alternative electors idea to try to confuse the 2020 elections so the House could throw it to Trump. He seems like a pretty cheesy bro to me.</li>
    <li><strong>Bernie Madoff</strong> — He <em>made off</em> with the money.</li>
    <li><strong>Terra Rodgers</strong> — a "<a href="https://www.theguardian.com/environment/2024/apr/02/geothermal-energy-electricity">director for superhot rock energy</a>", that is a form of geothermal energy, a kind of <em>terrestrial</em> energy.</li>
    <li><strong>Yahya Sinwar</strong> — Whatever you think of the broader Israel/Palestine conflict, the operation he ordered on October 7, 2023 was <em>sin</em> and guaranteed a brutal <em>war</em>. That <em>Sinwar</em> is preceded by <em>Yahya</em> renders the name a kind of Satanic cheerleader's chant.</li>
   </ul>
   <p>More names coming soon!</p>
   <p>I've kind of wanted to maintain a list like this for a long time. I sometimes think we're inhabiting a work of fiction, given how contrivedly <em>a propos</em> certain names often are. I encounter these names, and I want to make a note of them.</p>
   <p>I'll do that here!</p>
   <p>(I think I might once have encountered a Twitter thread in this vein. My apologies to whomever I am ripping off!)</p>
   <p>Please get in touch with any suggestions!</p>
   <p><em><strong>Update:</strong> <a href="https://artlung.com/">Joe Crawford</a> writes to point out that the on-the-nosedness of names <a href="https://www.bbc.com/worklife/article/20180404-do-our-names-push-us-toward-certain-jobs">might have mechanisms</a> other than the universe being a crude dissimulation!</em></p>
   <hr>
   <p>Anyway, I'm finally putting together this list here, on my "tech blog", because it's a good way to experiment with an idea that Chris Krycho <a href="https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/">describes</a> as "sprouts".</p>
   <p>Often "posts" ought not be thought of as finished pieces, but as beginnings — seeds, even — of ongoing, evolving work. (Thanks to <a href="https://mastodon.social/@erlend@writing.exchange">Erlend Sogge Heggen</a> for pointing me to this piece!)</p>
   <p>I've begun by adding support to the <a href="https://www.ietf.org/rfc/rfc4287.txt"><code>&lt;atom:updated&gt;</code> tag</a> in my site generator's RSS.</p>
   <p>When I make meaningful changes, I can update this value, and my feed will re-sort the updated post to the top, and prefix "Updated:" to the title. I can optionally mark posts to create a new GUID for each update, which may cause tools (like my own <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html">feedletter</a>) to treat them as new posts.</p>
   <p>(For now, I am leaving that turned off for this post, and just re-sorting updates to the top of the feed. In the future, who knows?)</p>
   <p>There's lots, lots more to explore in this vein. Do read <a href="https://v5.chriskrycho.com/essays/feeds-are-not-fit-for-gardening/">Chris Krycho's post</a>. But this, I hope, is a start.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/2024/04/09/names-too-on-the-nose/index.html#major-updates">Last major update at 2024-06-01 @ 11:40 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-04-09 @ <a href="https://tech.interfluidity.com/2024/04/09/names-too-on-the-nose/index.html" class="pubtime">01:15 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2024-06-02T03:40:00Z</atom:updated>
          <atom:summary><![CDATA[Add update from Joe Crawford about potential mechanisms for on-the-nosedness.]]></atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/04/09/names-too-on-the-nose/index-oldcommit-c6e71f4d689f2b208c3eae19e647435322fa6d04.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/04/09/names-too-on-the-nose/index-diff-c6e71f4d689f2b208c3eae19e647435322fa6d04-to-current.html
          </iffy:diff>
        </iffy:update>
        <iffy:update>
          <atom:updated>2024-05-21T14:55:00Z</atom:updated>
          <atom:summary><![CDATA[Add Yahya Sinwar.]]></atom:summary>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Wed, 27 Mar 2024 10:55:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/03/27/tar-or-tgz/index.html</guid>
      <description>
        <![CDATA[A thing I've done over the last while is automate a lot of my sysadmin, using systemd timers to hit scala-cli scripts. I've built for myself a little framework that is incredibly in need of documentation, but that lets me define scripts very flexibly and can provide great step-by-step information about what happens and anything that goes wrong in brightly colored HTML e-mails. I love it. Much of what I do is back things up to a cloud service using rclone. Last night I wrote a script just to...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/03/27/tar-or-tgz/index.html</link>
      <title>tar or tgz?</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>A thing I've done over the last while is automate a lot of my sysadmin, using <code>systemd</code> timers to hit <a href="https://scala-cli.virtuslab.org/">scala-cli</a> scripts.</p>
   <p>I've built for myself a <a href="https://github.com/swaldman/mchange-sysadmin-scala/tree/main?tab=readme-ov-file">little framework</a> that is incredibly in need of documentation, but that lets me define scripts very flexibly and can provide great step-by-step information about what happens and anything that goes wrong in brightly colored HTML e-mails. I love it.</p>
   <p>Much of what I do is back things up to a cloud service using <a href="https://rclone.org/">rclone</a>.</p>
   <p>Last night I wrote a <a href="https://github.com/swaldman/mchange-sysadmin-scripts/blob/main/taskbin/backup-directory-as-tar">script</a> just to back up some directory. I ran into what I consider an age-old dilemma.</p>
   <p>Sometime early in my geekish career, I picked up the nugget that its best to keep important backups as straight <code>tar</code> files rather than <code>tgz</code> (or <code>tbz</code> or whatever), because if some bit gets corrupted, most of a straight <code>tar</code> will remain recoverable, while the compressed archive will just be toast.</p>
   <p>Is that right? Is it a real concern? I don't think I've ever experienced a corrupted archive, <code>tar</code> or <code>tgz</code>, but of course backup is a form of insurance, the whole point is to be resilient to tail risks.</p>
   <p>Still, searching the interwebs, I don't see a lot of people recommending uncompressed archives. Space is more of a bottleneck to me than CPU or time, so if the resilience advantage isn't significant, I'd compress.</p>
   <p>What do you think?</p>
   <hr>
   <p><strong>Update:</strong> Feel free to comment <a href="https://zirk.us/@interfluidity/112168423434044308">here</a></p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-03-27 @ <a href="https://tech.interfluidity.com/2024/03/27/tar-or-tgz/index.html" class="pubtime">10:55 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 18 Mar 2024 22:20:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/03/18/c3p0-and-loom/index.html</guid>
      <description>
        <![CDATA[I write a lot of open source software, but I've only ever really had one "hit". That makes me pretty sad, actually. I think some of what I've written is pretty great, and it's lonesome to be the sole user. Nevertheless, my one "hit" was c3p0, a JDBC Connection pool that, in its day, was extremely popular in Java web application stacks. Its day was a long time ago, though! c3p0 was first released on Sourceforge in 2001, and was very widely used from the mid aughts through the early 2010s. c3p0...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/03/18/c3p0-and-loom/index.html</link>
      <title>c3p0 and loom</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-c3p0-and-loom">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I write <a href="https://github.com/swaldman">a lot of open source software</a>, but I've only ever really had one "hit". That makes me pretty sad, actually. I think some of what I've written is pretty great, and it's lonesome to be the sole user.</p>
   <p>Nevertheless, my one "hit" was <a href="https://www.mchange.com/projects/c3p0/">c3p0</a>, a JDBC Connection pool that, in its day, was extremely popular in Java web application stacks.</p>
   <p>Its day was a long time ago, though! c3p0 was first released <a href="https://sourceforge.net/projects/c3p0/files/historical/OldFiles/">on Sourceforge in 2001</a>, and was very widely used from the mid aughts through the early 2010s.</p>
   <p>c3p0 is "mature" software, and I have just let it alone for years at a time. But I do continue to use it in all of my own database projects. Periodically I still put it (and myself) through intense bouts of maintenance.</p>
   <p>Actually, I have hated my years-long lapses (and myself) because github issues collect and I get snarky comments about abandonware and I feel like I am a Very Bad Maintainer. So the first order of business in my most recent "sprint" (isn't that what the kids call it?) was to move c3p0 from a very bespoke and manual <a href="https://ant.apache.org/">ant</a> build to something sleek and modern and automatic, so that maybe I wouldn't put off maintenance into years-delayed batches just because it is annoying to touch. c3p0's new <a href="https://mill-build.com/mill/Intro_to_Mill.html">mill build</a> works beautifully.</p>
   <p>The new build is much lighter, and the modern style of just publishing git repositories rather than source distributions and uploading releases to Sonatype is fast and easy. I think it'll really improve my maintenance promptness.</p>
   <p>c3p0's latest release, <a href="https://github.com/swaldman/c3p0/blob/0.10.x/RELEASE_NOTES-c3p0-0.10.0">0.10.0</a>, includes lots of enhancements and improvements. But a really fun thing was to integrate the very latest shiny new thing in Java — "Project Loom" <a href="https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html">virtual threads</a> — into this very old, highly concurrent library.</p>
   <p>c3p0 is very old school. It was initially written in Java 1.2 or 1.3. Java's standard concurrency utilities, the <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/package-summary.html"><code>java.util.concurrent</code></a> package, did not yet exist. There were no standard thread pools defined as <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/Executors.html"><code>ExecutorService</code> implementations</a>. So I <a href="https://github.com/swaldman/mchange-commons-java/blob/master/src/main/java/com/mchange/v2/async/ThreadPoolAsynchronousRunner.java">rolled my own</a>. c3p0 relies entirely on the JVM's built-in primitives — monitors and <code>synchronized</code> blocks, <code>wait()</code> and <code>notifyAll()</code> — to manage concurrency.</p>
   <p>Over the years, people have requested that c3p0 support asynchroneity via pluggable <code>Executor</code> instances, rather than just its own, hand-rolled thread pool. Users mostly seemed to want this so c3p0 could share existing application thread pools, avoiding the resource footprint of several c3p0-dedicated threads.</p>
   <p>A couple of weeks ago, I finally got around to implementing <a href="https://www.mchange.com/projects/c3p0/#configuring_threading">pluggable threading</a>. Sharing application thread pools is now supported. But I was mostly motivated by curiousity about how well this very old library would work with newfangled loom virtual threads.</p>
   <p>Great, it turns out!</p>
   <ul>
    <li>
     <p>I was concerned, since c3p0 relies so much on monitors and <code>synchronized</code> blocks, that virtual threads would be "pinned". Virtual threads are scheduled to, and deschedule from, "carrier" operating-system threads, but they cannot be descheduled while they hold a monitor. If a thread blocks while holding a monitor, it is described as "pinned", and that's a bad thing.</p>
     <p>But c3p0 is very careful not to perform potentially blocking operations while holding a monitor. Running tests with</p>
     <pre><code class="language-plaintext">-Djdk.tracePinnedThreads=full
</code></pre>
     <p>produced no stack traces of pinned threads, even under heavy load. This was gratifying.</p>
    </li>
    <li>
     <p>Using virtual threads rather than a thread pool can reduce contention for monitors. The thread pool itself is a site of contention, as information about which threads are pooled and which are available to run tasks constitute shared, mutable state. Replacing a thread pool with simply firing and forgetting a virtual thread for each asynchrnous task left nothing to contend for. <a href="https://github.com/swaldman/c3p0-loom"><code>c3p0-loom</code></a> includes two implementations of <a href="https://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p0/TaskRunnerFactory.html"><code>TaskRunnerFactory</code></a>:</p>
     <ul>
      <li><a href="https://github.com/swaldman/c3p0-loom/blob/main/src/com/mchange/v2/c3p0/loom/UninstrumentedVirtualThreadPerTaskTaskRunnerFactory.java"><code>com.mchange.v2.c3p0.loom.UninstrumentedVirtualThreadPerTaskTaskRunnerFactory</code></a></li>
      <li><a href="https://github.com/swaldman/c3p0-loom/blob/main/src/com/mchange/v2/c3p0/loom/VirtualThreadPerTaskExecutorTaskRunnerFactory.java"><code>com.mchange.v2.c3p0.loom.VirtualThreadPerTaskExecutorTaskRunnerFactory</code></a></li>
     </ul>
     <p><code>com.mchange.v2.c3p0.loom.VirtualThreadPerTaskExecutorTaskRunnerFactory</code> tracks the number of simultaneously active threads (which you can observe via JMX), which involve synchronizing on a monitor so some contention is still possible.</p>
     <p>But with <code>com.mchange.v2.c3p0.loom.UninstrumentedVirtualThreadPerTaskTaskRunnerFactory</code>, nothing at all is tracked and no monitors are acquired. Some analog of contention might result from managing shared state within the loom virtual-threading runtime, but all overt contention for thread-pool monitors is eliminated.</p>
    </li>
   </ul>
   <p>In practice, the thread pool is not c3p0's main site of monitor contention, however.</p>
   <p>c3p0's <a href="https://github.com/swaldman/c3p0/blob/0.10.x/src/com/mchange/v2/resourcepool/BasicResourcePool.java">resource pool</a> is its main site of monitor contention. For most applications, the contention overhead is negligible, when amortized over <code>Connection</code> operations. But in rare cases, when very large numbers of threads are hitting the pool, contention can become an issue. For now, the only way to address contention at the resource pool is to construct multiple <code>DataSource</code> instances and balance the load across them.</p>
   <p>In any case, c3p0 and loom work very well together!</p>
   <p>I still recommend that applications start by using c3p0's default, hand-rolled thread pool. It implements deadlock detection and recovery, and logs verbose debugging information about what happened. This makes it very easy to diagnose what kinds of operations have been hanging and consuming threads when something goes wrong.</p>
   <p>Under loom, applications that might otherwise have logged flamboyant thread-pool problems will proceed gracefully for some time. No matter what operations hang, new (virtual) threads will always be available for the next request, and the memory footprint of the frozen "fibers" (rather than full threads) should be modest.</p>
   <p>But if <code>Connection</code> acquisition, <code>Connection</code> destruction, or <code>Statement</code> destruction tasks do hang, eventually the pool will become exhausted and your application will hang or fail, despite the almost inexhaustible virtual threads.</p>
   <p>I'd start by using c3p0's default, battle-tested thread pool to detect these kinds of issues, and log them with its signature, much-hated <code>APPARENT DEADLOCK</code> messages if they occur. Those very ugly <code>APPARENT DEADLOCK</code> messages make it very easy to figure out just what is going wrong.</p>
   <p>But once your application is stable, then you might absolutely consider setting</p>
   <pre><code class="language-plaintext">c3p0.taskRunnerFactoryClassName=com.mchange.v2.c3p0.loom.UninstrumentedVirtualThreadPerTaskTaskRunnerFactory
</code></pre>
   <p>to reduce monitor contention and eliminate the overhead of a dedicated c3p0 thread pool.</p>
   <hr>
   <p><strong>Note:</strong></p>
   <p>The latest version of c3p0 (as of this writing) is <code>0.10.0</code>. Ordinarily, you'd hit that at Maven Central as</p>
   <ul>
    <li><code>com.mchange:c3p0:0.10.0</code></li>
   </ul>
   <p>But c3p0 is built under older Java version, to support old applications. (c3p0-0.10.0 supports JVMs as old as Java 7.)</p>
   <p>Loom support has to be built under Java 21+, so it is built separately. Just hit</p>
   <ul>
    <li><code>com.mchange:c3p0-loom:0.10.0</code></li>
   </ul>
   <p>at Maven Central. That will bring in the loom implementations, and the rest of c3p0 as a transitive dependency.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-03-18 @ <a href="https://tech.interfluidity.com/2024/03/18/c3p0-and-loom/index.html" class="pubtime">10:20 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Tue, 6 Feb 2024 17:50:00 -0500</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.html
      </guid>
      <description>
        <![CDATA[TL; DR: private declarations at a top-level scope of a package in Scala 3 are equivalent to a private[pkg] in other contexts. They are accessible to everything within the package and its subpackages, but nothing else. In Scala 2, to place a declaration at the "package" level, one would define a "package object": package top

package object pkg {
  private val Hush = 0
  val Loud = Int.MaxValue
}
 Given this one might refer to Loud from anywhere with fully-qualified name top.pkg.Loud import...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.html</link>
      <title>What does private mean at package level in Scala 3?</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR:</strong></p>
   <ul>
    <li><code>private</code> declarations at a top-level scope of a package in Scala 3 are equivalent to a <code>private[pkg]</code> in other contexts.</li>
    <li>They are accessible to everything within the package and its subpackages, but nothing else.</li>
   </ul>
   <hr>
   <p>In Scala 2, to place a declaration at the "package" level, one would define a "package object":</p>
   <pre><code class="language-scala">package top

package object pkg {
  private val Hush = 0
  val Loud = Int.MaxValue
}
</code></pre>
   <p>Given this</p>
   <ul>
    <li>one might refer to <code>Loud</code> from anywhere with fully-qualified name <code>top.pkg.Loud</code></li>
    <li><code>import top.pkg._</code> would pick it up</li>
    <li>inside the package <code>top.pkg</code> one coul refer to it simply as <code>Loud</code></li>
   </ul>
   <p>So far, so intuitive.</p>
   <p>In Scala 2, the semantics of <code>private val Loud</code> was also intuitive. A <code>package object</code> is just an <code>object</code>. A <code>private</code> member of an <code>object</code> is only visible within that <code>object</code>'s scope. While the Scala compiler does some magic to make nonprivate declarations more broadly visible, access to <code>private</code> members of the <code>package object</code> was restricted to the <code>object</code> in the ordinary way.</p>
   <p>But Scala 3 introduces "naked" top-level declarations, which I find I use constantly.</p>
   <p>So the declarations above might translate to:</p>
   <pre><code class="language-scala">package top.pkg

private val Hush = 0
val Loud = Int.MaxValue
</code></pre>
   <p>There is no <code>object</code> scope! So what does private even mean in this context.</p>
   <p>I could imagine four possibilities:</p>
   <ol>
    <li><code>private</code> to a virtual object scope constituted of all top-level declaraions</li>
    <li><code>private</code> to the top-level of the current compilation unit (i.e. file)</li>
    <li><code>private</code> to the current compilation unit (including nested scopes)</li>
    <li><code>private</code> to the package as a whole, i.e. the same as <code>private[pkg]</code></li>
   </ol>
   <p>Playing around, it looks like #4 is the winner.</p>
   <p>A <code>private</code> top-level declaration seems visible to any code in the package, even if defined in other files or directories. It is visible from anywhere in the <code>pkg</code> or subpackages of <code>pkg</code>.</p>
   <p>So now I know! And so do you!</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-02-06 @ <a href="https://tech.interfluidity.com/2024/02/06/what-does-private-mean-at-package-level-in-scala-3/index.html" class="pubtime">05:50 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sun, 4 Feb 2024 19:25:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/02/04/style-by-mail-in-feedletter/index.html</guid>
      <description>
        <![CDATA[If, my most patient dear reader, you followed the feedletter tutorial in the previous post, you saw that we styled feedletter newsletters by starting up a development webserver, which would serve up HTML for an example newsletter. This is still the best to get started styling your newsletters, because you can iteratively edit your untemplate, then just hit refresh in your web browser to very quickly play with your style and layout. However, there are differences between how web browsers and...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/02/04/style-by-mail-in-feedletter/index.html</link>
      <title>Style-by-mail in feedletter</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-style-feedletter-by-mail">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>If, my most patient dear reader, you followed the <em>feedletter</em> tutorial in the <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html">previous post</a>, you saw that we <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html#15-tweak-the-newsletter-styles">styled <em>feedletter</em> newsletters</a> by starting up a development webserver, which would serve up HTML for an example newsletter.</p>
   <p>This is still the best to get started styling your newsletters, because you can iteratively edit your <a href="https://github.com/swaldman/untemplate-doc#readme"><em>untemplate</em></a>, then just hit refresh in your web browser to very quickly play with your style and layout.</p>
   <p>However, there are differences between how web browsers and e-mail clients render HTML. Getting things to look great in your browser, both at wide and mobile-like narrow widths, is not enough to guarantee that things will look good as emails, on desktop or mobile e-mail clients.</p>
   <p>So, <em>feedletter v0.0.8</em> now supports styling by e-mail.</p>
   <p>Instead of firing up a webserver to preview your newsletter, if you give <code>feedletter-style</code> commands <code>--from</code> and <code>--to</code> arguments, an example e-mail will be sent. So you can now accurately preview and tweak exactly how newsletters will look in the mail clients they are actually sent to.</p>
   <p>To put that more specifically, just replace a command like...</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-single --subscribable-name lgm --port 45612
</code></pre>
   <p>with</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-single --subscribable-name lgm --from feedletter@mchange.com --to swaldman@mchange.com
</code></pre>
   <p>No development webserver will be spun up. Instead, a sample e-mail will be sent.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2024-02-04 @ <a href="https://tech.interfluidity.com/2024/02/04/style-by-mail-in-feedletter/index.html" class="pubtime">07:25 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 29 Jan 2024 10:30:00 -0500</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html</guid>
      <description>
        <![CDATA[I've been working for some time on a service to turn RSS feeds into e-mail newsletters, which I've called feedletter. The service watches any number of RSS feeds, can host a variety of subscription types for each feed, including one e-mail per article, daily or weekly digests, compendia of every n posts, etc. It can also notify other services, like Mastodon, of new posts. It lets you define, for each feed, a notion of when an item is stable and finalized, and takes great care never to e-mail or...]]>
      </description>
      <link>https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html</link>
      <title>Feedletter tutorial</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <atom:updated>2024-06-20T17:10:00Z</atom:updated>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-feedletter-tutorial">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I've been working for some time on a service to turn RSS feeds into e-mail newsletters, which I've called <a href="https://github.com/swaldman/feedletter"><em>feedletter</em></a>.</p>
   <p>The service watches any number of RSS feeds, can host a variety of subscription types for each feed, including one e-mail per article, daily or weekly digests, compendia of every <em>n</em> posts, etc. It can also notify other services, like Mastodon, of new posts. It lets you define, for each feed, a notion of when an item is stable and finalized, and takes great care never to e-mail or notify the same item more than once.</p>
   <div class="note">
    <p>Great minds think alike! After weeks of working on this, I discovered a <a href="https://github.com/garamond/feedletter">similar project with the very same name</a>.</p>
   </div>
   <p>Here I want to go through the process of setting up a <em>feedletter</em> instance, configuring it, tweaking or customizing the newsletter style, and running it.</p>
   <p>You can host <em>feedletter</em> on any Linux/UNIX-ish server. For completeness, I'm going to set up a server from scratch, from a fresh Digital Ocean droplet. But of course you can run <em>feedletter</em> along side other services on an existing machine, and skip a lot of these steps. <em>feedletter</em>'s main prerequisite is <a href="https://www.postgresql.org/"><em>postgres</em></a>, but we'll make use of <em>nginx</em>, <em>certbot</em>, <em>systemd</em> etc. as we go along.</p>
   <p>Much of the code and config we develop will be <a href="https://github.com/swaldman/tutorial-feedletter-local">memorialized in this github repo</a>.</p>
   <p>Let's go!</p>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#table-of-contents" id="table-of-contents" name="table-of-contents" class="anchorlink"></a>Table of contents</h2>
   <ol>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#1-set-up-a-server-with-a-dns-name">Set up a server with a DNS name</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#2-download-dependencies">Download dependencies</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#3-create-user-feedletter">Create user feedletter</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#4-install-feedletter">Install feedletter</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#5-prepare-the-postgres-database">Prepare the postgres database</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#6-set-up-feedletter-secretsproperties">Set up <code>feedletter-secrets.properties</code></a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#7-get-an-https-certificate">Get an https certificate</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#8-configure-nginx-to-forward-to-the-api">Configure <code>nginx</code> to forward to the API</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#9-initialize-the-feedletter-database">Initialize the <em>feedletter</em> database</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#10-perform-in-database-configuration">Perform in-database configuration</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#11-add-feeds-to-watch">Add feeds to watch</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#12-define-subscribables-to-feeds">Define "subscribables" to feeds</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#13-enable-feedletter-as-a-systemd-daemon">Enable <em>feedletter</em> as a <code>systemd</code> daemon</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#14-let-users-subscribe-to-your-subscribables">Let users subscribe to your subscribables!</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#15-tweak-the-newsletter-styles">Tweak the newsletter styles</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#16-advanced-customize-the-content">Advanced: Customize the content</a></li>
    <li><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#conclusion">Conclusion</a></li>
   </ol>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#1-set-up-a-server-with-a-dns-name" id="1-set-up-a-server-with-a-dns-name" name="1-set-up-a-server-with-a-dns-name" class="anchorlink"></a>1. Set up a server with a DNS name</h2>
   <p>We launch a "droplet" from <a href="https://www.digitalocean.com/">Digital Ocean</a>. You can use whatever Linux flavor you like. We'll pick the latest Ubuntu.</p>
   <img alt="Screenshot of Digital Ocean droplet setup" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/droplet-setup.png" style="width: 100%;">
   <p>And we go ahead and give it a name.</p>
   <img alt="Screenshot of FastMail DNS setup" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/dns-setup.png" style="width: 100%;">
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#2-download-dependencies" id="2-download-dependencies" name="2-download-dependencies" class="anchorlink"></a>2. Download dependencies</h2>
   <p>We login as root to our new droplet (however we've configured that), and download a bunch of stuff we'll need:</p>
   <pre><code class="language-plaintext"># apt install postgresql
# apt install openjdk-17-jre-headless
# apt install nginx
# apt install certbot
# apt install emacs
</code></pre>
   <p>While we're at it, let's upgrade everything on the server and restart.</p>
   <pre><code class="language-plaintext"># apt upgrade
# shutdown -r now
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#3-create-user-feedletter" id="3-create-user-feedletter" name="3-create-user-feedletter" class="anchorlink"></a>3. Create user feedletter</h2>
   <p>We'll create a passwordless user:</p>
   <pre><code class="language-plaintext"># adduser --disabled-password feedletter
info: Adding user `feedletter' ...
info: Selecting UID/GID from range 1000 to 59999 ...
info: Adding new group `feedletter' (1000) ...
info: Adding new user `feedletter' (1000) with group `feedletter (1000)' ...
info: Creating home directory `/home/feedletter' ...
info: Copying files from `/etc/skel' ...
Changing the user information for feedletter
Enter the new value, or press ENTER for the default
	Full Name []: 
	Room Number []: 
	Work Phone []: 
	Home Phone []: 
	Other []: 
Is the information correct? [Y/n] Y
info: Adding new user `feedletter' to supplemental / extra groups `users' ...
info: Adding user `feedletter' to group `users' ...

</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#4-install-feedletter" id="4-install-feedletter" name="4-install-feedletter" class="anchorlink"></a>4. Install feedletter</h2>
   <p>We'll become user <code>feedletter</code>, and download a <a href="https://github.com/swaldman/feedletter-install">local installation</a> of the <em>feedletter</em> app:</p>
   <pre><code class="language-plaintext"># su - feedletter
feedletter@feedletter-play:~$ git clone https://github.com/swaldman/feedletter-install.git feedletter-local
Cloning into 'feedletter-local'...
remote: Enumerating objects: 46, done.
remote: Counting objects: 100% (46/46), done.
remote: Compressing objects: 100% (28/28), done.
remote: Total 46 (delta 19), reused 38 (delta 11), pack-reused 0
Receiving objects: 100% (46/46), 8.75 KiB | 2.19 MiB/s, done.
Resolving deltas: 100% (19/19), done.
</code></pre>
   <div class="note">
    <p>The first time you run <em>feedletter</em>, it will take a couple of minutes to download its dependencies and compile stuff.</p>
   </div>
   <p>Although we can't meaningfully use it yet, let's give the feedletter applicaton a test run:</p>
   <pre><code class="language-plaintext">$ cd feedletter-local/
$ ./feedletter
...
...
Missing expected command (add-feed or alter-feed or daemon or db-dump or db-init or db-migrate or define-email-subscribable or define-mastodon-subscribable or drop-feed-and-subscribables or drop-subscribable or edit-subscribable or export-subscribers or list-config or list-feeds or list-items-excluded or list-subscribables or list-subscribers or list-untemplates or send-test-email or set-config or set-extra-params or set-untemplates or subscribe)!

Usage:
    feedletter [--secrets &lt;propsfile&gt;] add-feed
    feedletter [--secrets &lt;propsfile&gt;] alter-feed
    feedletter [--secrets &lt;propsfile&gt;] daemon
    feedletter [--secrets &lt;propsfile&gt;] db-dump
    feedletter [--secrets &lt;propsfile&gt;] db-init
    feedletter [--secrets &lt;propsfile&gt;] db-migrate
    feedletter [--secrets &lt;propsfile&gt;] define-email-subscribable
    feedletter [--secrets &lt;propsfile&gt;] define-mastodon-subscribable
    feedletter [--secrets &lt;propsfile&gt;] drop-feed-and-subscribables
    feedletter [--secrets &lt;propsfile&gt;] drop-subscribable
    feedletter [--secrets &lt;propsfile&gt;] edit-subscribable
    feedletter [--secrets &lt;propsfile&gt;] export-subscribers
    feedletter [--secrets &lt;propsfile&gt;] list-config
    feedletter [--secrets &lt;propsfile&gt;] list-feeds
    feedletter [--secrets &lt;propsfile&gt;] list-items-excluded
    feedletter [--secrets &lt;propsfile&gt;] list-subscribables
    feedletter [--secrets &lt;propsfile&gt;] list-subscribers
    feedletter [--secrets &lt;propsfile&gt;] list-untemplates
    feedletter [--secrets &lt;propsfile&gt;] send-test-email
    feedletter [--secrets &lt;propsfile&gt;] set-config
    feedletter [--secrets &lt;propsfile&gt;] set-extra-params
    feedletter [--secrets &lt;propsfile&gt;] set-untemplates
    feedletter [--secrets &lt;propsfile&gt;] subscribe

Manage e-mail subscriptions to and notifications from RSS feeds.

Options and flags:
    --help
        Display this help text.
    --secrets &lt;propsfile&gt;
        Path to properties file containing SMTP, postgres, c3p0, and other configuration details.

Environment Variables:
    FEEDLETTER_SECRETS=&lt;path&gt;
        Path to properties file containing SMTP, postgres, c3p0, and other configuration details.

Subcommands:
    add-feed
        Add a new feed from which mail or notifications may be generated.
    alter-feed
        Alter the timings of an already-defined feed.
    daemon
        Run daemon that watches feeds and sends notifications.
    db-dump
        Dump a backup of the database into a configured directory.
    db-init
        Initialize the database schema.
    db-migrate
        Migrate to the latest version of the database schema.
    define-email-subscribable
        Define a new email subscribable, a mailing lost to which users can subscribe.
    define-mastodon-subscribable
        Define a Mastodon subscribable, a source from which Mastodon feeds can receive automatic posts..
    drop-feed-and-subscribables
        Removes a feed, along with any subscribables defined upon it, from the service.
    drop-subscribable
        Removes a subscribable from the service.
    edit-subscribable
        Edit an already-defined subscribable.
    export-subscribers
        Dump subscriber information for a subscribable in CSV format.
    list-config
        List all configuration parameters.
    list-feeds
        List all feeds the application is watching.
    list-items-excluded
        List items excluded from generating notifications.
    list-subscribables
        List all subscribables.
    list-subscribers
        List all subscribers to a subscribable.
    list-untemplates
        List available untemplates.
    send-test-email
        Send a brief email to test your SMTP configuration.
    set-config
        Set configuration parameters.
    set-extra-params
        Add, update, or remove extra params you may define to affect rendering of notifications and messages.
    set-untemplates
        Update the untemplates used to render subscriptions.
    subscribe
        Subscribe to a subscribable.
1 targets failed
runMain subprocess failed
</code></pre>
   <p>All good!</p>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#5-prepare-the-postgres-database" id="5-prepare-the-postgres-database" name="5-prepare-the-postgres-database" class="anchorlink"></a>5. Prepare the postgres database</h2>
   <p>We'll <code>exit</code> back to root, become user postgres, and create a <code>feedletter</code> database that user <code>feedletter</code> can command:</p>
   <pre><code class="language-plaintext">$ exit
# su - postgres
$ createdb feedletter
$ createuser feedletter
$ psql
psql (15.5 (Ubuntu 15.5-0ubuntu0.23.10.1))
Type "help" for help.

postgres=# ALTER DATABASE feedletter OWNER TO feedletter;
ALTER DATABASE
postgres=# ALTER USER feedletter WITH PASSWORD 'not-actually-this';
ALTER ROLE
postgres=# \q
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#6-set-up-feedletter-secretsproperties" id="6-set-up-feedletter-secretsproperties" name="6-set-up-feedletter-secretsproperties" class="anchorlink"></a>6. Set up <code>feedletter-secrets.properties</code></h2>
   <p><em>feedletter</em> expects passwords and some other configuration information in a "secrets" file, in Java properties file format. You can place this anywhere you want (<em>feedletter</em> will look for a command-line argument or an environment variable), but by default it looks for <code>/etc/feedletter/feedletter-secrets.properties</code> or <code>/usr/etc/feedletter/feedletter-secrets.properties</code>.</p>
   <p>The file must belong to the user who will run <em>feedletter</em>, and it must have restrictive permission, readable and optionally writable by the user only.</p>
   <p>The contents of the file will be something like this:</p>
   <pre><code class="language-plaintext">feedletter.secret.salt=Arbitrary secret string
mail.smtp.user=not-actually-this
mail.smtp.password=not-actually-this
mail.smtp.host=not-actually-this
mail.smtp.port=465
#mail.smtp.port=587
mail.smtp.debug=false
c3p0.jdbcUrl=jdbc:postgresql://localhost:5432/feedletter
c3p0.user=feedletter
c3p0.password=not-actually-this
c3p0.testConnectionOnCheckout=true
</code></pre>
   <p>You’ll want to fill in your real SMTP authentication configuration. For information about this configuration, see <a href="https://github.com/swaldman/mailutil"><code>mailutil</code></a>.</p>
   <p>You can configure database access via any and all <a href="https://www.mchange.com/projects/c3p0/">c3p0 configuration properties</a>.</p>
   <p>So, let's do it! We exit from our last stint as user <code>postgres</code> first, then...</p>
   <pre><code class="language-plaintext">$ exit
# mkdir /etc/feedletter/
# emacs /etc/feedletter/feedletter-secrets.properties
</code></pre>
   <p>Here we pause to edit the file, see the template above...</p>
   <pre><code class="language-plaintext"># chown -R feedletter:feedletter /etc/feedletter
# chmod go-wrx /etc/feedletter/feedletter-secrets.properties
# ls -l /etc/feedletter/
total 8
-rw------- 1 feedletter feedletter 370 Jan 25 18:59 feedletter-secrets.properties
-rw-r--r-- 1 feedletter feedletter 372 Jan 25 18:57 feedletter-secrets.properties~
</code></pre>
   <p>Oops! <em>emacs</em> created a backup file with open permissions. Let's get rid of it so those secrets don't leak.</p>
   <pre><code class="language-plaintext"># rm /etc/feedletter/feedletter-secrets.properties~
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#7-get-an-https-certificate" id="7-get-an-https-certificate" name="7-get-an-https-certificate" class="anchorlink"></a>7. Get an https certificate</h2>
   <p>We gave our server the name <code>play.feedletter.org</code>.</p>
   <p><em>feedletter</em> offers a web API to manage subscriptions. We'll want that to use <code>https</code> rather than <code>http</code> for privacy's sake.</p>
   <p>Let's acquire a free <code>Let's Encrypt</code> certificate. I prefer to pause <code>nginx</code> to acquire and renew certificates, and use <code>certbot</code>'s standalone server to verify control of the domain, rather than have <code>certbot</code> mess around with my <code>nginx</code> config.</p>
   <p>So...</p>
   <pre><code class="language-plaintext"># systemctl stop nginx
# certbot certonly -d play.feedletter.org
Saving debug log to /var/log/letsencrypt/letsencrypt.log

How would you like to authenticate with the ACME CA?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: Spin up a temporary webserver (standalone)
2: Place files in webroot directory (webroot)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 1 
Requesting a certificate for play.feedletter.org

Successfully received certificate.
Certificate is saved at: /etc/letsencrypt/live/play.feedletter.org/fullchain.pem
Key is saved at:         /etc/letsencrypt/live/play.feedletter.org/privkey.pem
This certificate expires on 2024-04-24.
These files will be updated when the certificate renews.
Certbot has set up a scheduled task to automatically renew this certificate in the background.
We were unable to subscribe you the EFF mailing list because your e-mail address appears to be invalid. You can try again later by visiting https://act.eff.org.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
If you like Certbot, please consider supporting our work by:
 * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
 * Donating to EFF:                    https://eff.org/donate-le
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# systemctl start nginx
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#8-configure-nginx-to-forward-to-the-api" id="8-configure-nginx-to-forward-to-the-api" name="8-configure-nginx-to-forward-to-the-api" class="anchorlink"></a>8. Configure <code>nginx</code> to forward to the API</h2>
   <p>By default, <em>feedletter</em>'s API is bound to localhost on port 8024. If you need to, you can customize the web API port or interface, run <code>./feedletter set-config --help</code> to see how. We'll stick with that default.</p>
   <p>As root, we create and edit a file <code>/etc/nginx/conf.d/play.feedletter.org.conf</code>:</p>
   <pre><code class="language-plaintext"># emacs /etc/nginx/conf.d/play.feedletter.org.conf
</code></pre>
   <p>It should look like this:</p>
   <pre><code class="language-plaintext">    # play.feedletter.org
    server {
        listen 80;
        listen [::]:80;
        server_name play.feedletter.org;
        return 301 https://play.feedletter.org$request_uri;
    }
    server {
        listen       443 ssl http2;
        listen       [::]:443 ssl http2;
        server_name  play.feedletter.org;
        ssl_certificate /etc/letsencrypt/live/play.feedletter.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/play.feedletter.org/privkey.pem;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
            proxy_pass http://127.0.0.1:8024/;
            proxy_set_header  X-Real-IP $remote_addr;
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header  Host $http_host;
        }
    }
</code></pre>
   <p>Then we restart nginx:</p>
   <pre><code class="language-plaintext">root@feedletter-tutorial:/etc/nginx# systemctl restart nginx
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#9-initialize-the-feedletter-database" id="9-initialize-the-feedletter-database" name="9-initialize-the-feedletter-database" class="anchorlink"></a>9. Initialize the <em>feedletter</em> database</h2>
   <p>If we've set up the database and secrets file property, it should be as easy as</p>
   <pre><code class="language-plaintext"># su - feedletter
$ cd feedletter-local
$ ./feedletter db-init
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#10-perform-in-database-configuration" id="10-perform-in-database-configuration" name="10-perform-in-database-configuration" class="anchorlink"></a>10. Perform in-database configuration</h2>
   <p>Some of <em>feedletter</em>'s config sits in the secrets file, but much lives in the application's database itself.</p>
   <p>We can see <em>feedletter</em>'s current (default) configuration simply by running</p>
   <pre><code class="language-plaintext">$ ./feedletter list-config
+-----------------------+-------------------------------------------------------+
¦ Configuration Key     ¦ Value                                                 ¦
+-----------------------+-------------------------------------------------------+
¦ ConfirmHours          ¦ 48                                                    ¦
¦ DumpDbDir             ¦ throws com.mchange.feedletter.db.ConfigurationMissing ¦
¦ MailBatchDelaySeconds ¦ 600                                                   ¦
¦ MailBatchSize         ¦ 100                                                   ¦
¦ MailMaxRetries        ¦ 5                                                     ¦
¦ MastodonMaxRetries    ¦ 10                                                    ¦
¦ TimeZone              ¦ Etc/UTC                                               ¦
¦ WebApiBasePath        ¦ /                                                     ¦
¦ WebApiHostName        ¦ localhost                                             ¦
¦ WebApiPort            ¦ None                                                  ¦
¦ WebApiProtocol        ¦ http                                                  ¦
¦ WebDaemonInterface    ¦ 127.0.0.1                                             ¦
¦ WebDaemonPort         ¦ 8024                                                  ¦
+-----------------------+-------------------------------------------------------+
</code></pre>
   <p>The <code>WebApi*</code> keys are used to construct URLs that point back to the application (for creating, confirming, and removing subscriptions).</p>
   <ul>
    <li>We won't want these to be <code>localhost</code> URLs, so we'll modify <code>WebApiHostName</code></li>
    <li>We'll want <code>WebApiProtocol</code> to be <code>https</code> rather than <code>http</code></li>
    <li>I'd prefer the timezone (used to format dates, and to decide the boundries of days and weeks for daily and weekly roundups) be <code>America/New_York</code></li>
   </ul>
   <p>Let's checkout the <code>set-config</code> command:</p>
   <pre><code class="language-plaintext">$ ./feedletter set-config --help
[49/49] runMain 
Usage: feedletter set-config [--confirm-hours &lt;hours&gt;] [--dump-db-dir &lt;directory&gt;] [--mail-batch-size &lt;size&gt;] [--mail-batch-delay-seconds &lt;seconds&gt;] [--mail-max-retries &lt;times&gt;] [--time-zone &lt;zone&gt;] [--web-daemon-interface &lt;interface&gt;] [--web-daemon-port &lt;port&gt;] [--web-api-protocol &lt;http|https&gt;] [--web-api-host-name &lt;hostname&gt;] [--web-api-base-path &lt;path&gt;] [--web-api-port &lt;port&gt;]

Set configuration parameters.

Options and flags:
    --help
        Display this help text.
    --confirm-hours &lt;hours&gt;
        Number of hours to await a user confiration before automatically unsubscribing.
    --dump-db-dir &lt;directory&gt;
        Directory in which to create dump files prior to db migrations.
    --mail-batch-size &lt;size&gt;
        Number of e-mails to send in each 'batch' (to avoid overwhelming the SMTP server).
    --mail-batch-delay-seconds &lt;seconds&gt;
        Time between batches of e-mails are to be sent.
    --mail-max-retries &lt;times&gt;
        Number of times e-mail sends (defined as successful submission to an SMTP service) will be attempted before giving up.
    --time-zone &lt;zone&gt;
        ID of the time zone which subscriptions based on time periods should use.
    --web-daemon-interface &lt;interface&gt;
        The local interface to which the web-api daemon should bind.
    --web-daemon-port &lt;port&gt;
        The local port to which the web-api daemon should bind.
    --web-api-protocol &lt;http|https&gt;
        The protocol (http or https) by which the web api is served.
    --web-api-host-name &lt;hostname&gt;
        The host from which the web api is served.
    --web-api-base-path &lt;path&gt;
        The URL base location upon which the web api is served (usually just '/').
    --web-api-port &lt;port&gt;
        The port from which the web api is served (usually blank, protocol determined).
1 targets failed
runMain subprocess failed
</code></pre>
   <p>So, we can do all of this configuring in a single simple command:</p>
   <pre><code class="language-plaintext">$ ./feedletter set-config --web-api-protocol https --web-api-host-name play.feedletter.org --time-zone America/New_York
[49/49] runMain 
+-----------------------+-------------------------------------------------------+
¦ Configuration Key     ¦ Value                                                 ¦
+-----------------------+-------------------------------------------------------+
¦ ConfirmHours          ¦ 48                                                    ¦
¦ DumpDbDir             ¦ throws com.mchange.feedletter.db.ConfigurationMissing ¦
¦ MailBatchDelaySeconds ¦ 600                                                   ¦
¦ MailBatchSize         ¦ 100                                                   ¦
¦ MailMaxRetries        ¦ 5                                                     ¦
¦ MastodonMaxRetries    ¦ 10                                                    ¦
¦ TimeZone              ¦ America/New_York                                      ¦
¦ WebApiBasePath        ¦ /                                                     ¦
¦ WebApiHostName        ¦ play.feedletter.org                                   ¦
¦ WebApiPort            ¦ None                                                  ¦
¦ WebApiProtocol        ¦ https                                                 ¦
¦ WebDaemonInterface    ¦ 127.0.0.1                                             ¦
¦ WebDaemonPort         ¦ 8024                                                  ¦
+-----------------------+-------------------------------------------------------+
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#11-add-feeds-to-watch" id="11-add-feeds-to-watch" name="11-add-feeds-to-watch" class="anchorlink"></a>11. Add feeds to watch</h2>
   <p>Let's check out the <code>add-feed</code> command:</p>
   <pre><code class="language-plaintext">$ ./feedletter add-feed --help
[49/49] runMain 
Usage:
    feedletter add-feed --ping &lt;feed-url&gt;
    feedletter add-feed [--min-delay-minutes &lt;minutes&gt;] [--await-stabilization-minutes &lt;minutes&gt;] [--max-delay-minutes &lt;minutes&gt;] [--recheck-every-minutes &lt;minutes&gt;] &lt;feed-url&gt;

Add a new feed from which mail or notifications may be generated.

Options and flags:
    --help
        Display this help text.
    --ping
        Check feed as often as possible, notify as soon as possible, regardless of (in)stability.
    --min-delay-minutes &lt;minutes&gt;
        Minimum wait (in miunutes) before a newly encountered item can be notified.
    --await-stabilization-minutes &lt;minutes&gt;
        Period (in minutes) over which an item should not have changed before it is considered stable and can be notified.
    --max-delay-minutes &lt;minutes&gt;
        Notwithstanding other settings, maximum period past which an item should be notified, regardless of its stability.
    --recheck-every-minutes &lt;minutes&gt;
        Delay between refreshes of feeds, and redetermining items' availability for notification.
</code></pre>
   <p>When we add feeds, we also define how "finalization" of feed items will be defined. Items will never be notified or considered final prior to <code>min-delay-minutes</code>. Even after this period has passed, they will not be considered final unless they have been stable (the item has been unchanged) for at least <code>await-stabilization-minutes</code>, or until <code>max-delay-minutes</code> has passed. (<code>max-delay-minutes</code> is a failsafe, in case feed items never stabilize due to a changing timestamp or such.)</p>
   <p>Feeds will be polled every <code>recheck-every-minutes</code> minutes.</p>
   <p>If <code>--ping</code> (and only <code>--ping</code>) is set, <code>feedletter</code> will poll at its maximum frequency and notify immediately, irrespective of the item's (in)stability.</p>
   <p>All of the (non-ping) values have defaults. Let's have our application watch the blog <em>Lawyers, Guns, and Money</em>, whose feed is at <a href="https://www.lawyersgunsmoneyblog.com/feed"><code>https://www.lawyersgunsmoneyblog.com/feed</code></a>:</p>
   <pre><code class="language-plaintext">$ ./feedletter add-feed  https://www.lawyersgunsmoneyblog.com/feed
[49/49] runMain 
+---------+-------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
¦ Feed ID ¦ Feed URL                                  ¦ Min Delay Mins ¦ Await Stabilization Mins ¦ Max Delay Mins ¦ Recheck Every Mins ¦ Added                       ¦ Last Assigned               ¦
+---------+-------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
¦ 1       ¦ https://www.lawyersgunsmoneyblog.com/feed ¦ 30             ¦ 15                       ¦ 180            ¦ 10                 ¦ 2024-01-27T17:03:47.452533Z ¦ 2024-01-27T17:03:47.452533Z ¦
+---------+-------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
</code></pre>
   <p>So, by default, this feed will wait at least 30 minutes before notifying, and require a post to have been stable for at least 15 minutes. After 180 minutes, it will be considered final no matter what. It will be checked every approximately 10 minutes.</p>
   <p>If you don't like these values, you can change them any time with the <code>./feedletter alter-feed</code> command.</p>
   <div class="note">
    I am not republishing these blogs without permission. That would be icky. I'm using these feeds for demonstration purposes. I'll be their only e-mail subscriber.
    <p>By the time you read this tutorial, <code>play.feedletter.org</code> will have been sadly retired.</p>
   </div>
   <p>Let's add another feed to watch, Atrios' <i>Eschaton</i> blog, whose feed URL is <a href="https://www.eschatonblog.com/feeds/posts/default?alt=rss"><code>https://www.eschatonblog.com/feeds/posts/default?alt=rss</code></a>. I'm just going to stick with the default timings for now:</p>
   <pre><code class="language-plaintext">$ ./feedletter add-feed https://www.eschatonblog.com/feeds/posts/default?alt=rss

[49/49] runMain 
+---------+----------------------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
¦ Feed ID ¦ Feed URL                                                 ¦ Min Delay Mins ¦ Await Stabilization Mins ¦ Max Delay Mins ¦ Recheck Every Mins ¦ Added                       ¦ Last Assigned               ¦
+---------+----------------------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
¦ 1       ¦ https://www.lawyersgunsmoneyblog.com/feed                ¦ 30             ¦ 15                       ¦ 180            ¦ 10                 ¦ 2024-01-27T17:03:47.452533Z ¦ 2024-01-27T17:03:47.452533Z ¦
¦ 2       ¦ https://www.eschatonblog.com/feeds/posts/default?alt=rss ¦ 30             ¦ 15                       ¦ 180            ¦ 10                 ¦ 2024-01-27T17:04:55.092686Z ¦ 2024-01-27T17:04:55.092686Z ¦
+---------+----------------------------------------------------------+----------------+--------------------------+----------------+--------------------+-----------------------------+-----------------------------+
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#12-define-subscribables-to-feeds" id="12-define-subscribables-to-feeds" name="12-define-subscribables-to-feeds" class="anchorlink"></a>12. Define "subscribables" to feeds</h2>
   <p>Once the application is watching feeds, we can define various kinds of "subscribables" to them.</p>
   <p>A subscribable is a subscription type. We use the made-up word to distinguish <em>a thing you can subscribe to</em> (a "subscribable") from an individual's subscription.</p>
   <p>E-mail subscribables are by default one-post-per-newsletter, but they can also be defined as daily digests, weekly compendia, or bundles of every <em>n</em> posts, for an <em>n</em> you choose.</p>
   <p>Let's take a look at the <code>./feedletter define-email-subscribable</code> command:</p>
   <pre><code class="language-plaintext">$ ./feedletter define-email-subscribable --help
[49/49] runMain 
Usage: feedletter define-email-subscribable --feed-id &lt;feed-id&gt; --name &lt;name&gt; --from &lt;e-mail address&gt; [--reply-to &lt;e-mail address&gt;] [--compose-untemplate &lt;fully-qualified-name&gt;] [--confirm-untemplate &lt;fully-qualified-name&gt;] [--removal-notification-untemplate &lt;fully-qualified-name&gt;] [--status-change-untemplate &lt;fully-qualified-name&gt;] [--each | --daily [--time-zone &lt;id&gt;] | --weekly [--time-zone &lt;id&gt;] | --num-items-per-letter &lt;num&gt;] [--extra-param &lt;key:value&gt;]...

Define a new email subscribable, a mailing lost to which users can subscribe.

Options and flags:
    --help
        Display this help text.
    --feed-id &lt;feed-id&gt;
        The ID of the RSS feed to be watched.
    --name &lt;name&gt;
        A name for the new subscribable.
    --from &lt;e-mail address&gt;
        The email address from which emails should be sent.
    --reply-to &lt;e-mail address&gt;
        E-mail address to which recipients should reply (if different from the 'from' address).
    --compose-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that will render notifications.
    --confirm-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that will ask for e-mail confirmations.
    --removal-notification-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that be mailed to users upon unsubscription.
    --status-change-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that will render results of GET request to the API.
    --each
        E-mail each item.
    --daily
        E-mail a compilation, once a day.
    --time-zone &lt;id&gt;
        ID of a time zone for determining the beginning and end of the period.
    --weekly
        E-mail a compilation, once a week.
    --num-items-per-letter &lt;num&gt;
        E-mail every fixed number of posts.
    --extra-param &lt;key:value&gt;
        An extra parameter your notification renderers might use.
1 targets failed
runMain subprocess failed
</code></pre>
   <p>The only <em>required</em> elements are <code>--feed-id &lt;id&gt;</code>, <code>--name &lt;a name you choose name&gt;</code>, and <code>--from &lt;e-mail address&gt;</code>. If you set only these, <code>feedletter</code> will use its default style (you'll not have set any custom "untemplates"), it will have no "reply to" address distinct from the "from" address you've given, and it will be of type <code>--each</code>, that is one e-mail per post.</p>
   <p>If you set the flag <code>--daily</code> you'll send daily digests. If you set the flag <code>--weekly</code>, then weekly compendia. If you set <code>--num-items-per-letter &lt;num&gt;</code>, you'll send an e-mail every <em>num</em> posts.</p>
   <p>More rarely, you can set any number of <code>--extra-param</code> items. These can be passed through to custom <a href="https://github.com/swaldman/untemplate-doc#readme">untemplates</a>, to configure your own styles and themes as you see fit.</p>
   <p><em>Lawyers, Guns, and Money</em> tends to post long-ish essays, so the default <code>--each</code> type is probably appropriate.</p>
   <p>Let's recall (scroll up!) that when we added that feed, it was given ID 1. So let's create a subscribable:</p>
   <pre><code class="language-plaintext">$ ./feedletter define-email-subscribable --name lgm --feed-id 1 --from feedletter@feedletter.org
[49/49] runMain 

-*-*-*-

Subscribable Name:    lgm
Feed ID:              1
Subscription Manager: {
    "composeUntemplateName": "com.mchange.feedletter.default.email.composeUniversal_html",
    "statusChangeUntemplateName": "com.mchange.feedletter.default.email.statusChange_html",
    "confirmUntemplateName": "com.mchange.feedletter.default.email.confirm_html",
    "from": {
        "addressPart": "feedletter@feedletter.org",
        "type": "Email",
        "version": 1
    },
    "removalNotificationUntemplateName": "com.mchange.feedletter.default.email.removalNotification_html",
    "extraParams": {},
    "type": "Email.Each",
    "version": 1
}
An email subscribable to feed with ID '1' named 'lgm' has been created.
</code></pre>
   <p>We can create more than one subscribable to a single feed! Let's also make a daily roundup option for <em>Lawyers, Guns, and Money</em>:</p>
   <pre><code class="language-plaintext">$ ./feedletter define-email-subscribable --name lgm-daily --feed-id 1 --from feedletter@feedletter.org --daily
[49/49] runMain 

-*-*-*-

Subscribable Name:    lgm-daily
Feed ID:              1
Subscription Manager: {
    "composeUntemplateName": "com.mchange.feedletter.default.email.composeUniversal_html",
    "statusChangeUntemplateName": "com.mchange.feedletter.default.email.statusChange_html",
    "confirmUntemplateName": "com.mchange.feedletter.default.email.confirm_html",
    "from": {
        "addressPart": "feedletter@feedletter.org",
        "type": "Email",
        "version": 1
    },
    "removalNotificationUntemplateName": "com.mchange.feedletter.default.email.removalNotification_html",
    "extraParams": {},
    "type": "Email.Daily",
    "version": 1
}
An email subscribable to feed with ID '1' named 'lgm-daily' has been created.
</code></pre>
   <p>Atrios' <i>Eschaton</i> blog publishes frequent, sometimes very short posts. Let's create a subscribable that sends out groups of three. Recall from above that its feed ID was 2. So...</p>
   <pre><code class="language-plaintext">$ ./feedletter define-email-subscribable --name atrios-three --feed-id 2 --from feedletter@feedletter.org --num-items-per-letter 3
[49/49] runMain 

-*-*-*-

Subscribable Name:    atrios-three
Feed ID:              2
Subscription Manager: {
    "composeUntemplateName": "com.mchange.feedletter.default.email.composeUniversal_html",
    "statusChangeUntemplateName": "com.mchange.feedletter.default.email.statusChange_html",
    "numItemsPerLetter": 3,
    "confirmUntemplateName": "com.mchange.feedletter.default.email.confirm_html",
    "from": {
        "addressPart": "feedletter@feedletter.org",
        "type": "Email",
        "version": 1
    },
    "removalNotificationUntemplateName": "com.mchange.feedletter.default.email.removalNotification_html",
    "extraParams": {},
    "type": "Email.Fixed",
    "version": 1
}
An email subscribable to feed with ID '2' named 'atrios-three' has been created.
</code></pre>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#13-enable-feedletter-as-a-systemd-daemon" id="13-enable-feedletter-as-a-systemd-daemon" name="13-enable-feedletter-as-a-systemd-daemon" class="anchorlink"></a>13. Enable <em>feedletter</em> as a <code>systemd</code> daemon.</h2>
   <p>Let’s define a <code>feedletter.service</code> file right here in our installation directory, just because it seems convenient. We edit <code>/home/feedletter/feedletter-local/feedletter.service</code>:</p>
   <pre><code class="language-plaintext">[Unit]
Description=Feedletter RSS-To-Mail-Etc Service
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/home/feedletter/feedletter-local/feedletter.pid
User=feedletter
Group=feedletter
WorkingDirectory=/home/feedletter/feedletter-local

ExecStart=/home/feedletter/feedletter-local/feedletter daemon --fork

TimeoutStopSec=90
Restart=on-failure
RestartSec=10s
StandardError=journal
StandardOutput=journal
StandardInput=null

[Install]
WantedBy=multi-user.target
</code></pre>
   <p>Now we setup the symlinks that would make this a permanent <code>systemd</code> service. First we <code>exit</code> to get back to root, then…</p>
   <pre><code class="language-plaintext">$ exit
logout
# cd /etc/systemd/system/
# ln -s /home/feedletter/feedletter-local/feedletter.service 
# systemctl enable feedletter
Created symlink /etc/systemd/system/multi-user.target.wants/feedletter.service → /home/feedletter/feedletter-local/feedletter.service.
</code></pre>
   <p>Now let's actually start our new service, and check its logs:</p>
   <pre><code class="language-plaintext"># systemctl start feedletter
# journalctl -u feedletter --follow
Jan 27 17:11:53 feedletter-play systemd[1]: Starting feedletter.service - Feedletter RSS-To-Mail-Etc Service...
Jan 27 17:11:59 feedletter-play systemd[1]: feedletter.service: Can't open PID file /home/feedletter/feedletter-local/feedletter.pid (yet?) after start: No such file or directory
Jan 27 17:12:02 feedletter-play feedletter[37405]: Jan 27, 2024 5:12:02 PM com.mchange.v2.log.MLog
Jan 27 17:12:02 feedletter-play feedletter[37405]: INFO: MLog clients using java 1.4+ standard logging.
Jan 27 17:12:06 feedletter-play systemd[1]: Started feedletter.service - Feedletter RSS-To-Mail-Etc Service.
Jan 27 17:12:07 feedletter-play feedletter[37405]: 2024-01-27@17:12:07 [INFO] [com.mchange.feedletter.Daemon] Spawning daemon fibers.
Jan 27 17:12:07 feedletter-play feedletter[37405]: 2024-01-27@17:12:07 [INFO] [com.mchange.feedletter.Daemon] Starting web API service on interface '127.0.0.1', port 8024.
</code></pre>
   <p>It all looks good!</p>
   <div class="note">
    <p>Occasionally I've had problems at first seeing log entries using <code>journalctl</code>. I'd see messages like</p>
    <pre><code class="language-plaintext">No journal files were found.
-- No entries --
</code></pre>
    <p>The <a href="https://unix.stackexchange.com/questions/288243/why-does-journalctl-say-no-entries">fix</a> is to run</p>
    <pre><code class="language-plaintext"># systemctl restart systemd-journald.service
</code></pre>
    <p>and then to restart the feedletter service.</p>
   </div>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#14-let-users-subscribe-to-your-subscribables" id="14-let-users-subscribe-to-your-subscribables" name="14-let-users-subscribe-to-your-subscribables" class="anchorlink"></a>14. Let users subscribe to your subscribables!</h2>
   <p>The feedletter services has a simple API that, for now, uses (abuses) the HTTP GET method. Here’s an example of an HTML form that would allow subscription to our new newsletter:</p>
   <pre><code class="language-html">    &lt;form id="subscribe-form" action="https://play.feedletter.org/v0/subscription/create" method="GET"&gt;
      &lt;input type="hidden" name="subscribableName" value="lgm"&gt;
      E-mail: &lt;input type="text" name="addressPart"&gt;&lt;br&gt;
      Display Name: &lt;input type="text" name="displayNamePart"&gt; (Optional)&lt;br&gt;
      &lt;input name="main-submit" value="Subscribe!" type="submit"&gt;
    &lt;/form&gt;
</code></pre>
   <div class="note" <p>
    As of <em>feedletter v0.0.8</em>, you can use <code>method="POST"</code> in subscribe forms.
    <p></p>
    <p>Using <code>method="GET"</code> (and therefore also simulating form submission by pasting a URL) remain supported as well.</p>
   </div>
   <p>(You can see live examples of <em>feedletter</em> subscription forms on the <a href="https://tech.interfluidity.com/subscribe.html">subscribe page</a> of this site!)</p>
   <p>We will fake hitting the form above just by pasting the following URL into our browser:</p>
   <pre><code class="language-plaintext">https://play.feedletter.org/v0/subscription/create?subscribableName=lgm&amp;addressPart=swaldman@mchange.com&amp;displayNamePart=Steve
</code></pre>
   <p>We are immediately informed of our success: <img alt="Screenshot of 'Subscription Created' page" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/subscription-created.png" style="width: 100%;"> And, you've got mail!</p>
   <img alt="Screenshot of e-mail requesting subscription confirmation" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/please-confirm.png" style="width: 100%;">
   <p>We hit the confirm link and we're done:</p>
   <img alt="Screenshot of 'Subscription confirmed!' page" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/confirmed.png" style="width: 100%;">
   <p>We've made two more subscribables we'll want to test, whose let's-fake-a-form URLs will be</p>
   <pre><code class="language-plaintext">https://play.feedletter.org/v0/subscription/create?subscribableName=lgm-daily&amp;addressPart=swaldman@mchange.com&amp;displayNamePart=Steve
https://play.feedletter.org/v0/subscription/create?subscribableName=atrios-three&amp;addressPart=swaldman@mchange.com&amp;displayNamePart=Steve
</code></pre>
   <p>We go through the same (faked) submit then confirm steps for each of these.</p>
   <p>And now we're subscribed! We just have to wait for the mail to roll in.</p>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#15-tweak-the-newsletter-styles" id="15-tweak-the-newsletter-styles" name="15-tweak-the-newsletter-styles" class="anchorlink"></a>15. Tweak the newsletter styles</h2>
   <p>But what will this mail actually look like? We can sneak a peek.</p>
   <p>We will want to have two terminal windows open, logged into our feedletter host. In one terminal, we will run a single-page webserver that simulates the HTML e-mails we will receive.</p>
   <p>In the second terminal, we can edit an <a href="https://github.com/swaldman/untemplate-doc#readme">untemplate</a>, until we have the look we want. Then we can update our subscribable to use our perfected untemplate to generate its mails.</p>
   <p>Let's get the simulation server running. It's easy to run, but we won't be able to see what it's serving if we don't open up a port on our server to serve it through. We'll use port 45612. Making that available on Ubuntu is just</p>
   <pre><code class="language-plaintext"># ufw allow 45612
Rules updated
Rules updated (v6)
</code></pre>
   <p>Now we just become user <code>feedletter</code> again, and check out the <code>feedletter-style</code> command.</p>
   <pre><code class="language-plaintext">$ ./feedletter-style --help
[50/50] runMainBackground 
Watching for changes to 14 paths and 9 other values... (Enter to re-run, Ctrl-C to exit)
Usage:
    feedletter-style [--secrets &lt;propsfile&gt;] compose-multiple
    feedletter-style [--secrets &lt;propsfile&gt;] compose-single
    feedletter-style [--secrets &lt;propsfile&gt;] confirm
    feedletter-style [--secrets &lt;propsfile&gt;] removal-notification
    feedletter-style [--secrets &lt;propsfile&gt;] status-change

Iteratively edit and review the untemplates through which your posts will be notified.

Options and flags:
    --help
        Display this help text.
    --secrets &lt;propsfile&gt;
        Path to properties file containing SMTP, postgres, c3p0, and other configuration details.

Environment Variables:
    FEEDLETTER_SECRETS=&lt;path&gt;
        Path to properties file containing SMTP, postgres, c3p0, and other configuration details.

Subcommands:
    compose-multiple
        Style a template that composes a multiple items.
    compose-single
        Style a template that composes a single item.
    confirm
        Style a template that asks users to confirm a subscription.
    removal-notification
        Style a template that notifies users that they have subscribed.
    status-change
        Style a template that informs users of a subscription status change.
</code></pre>
   <p>You can style the infrastructure — confirmation and removal e-mails, web pages that inform users that their subscription status has changed.</p>
   <p>But mostly you'll want to style the compose untemplates. For subscribables that mail just one e-mail at a time, you'll want <code>compose-single</code>. For subscribables that will pull together multple posts into a single mail, you'll want <code>compose-multiple</code>.</p>
   <div class="note">
    <p>The <code>./feedletter-style</code> command never terminates. You have to type <code>&lt;ctrl-c&gt;</code> to quit out.</p>
    <p>This is because it's designed to be terminated and restarted each time you change underlying templates or css. A <a href="https://mill-build.com/"><code>mill</code></a> process runs perpetually, watching for chages and restarting whatever command you last tried.</p>
   </div>
   <p>Let's try <code>compose-single</code>. Our subscribable <code>lgm</code> sends just one post per-email. Let's try to style it.</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-single --help
[50/50] runMainBackground 
Watching for changes to 14 paths and 9 other values... (Enter to re-run, Ctrl-C to exit)
Usage: feedletter-style compose-single --subscribable-name &lt;name&gt; [--untemplate-name &lt;fully-qualified-name&gt;] [--first | --random | --guid &lt;string&gt;] [--e-mail &lt;address&gt; [--display-name &lt;name&gt;] | --sms &lt;number&gt; | --masto-instance-name &lt;name&gt; --masto-instance-url &lt;url&gt;] [--within-type-id &lt;string&gt;] [--interface &lt;interface&gt;] [--port &lt;num&gt;]

Style a template that composes a single item.

Options and flags:
    --help
        Display this help text.
    --subscribable-name &lt;name&gt;
        The name of an already defined subscribable that will use this template.
    --untemplate-name &lt;fully-qualified-name&gt;
        Fully name of an untemplate to style.
    --first
        Display first item in feed.
    --random
        Choose random item from feed to display
    --guid &lt;string&gt;
        Choose guid of item to display.
    --e-mail &lt;address&gt;
        The e-mail address to subscribe.
    --display-name &lt;name&gt;
        A display name to wrap around the e-mail address.
    --sms &lt;number&gt;
        The number to which messages should be sent.
    --masto-instance-name &lt;name&gt;
        A private name for this Mastodon instance.
    --masto-instance-url &lt;url&gt;
        The URL of the Mastodon instance
    --within-type-id &lt;string&gt;
        A subscription-type specific sample within-type-id for the notification.
    --interface &lt;interface&gt;
        The interface on which to bind an HTTP server, which will serve the rendered untemplate.
    --port &lt;num&gt;
        The port on which to run a HTTP server, which will serve the rendered untemplate.
</code></pre>
   <p>There's a lot here, but note that the only <em>required</em> option is <code>--subscribable-name</code>. We've opened port 45612, so we'll also want to hit the <code>--port</code> option. Let's try running the <code>./feedletter-style compose-single</code> command for subscribable <code>lgm</code>:</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-single --subscribable-name lgm --port 45612
[50/50] runMainBackground 
Watching for changes to 14 paths and 9 other values... (Enter to re-run, Ctrl-C to exit)
Starting single-page webserver on interface '0.0.0.0', port 45612...
</code></pre>
   <p>Great. Now let's see how our newsletter looks, with its HTML served on <code>http://play.feedletter.org:45612/</code>. Not so good!</p>
   <img alt="Screenshot of web-served lgm newsletter via ./feedletter-style compose-single, with a badly formatted image" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/scotus-disqualify-bad.png" style="width: 100%;">
   <p>(<strong>Update:</strong> As of <em>feedletter v0.0.8</em> you can also <a href="https://tech.interfluidity.com/2024/02/04/style-by-mail-in-feedletter/index.html">style newsletters by e-mail</a>, in addition to hitting a development webserver with a browser.)</p>
   <div class="note">
    <p>By default, we just pulled the first item (and most recent, since blogs are usually reverse-chronological) from the feed. We can also pull a random item off the feed to view with <code>--random</code>, or a particular item identified by its <code>&lt;guid&gt;</code> element in the feed with <code>--guid &lt;guid&gt;</code>.</p>
   </div>
   <p>Let's see how we can restyle this post to make it a bit better.</p>
   <p>We have been using the built-in default untemplate to compose our items. We cannot modify that.</p>
   <p>But our feedletter installation directory contains a copy of this untemplate that we can deploy and tweak.</p>
   <p>To do so, we'll have to create a folder for this file under <code>untemplate</code>. We’ll call it <code>tutorial</code>. Then...</p>
   <pre><code class="language-plaintext">$ mkdir untemplate/tutorial/
$ cp sample/defaultCompose.html.untemplate untemplate/tutorial/lgmCompose.html.untemplate
</code></pre>
   <p><code>feedletter</code> now has access to this untemplate, under a name you can find by calling <code>./feedletter list-untemplates</code>:</p>
   <pre><code class="language-plaintext">$ ./feedletter list-untemplates
[42/49] compile 
[info] compiling 2 Scala sources to /home/feedletter/feedletter-local/out/compile.dest/classes ...
[info] done compiling
[49/49] runMain 
+---------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
¦ Untemplate, Fully Qualified Name                              ¦ Input Type                                                                                          ¦
+---------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
¦ com.mchange.feedletter.default.email.composeUniversal_html    ¦ com.mchange.feedletter.style.ComposeInfo.Universal                                                  ¦
¦ com.mchange.feedletter.default.email.confirm_html             ¦ com.mchange.feedletter.style.ConfirmInfo                                                            ¦
¦ com.mchange.feedletter.default.email.item_html                ¦ scala.Tuple2[com.mchange.feedletter.style.ComposeInfo.Universal,com.mchange.feedletter.ItemContent] ¦
¦ com.mchange.feedletter.default.email.removalNotification_html ¦ com.mchange.feedletter.style.RemovalNotificationInfo                                                ¦
¦ com.mchange.feedletter.default.email.statusChange_html        ¦ com.mchange.feedletter.style.StatusChangeInfo                                                       ¦
¦ com.mchange.feedletter.default.email.style_css                ¦ scala.collection.immutable.Map[java.lang.String,scala.Any]                                          ¦
¦ tutorial.lgmCompose_html                                      ¦ com.mchange.feedletter.style.ComposeInfo.Universal                                                  ¦
+---------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
</code></pre>
   <p>Now we can ask <code>feedletter-style</code> to show us what this post would look like using our "new" untemplate to render it:</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-single --subscribable-name lgm --untemplate-name tutorial.lgmCompose_html --port 45612
[50/50] runMainBackground 
Watching for changes to 14 paths and 9 other values... (Enter to re-run, Ctrl-C to exit)
Starting single-page webserver on interface '0.0.0.0', port 45612...
</code></pre>
   <p>Initially it looks exactly the same, because it is just a copy of the default untemplate!</p>
   <p>But now we can just modify that file, <code>untemplate/tutorial/lgmCompose.html.untemplate</code>, hit reload, and play!</p>
   <p>This is why we needed a second terminal window. We edit the template in one terminal while <code>./feedletter-style</code> is running in the other. After each edit and save, we hit reload to see our changes. (We may have to wait 10-15 secs!)</p>
   <div class="note">
    <p>Occasionally the autoreload glitches out, in which case you should manually &lt;ctrl-c&gt; and rerun your <code>./feedletter-style</code> command.</p>
    <p>If you see error messages when you rerun, you may have hit compilation errors (an <a href="https://github.com/swaldman/untemplate-doc#readme">untemplate is transformed into a Scala source code</a>, which is then compiled), which you will have to resolve. You can <a href="mailto:swaldman@mchange.com">ask for help</a>!)</p>
   </div>
   <p>Our new untemplate has a section that looks like this:</p>
   <pre><code class="language-html">&lt;html&gt;
  &lt;head&gt;
    &lt;style&gt;
      &lt;( style_css() )&gt;
      /* add extra CSS styling here! */
    &lt;/style&gt;
</code></pre>
   <p>Let's go ahead and add some CSS! We'll edit it to...</p>
   <pre><code class="language-html">&lt;html&gt;
  &lt;head&gt;
    &lt;style&gt;
      &lt;( style_css() )&gt;
      /* add extra CSS styling here! */
      img {
        width: 100%;
        height: auto;
      }
    &lt;/style&gt;
</code></pre>
   <p>We save, and hit reload on our browser still pointed at <code>http://play.feedletter.org:45612/</code>, and see...</p>
   <img alt="Screenshot of web-served lgm newsletter with a better laid-out image." src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/scotus-disqualify-good.png" style="width: 100%;">
   <p>Much better!</p>
   <p>If we are very picky, we see that at the end of our post, there is a line that doesn't logically belong <em>in</em> the post, and should be italicized or something.</p>
   <img alt="Screenshot of web-served lgm newsletter with a better laid-out image." src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/scotus-disqualify-good-but-bad-endline.png" style="width: 100%;">
   <p>If we view the source, we'll find it's the last <code>&lt;p&gt;</code> element in <code>&lt;div class="item-contents"&gt;</code>. So we modify our styling as follows:</p>
   <pre><code class="language-html">&lt;html&gt;
  &lt;head&gt;
    &lt;style&gt;
      &lt;( style_css() )&gt;
      /* add extra CSS styling here! */
      img {
        width: 100%;
        height: auto;
      }
      div.item-contents p:last-of-type {
        font-style: italic;
      }
    &lt;/style&gt;
</code></pre>
   <p>Looks better!</p>
   <img alt="Screenshot of web-served lgm newsletter with a better laid-out image." src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/scotus-disqualify-good-good-endline.png" style="width: 100%;">
   <p>We can keep editing all we like. We add the <code>--random</code> flag and run our <code>./feedletter-style</code> command over and over to make sure that posts in general render well.</p>
   <p>When we are happy, we want to tell our subscription to use the new untemplate.</p>
   <p>Remember, the name of the untemplate we've been editing was <code>tutorial.lgmCompose_html</code>.</p>
   <p>Let's check that command out:</p>
   <pre><code class="language-plaintext">$ ./feedletter set-untemplates --help
[49/49] runMain 
Usage: feedletter set-untemplates --subscribable-name &lt;name&gt; [--compose-untemplate &lt;fully-qualified-name&gt;] [--confirm-untemplate &lt;fully-qualified-name&gt;] [--removal-notification-untemplate &lt;fully-qualified-name&gt;] [--status-change-untemplate &lt;fully-qualified-name&gt;]

Update the untemplates used to render subscriptions.

Options and flags:
    --help
        Display this help text.
    --subscribable-name &lt;name&gt;
        The name of an already-defined subscribable.
    --compose-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that will render notifications.
    --confirm-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that will ask for e-mail confirmations.
    --removal-notification-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that be mailed to users upon unsubscription.
    --status-change-untemplate &lt;fully-qualified-name&gt;
        Fully qualified name of untemplate that will render results of GET request to the API.
1 targets failed
runMain subprocess failed
</code></pre>
   <p>Okay. So we run...</p>
   <pre><code class="language-plaintext">$ ./feedletter set-untemplates --subscribable-name lgm --compose-untemplate tutorial.lgmCompose_html
[49/49] runMain 
Updated Subscription Manager: {
    "composeUntemplateName": "tutorial.lgmCompose_html",
    "statusChangeUntemplateName": "com.mchange.feedletter.default.email.statusChange_html",
    "confirmUntemplateName": "com.mchange.feedletter.default.email.confirm_html",
    "from": {
        "addressPart": "feedletter@feedletter.org",
        "type": "Email",
        "version": 1
    },
    "removalNotificationUntemplateName": "com.mchange.feedletter.default.email.removalNotification_html",
    "extraParams": {},
    "type": "Email.Each",
    "version": 1
}
</code></pre>
   <p>And we are done! We have restyled our newsletter.</p>
   <p>We could (and should!) do the same with our other subscriptions (using <code>./feedletter-style compose-multiple</code>). We could also do much more elaborate things then just mess with the stylesheet. Our compose untemplate was really the definition of a pretty arbitrary Scala function that accepted a <a href="https://github.com/swaldman/feedletter/blob/main/src/com/mchange/feedletter/style/core.scala"><code>ComposeInfo.Single</code></a> object and produced a String (embedded in an <code>untemplate.Result</code>).</p>
   <p>Learn more about untemplates <a href="https://github.com/swaldman/untemplate-doc#readme">here</a>.</p>
   <p>The default compose untemplate actually accepts a <a href="https://github.com/swaldman/feedletter/blob/main/src/com/mchange/feedletter/style/core.scala"><code>ComposeInfo.Universal</code></a>, a parent type of both <a href="https://github.com/swaldman/feedletter/blob/main/src/com/mchange/feedletter/style/core.scala"><code>ComposeInfo.Single</code></a> and <a href="https://github.com/swaldman/feedletter/blob/main/src/com/mchange/feedletter/style/core.scala"><code>ComposeInfo.Multiple</code></a>. So we can fix up the glitches we know about already in our <code>lgm-daily</code> subscribable just by setting for it the same compose untemplate:</p>
   <pre><code class="language-plaintext">$ ./feedletter set-untemplates --subscribable-name lgm-daily --compose-untemplate tutorial.lgmCompose_html
[49/49] runMain 
Updated Subscription Manager: {
    "composeUntemplateName": "tutorial.lgmCompose_html",
    "statusChangeUntemplateName": "com.mchange.feedletter.default.email.statusChange_html",
    "confirmUntemplateName": "com.mchange.feedletter.default.email.confirm_html",
    "from": {
        "addressPart": "feedletter@feedletter.org",
        "type": "Email",
        "version": 1
    },
    "removalNotificationUntemplateName": "com.mchange.feedletter.default.email.removalNotification_html",
    "extraParams": {},
    "type": "Email.Daily",
    "version": 1
}
</code></pre>
   <p>If we take a look at that with <code>compose-multiple</code>..</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-multiple --subscribable-name lgm-daily --port 45612
[50/50] runMainBackground 
Watching for changes to 14 paths and 9 other values... (Enter to re-run, Ctrl-C to exit)
Starting single-page webserver on interface '0.0.0.0', port 45612...
</code></pre>
   <p>We'll find that it looks pretty good!</p>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#16-advanced-customize-the-content" id="16-advanced-customize-the-content" name="16-advanced-customize-the-content" class="anchorlink"></a>16. Advanced: Customize the content</h2>
   <p><em>feedletter</em> supports a variety of <a href="https://github.com/swaldman/feedletter/blob/main/src/com/mchange/feedletter/style/Customizer.scala">customizers</a>, including</p>
   <ul>
    <li>subject customizers</li>
    <li>contents customizers</li>
    <li>"MastoAnnouncement" customizers"</li>
    <li>template params customizers (see <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#templating-note">templating note</a> below)</li>
   </ul>
   <p>For each subscribable, you can define just one of each kind of customizer, but customers can perform any number of steps internally.</p>
   <p>For an example, we'll build a content customizer. Both of our feeds frequently embed YouTube videos as <code>iframe</code> HTML elements in their blog posts. Unfortunately, mail clients generally do not render this form of embedded content, leaving awkward empty-spaces in and sometimes mangling the formatting of our newsletters.</p>
   <div class="note">
    <p>As of <code>feedletter-v0.0.13</code> (released June 19, 2024), the API has changed slightly from that documented in this tutorial.</p>
    <ol>
     <li>
      <p><code>Customizer</code> is no longer in the package <code>com.mchange.feedletter.style</code>, but in the base <code>com.mchange.feedletter</code> package. (This is because customizers now apply more broadly than styling nowtifications. They can be used, for example, to filter subscribables by author or category.)</p>
     </li>
     <li>
      <p>Individual <code>Customizer</code> types — which are just functions — no longer include a <code>withinTypeId : String</code> argument. <code>withinTypeId</code> is how <code>feedletter</code> binds multiple items into a single notification (for example in a weekly digest feed). The several posts that will be notified share a <code>withinTypeId</code>. However, the nature and format of these IDs are really implementation details of <code>feedletter</code> and its <code>SubscriptionManager</code> classes, so we are not exposing them to customizers.</p>
     </li>
    </ol>
    <p>Just use <code>com.mchange.feedletter.Customizer</code>, and</p>
    <pre><code class="language-scala">( subscribableName : SubscribableName, subscriptionManager : SubscriptionManager, feedUrl : FeedUrl, contents : Seq[ItemContent] ) =&gt; Seq[ItemContent]
</code></pre>
    <p>under newer versions of <code>feedletter</code>.</p>
   </div>
   <p>So let's build a content customizer that replaces these with well-behaved <code>div</code> elements containing links to the resources that would have been in the <code>iframe</code>. We'll include a <code>class="embedded"</code> attribute on the <code>div</code> elements, so that we will be able to style them however we want.</p>
   <p>Writing customizers in writing Scala code. We'll use the excellent <a href="https://jsoup.org/">jsoup</a> library to manipulate HTML. We'll give ourselves space to work by creating a <code>tutorial</code> package in our installation's <code>src</code> directory, and then exiting a file called <code>core.scala</code> inside that.</p>
   <pre><code class="language-plaintext">$ mkdir src/tutorial
$ emacs src/tutorial/core.scala
</code></pre>
   <p>First, we write a function that takes post HTML, and transforms the <code>iframe</code> elements into the <code>div</code> elements we're after. Then we embed that in the form of a <code>Customizer.Contents</code>, which is a function that accepts some metainformation and the original contents of a feed as <a href="https://github.com/swaldman/feedletter/blob/main/src/com/mchange/feedletter/ItemContent.scala"><code>ItemContents</code></a> objects, and then outputs transformed contents.</p>
   <p>Here is what all that looks like:</p>
   <pre><code class="language-scala">package tutorial

import org.jsoup.Jsoup
import org.jsoup.nodes.{Document,Element}

import scala.jdk.CollectionConverters.*

import com.mchange.feedletter.*
import com.mchange.feedletter.style.Customizer

private def createDivEmbedded( link : String ) : Element =
  val div = new Element("div").attr("class","embedded")
  val a = new Element("a").attr("href",link)
  val linkText =
    if link.toLowerCase.contains("youtube.com/") then
      "Embedded YouTube video"
    else
      "Embedded item"
  a.append(linkText)
  div.appendChild(a)
  div

def iframeToDivEmbedded( html : String ) : String =
  val doc = Jsoup.parseBodyFragment( html )
  val iframes = doc.select("iframe").asScala
  iframes.foreach: ifr =&gt;
    val src = ifr.attribute("src").getValue()
    ifr.replaceWith( createDivEmbedded(src) )
  doc.body().html()

val IframelessCustomizer : Customizer.Contents =
  ( subscribableName : SubscribableName, subscriptionManager : SubscriptionManager, withinTypeId : String, feedUrl : FeedUrl, contents : Seq[ItemContent] ) =&gt;
    contents.map: ic =&gt;
      ic.article match
        case Some( html ) =&gt; ic.withArticle( iframeToDivEmbedded( html ) )
        case None =&gt; ic
</code></pre>
   <p>Once we have <code>IframelessCustomizer</code> defined, to "install" it, we just register it as the <code>Customizer.Contents</code> for each of our feeds in our installation's <code>PreMain</code> object.</p>
   <p>We modify the default <code>src/PreMain.scala</code>, just inserting three <code>Customizer.Contents.register(...)</code> lines (and the <code>import</code> that brings in the name <code>Customizer</code>).</p>
   <pre><code class="language-scala">import com.mchange.feedletter.{UserUntemplates,Main}
import com.mchange.feedletter.style.{AllUntemplates,StyleMain}

import com.mchange.feedletter.style.Customizer

object PreMain:
  def main( args : Array[String] ) : Unit =
    AllUntemplates.add( UserUntemplates )
    Customizer.Contents.register("lgm", tutorial.IframelessCustomizer)
    Customizer.Contents.register("lgm-daily", tutorial.IframelessCustomizer)
    Customizer.Contents.register("atrios-three", tutorial.IframelessCustomizer)
    val styleExec =
      sys.env.get("FEEDLETTER_STYLE") match
        case Some( s ) =&gt; s.toBoolean
        case None      =&gt; false
    if styleExec then StyleMain.main(args) else Main.main(args)
</code></pre>
   <p>Once the customizers are registered, they will be called whenever the application generates content for the named subscribable.</p>
   <p>We can verify that our customizer does as we expect by using <code>./feedletter-style</code> to preview newsletter output. (See <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#15-tweak-the-newsletter-styles">above</a>).</p>
   <pre><code class="language-plaintext">$ ./feedletter-style compose-multiple --subscribable-name atrios-three --port 45612
[50/50] runMainBackground 
Watching for changes to 14 paths and 9 other values... (Enter to re-run, Ctrl-C to exit)
Starting single-page webserver on interface '0.0.0.0', port 45612...
</code></pre>
   <p>We can find one of Atrios' "Rock on." posts, which used to render blank in mail clients, but now render like...</p>
   <img alt="Screenshot of a transformed-to-div iframe" src="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/rock-on.png" style="width: 100%;">
   <p>Of course we can style that <code>div</code> and link however we like.</p>
   <div class="note">
    <p><a name="templating-note" href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/"></a>Re: "TemplateParams" customizers</p>
    <p>Confusingly, <em>feedletter</em> newsletters are rendered with two kinds of templating.</p>
    <ul>
     <li>"<a href="https://github.com/swaldman/untemplate-doc#readme">untemplates</a>" render newsletter HTML.</li>
     <li>but that HTML can itself be a template, by including case-insensitive constructs like <code>%PercentDelimitedKey%</code> which get filled in just prior to notification.</li>
    </ul>
    <p>The role of the second round of templating is to add subscriber-specific customizations, which might commonly include a particular subscriber's name and e-mail, as well as an unsubscribe link specific to that subscriber.</p>
    <p>Each notification is rendered by an untemplate just once, but any <code>%Key%</code> left in that rendering can be filled in differently for each subscriber.</p>
    <p>Template-params customizers let you add key-value pairs to the built-in set of available substitutions for these last-minute, per-subscriber customizations.</p>
   </div>
   <h2><a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/#conclusion" id="conclusion" name="conclusion" class="anchorlink"></a>Conclusion</h2>
   <p>This was a lot!</p>
   <p>It probably seems intimidating.</p>
   <p>But if you know how to self-host <em>systemd</em> daemon processes, much of the above should have been familiar. Setting up a feedletter server should take one to two hours of your time.</p>
   <p>Defining new feeds and subscribables, once the server is set up, becomes just a 5 minute operation.</p>
   <p>One feedletter instance can host as many feeds and subscribables as you like.</p>
   <p>Restyling your subscribables, or writing customizers and bespoke untemplates for them, can take longer. Developing custom front-ends is time-consuming detail work.</p>
   <p>I'd love it if you gave <em>feedletter</em> a try!</p>
   <hr>
   <p><strong>Update:</strong> I've <a href="https://tech.interfluidity.com/2025/01/14/syndicating-rss-to-mastodon-and-bluesky-with-feedletter/index.html">added a tutorial</a> on using feedletter to syndicate post announcements from RSS to Mastodon and BlueSky.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div class="updated-note">
    <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html#major-updates">Last major update at 2024-06-20 @ 01:10 PM EDT</a>
   </div>
   <div>
    by Steve Randy Waldman on 2024-01-29 @ <a href="https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index.html" class="pubtime">10:30 AM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
      <iffy:update-history>
        <iffy:update>
          <atom:updated>2024-06-20T17:10:00Z</atom:updated>
          <atom:summary>
            <![CDATA[Add note to Section 16, "Advanced: Customize the content" documenting <i>feedletter</i> API changes that slightly modify this section of the tutorial.]]>
          </atom:summary>
          <iffy:revision>
            https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-oldcommit-acb84c08c1bbcc83036b9cad70f6a3c5d60865c4.html
          </iffy:revision>
          <iffy:diff>
            https://tech.interfluidity.com/2024/01/29/feedletter-tutorial/index-diff-acb84c08c1bbcc83036b9cad70f6a3c5d60865c4-to-current.html
          </iffy:diff>
        </iffy:update>
      </iffy:update-history>
    </item>
    <item>
      <pubDate>Wed, 6 Dec 2023 16:00:00 -0500</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2023/12/06/apis-against-dependent-types-in-scala/index.html
      </guid>
      <description>
        <![CDATA[Scala supports instance-dependent types, which is very cool! So I can define... class Human( name : String ):
  case class Tooth( num : Int ):
    override def toString(): String = s"${name}'s #${num} tooth"
    
  val teeth = Set.from( (1 to 32).map( Tooth.apply ) )
  def brush( myTeeth : Set[Tooth] ) : Unit = println(s"fluoride goodness for ${name}")
  
val me = new Human("Steve")
val you = new Human("Awesome")

me.brush( me.teeth )
//me.brush( you.teeth ) // gross! doesn't compile. (as it...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/12/06/apis-against-dependent-types-in-scala/index.html</link>
      <title>APIs against dependent types in Scala</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>Scala supports instance-dependent types, which is very cool! So I can define...</p>
   <pre><code class="language-scala">class Human( name : String ):
  case class Tooth( num : Int ):
    override def toString(): String = s"${name}'s #${num} tooth"
    
  val teeth = Set.from( (1 to 32).map( Tooth.apply ) )
  def brush( myTeeth : Set[Tooth] ) : Unit = println(s"fluoride goodness for ${name}")
  
val me = new Human("Steve")
val you = new Human("Awesome")

me.brush( me.teeth )
//me.brush( you.teeth ) // gross! doesn't compile. (as it should not!)
</code></pre>
   <p>My teeth and your teeth are different types, even though they are of the same class. The identity of the <em>enclosing instance</em> is a part of the type.</p>
   <p>And we see here how that can be useful! Often inner classes represent internal structures that should mostly be managed by their enclosing instance. It's good that the compiler pushes back against code in which you might brush my teeth or pump my heart!</p>
   <p>But sometimes inner instances are not so internal, or even if they are, an external thing might have business interacting with it. The virtual human we are modeling might have need of a dentist or a cadiologist.</p>
   <p>Scala's type system doesn't prevent external things from accessing inner class instances, it just demands you do it via a correct type.</p>
   <p>I know of two ways to define external APIs against instance-dependent types. First, Scala supports <em>projection types</em>, like <code>Human#Teeth</code>. Where an ordinary dot-separated path would have required me to identify some particular instance, <code>Human#Teeth</code> matches the tooth of <em>any</em> human.</p>
   <p>A second way to hit instance-dependent types from an external API is to require the caller to identify the instance in the call, and then let the type of a later argument to the same call include the identified instance. I think it's kind of wild that Scala supports this. It's an example where the type of arguments to a statically declared function is effectively determined at runtime. You don't even need separate argument lists, although I think I prefer them.</p>
   <pre><code class="language-scala">class Dentist:
  def checkByProjection( tooth : Human#Tooth ) : Unit = println( s"Found ${tooth} (by projection)" )
  def checkByIdentifying( human : Human)( tooth : human.Tooth ) : Unit = println( s"Found ${tooth} (by identification)" )

val d  = new Dentist

// API by projection
d.checkByProjection( me.teeth.head )
d.checkByProjection( you.teeth.head )

// API by identification
d.checkByIdentifying( me )( me.teeth.head )
d.checkByIdentifying( you )( you.teeth.head )

// d.checkByIdentifying( me )( you.teeth.head ) // does not compile, as it should not
// d.checkByIdentifying( you )( me.teeth.head ) // does not compile, as it should not
</code></pre>
   <p>I've used projection types a lot, over the eons. I know some people think that any need for external APIs against inner types is code smell or something. But I've found a variety of places where they seem to make sense, and the "do it right" workarounds (e.g. define some instance-independent abstract base type for the inner things, and write external APIs against that) just create busy work and maintenance complexity.</p>
   <p>Nevertheless, in some corner cases, projection types <a href="https://github.com/lampepfl/dotty/issues/18655">aren't completely supported</a>, and my sense is that much of the Scala community considers them icky (like brushing someone else's teeth).</p>
   <p>Sometimes you need to write APIs against inner types by identification anyway, because you need to know stuff about the enclosing instance (which inner instances don't disclose unless they declare an explicit reference).</p>
   <p>But sometimes you don't need to be told the identity of the outer instance (because it's not relevant to what you are doing, or because the inner instance discloses a reference explicitly).</p>
   <p>Are projection types icky and it best to just standardize on requiring explicit identification of enclosing instances?</p>
   <p>Or are projection types a cool trick we should delight in using?</p>
   <p>Enquiring minds want to know!</p>
   <hr>
   <p>(This blog doesn't support comments yet, but you can reply to <a href="https://zirk.us/@interfluidity/111535483316429524">this post</a> on Mastodon.)</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-12-06 @ <a href="https://tech.interfluidity.com/2023/12/06/apis-against-dependent-types-in-scala/index.html" class="pubtime">04:00 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Tue, 14 Nov 2023 12:35:00 -0500</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2023/11/14/library--script-vs-application--config-file/index.html
      </guid>
      <description>
        <![CDATA[TL; DR: For Scala apps, instead of installing applications and writing separate config files, why not do config like this? #!/usr/bin/env -S scala-cli shebang

//> using dep "com.example::cool-app:1.0.0"

val config = coolapp.Config(
  name = "Fonzie",                    // the name of your installation
  apparel = coolapp.Apparel.Leather,  // see elements defined in coolapp.Apparel
  gesture = coolapp.Gesture.ThumbsUp, // see elements defined in coolapp.Gesture
  reference = "Very dated, old...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/11/14/library--script-vs-application--config-file/index.html</link>
      <title>(Library + Script) vs (Application + Config File)</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR:</strong></p>
   <p>For Scala apps, instead of installing applications and writing separate config files, why not do config like this?</p>
   <pre><code class="language-scala">#!/usr/bin/env -S scala-cli shebang

//&gt; using dep "com.example::cool-app:1.0.0"

val config = coolapp.Config(
  name = "Fonzie",                    // the name of your installation
  apparel = coolapp.Apparel.Leather,  // see elements defined in coolapp.Apparel
  gesture = coolapp.Gesture.ThumbsUp, // see elements defined in coolapp.Gesture
  reference = "Very dated, old man.", // a string to help users identify your character
  port = 8765                         // the port on which the app will run
)

coolapp.start( config )
</code></pre>
   <hr>
   <p>Once upon a time, I spent a very great deal of time supporting and integrating multiple config formats into my work. I used to describe <a href="https://www.mchange.com/projects/c3p0/">c3p0</a> as a configuration project attached to a connection pool.</p>
   <p>Lately, though, I find I am skipping any support of config files. I mostly write Scala, and Scala case classes strike me as a pretty good configuration format.</p>
   <ul>
    <li>
     <p>Since you can intitialize case classes with named arguments, <code>key = value</code>, they can be made literate and intuitive.</p>
    </li>
    <li>
     <p>They support rich comments, because the Scala language supports comments.</p>
    </li>
    <li>
     <p>With simple string or integer values, they are as simple as most config formats.</p>
    </li>
   </ul>
   <p>Case-class config is extremely flexible, because your values are specified in a general purpose programming language, and can include variables or functions. And you get compile-time feedback for misconfigurations.</p>
   <p>When I first became enamored with case-classes-as-config, I <a href="https://github.com/swaldman/audiofluidity">wrote</a> a special purpose bootstrap app that would compile a file containing a case-class-instance-as-config, then use Java reflection to load it from a container.</p>
   <pre><code class="language-scala">val podcast : Podcast =
    Podcast(
      mainUrl                = "https://superpodcast.audiofluidity.com/",
      title                  = "Superpodcast",
      description            = """｜&lt;p&gt;Superpodcast is the best podcast you've ever heard.&lt;/p&gt;
                                  ｜
                                  ｜&lt;p&gt;In fact, you will never hear it.&lt;/p&gt;""".stripMargin,
      guidPrefix             = "com.audiofluidity.superpodcast-",
      shortOpaqueName        = "superpodcast",
      mainCoverImageFileName = "some-cover-art.jpg",
      editorEmail            = "asshole@audiofluidity.com",
      defaultAuthorEmail     = "asshole@audiofluidity.com",
      itunesCategories       = immutable.Seq( ItunesCategory.Comedy ),
      mbAdmin                = Some(Admin(name="Asshole", email="asshole@audiofluidity.com")),
      mbLanguage             = Some(LanguageCode.EnglishUnitedStates),
      mbPublisher            = Some("Does Not Exist, LLC"),
      episodes               = episodes
    )
</code></pre>
   <p>In more recent projects, I've just used either <a href="https://scala-cli.virtuslab.org/"><code>scala-cli</code></a> or <a href="https://mill-build.com/mill/Intro_to_Mill.html"><code>mill</code></a> as a runner. Sometimes I've left the definition of a stub case-class instance in the <code>src</code> directory for users to fill in, as in <a href="https://github.com/swaldman/fossilphant/blob/main/fossilphant/src/config.scala"><code>fossilphant</code></a>. Other times I've defined abstract main classes, asking users to extend them by overriding a method that supplies config as a case class instance, as in <a href="https://github.com/swaldman/unify-rss/blob/2f6305568f8b53e63fa5c16d663db44b0b565288/main/com/mchange/unifyrss/AbstractDaemonMain.scala"><code>unify-rss</code></a>.</p>
   <pre><code class="language-scala">package com.mchange.unifyrss

import scala.collection.*

import zio.*

abstract class AbstractDaemonMain extends ZIOAppDefault:

  def appConfig : AppConfig

  override def run =
    for
      mergedFeedRefs   &lt;- initMergedFeedRefs( appConfig )
      _                &lt;- periodicallyResilientlyUpdateAllMergedFeedRefs( appConfig, mergedFeedRefs )
      _                &lt;- ZIO.logInfo(s"Starting up unify-rss server on port ${appConfig.servicePort}")
      exitCode         &lt;- server( appConfig, mergedFeedRefs )
    yield exitCode
</code></pre>
   <p>So far, I've just instantiated these with concrete <code>object</code>s <a href="https://github.com/swaldman/unify-rss/blob/24cc87b4e6dc6c5a574497c3004fbd00d41f91d8/main/InterfluidityMain.scala">in Scala source files</a>.</p>
   <p>But it strikes me that a natural refinement would be to design libraries with entry points that accept a case-class-config object as an argument, and expect users to deploy them as e.g. <code>scala-cli</code> scripts. Just something like:</p>
   <pre><code class="language-scala">#!/usr/bin/env -S scala-cli shebang

//&gt; using dep "com.example::cool-app:1.0.0"

val config = coolapp.Config(
  name = "Fonzie",                    // the name of your installation
  apparel = coolapp.Apparel.Leather,  // see elements defined in coolapp.Apparel
  gesture = coolapp.Gesture.ThumbsUp, // see elements defined in coolapp.Gesture
  reference = "Very dated, old man.", // a string to help users identify your character
  port = 8765                         // the port on which the app will run
)

coolapp.start( config )
</code></pre>
   <p>There is a bit of ceremony, and a bit that might intimidate people not accustomed to Scala syntax and tools. But "standard" config file formats get complicated and intimidating too. Here users get quick feedback if they don't pick a valid value without developers having to write special validation logic. Users are still just deploying a text file, as they would with ordinary config.</p>
   <p>If your priority is 100% user experience, then using a standard (or <a href="https://kdl.dev/">new and improved</a>, ht <a href="https://notes.billmill.org/link_blog/2023/11/KDL_-_a_config_language.html">Bill Mill</a>) config file format, then hand-writing informative, fail-fast validation logic is going to be a better way to go.</p>
   <p>But your priority should not always be user experience! Not all software development should take the form of a "product" developed at a high cost that will then be amortized over sales to or adoption by a very large number of users.</p>
   <p>Software is a form of collaboration, and often that collaboration will be more productive and evolve more quickly when "users" are understood to be reasonably capable and informed, so developers don't expand the scope of their work and their maintenance burden in order to render the application accessible to the most intimidated potential users.</p>
   <p>Obviously it depends what you are doing! But if there is going to be a config file at all, you are already collaborating with a pretty restricted set of people who are okay with setting up and editing an inevitably arcane text file.</p>
   <p>For many applications and collaborations, maintainability at moderate cost in time and money and speed of evolution, are important. For these applications, when written in an expressive, strongly-typed language like Scala, defining config as a data structure in a script, that then executes an app defined as an entry point to a library, strike me as a pretty good way to go.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-11-14 @ <a href="https://tech.interfluidity.com/2023/11/14/library--script-vs-application--config-file/index.html" class="pubtime">12:35 PM EST</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 9 Oct 2023 19:30:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/10/09/contributing-to-mill/index.html</guid>
      <description>
        <![CDATA[I'm a big fan of Scala build tools, both sbt and mill. I've done some pretty big projects intimately based on sbt. Recently I spend a lot of time in mill because it's very well suited to static-site generators, and because I've had better success getting mill builds to call into Scala 3 code, as some of my site-generation tools require. I've contributed to both projects. There are a few hints I want to give myself for when I contribute to mill. Build and run The trick is just $ ./mill -i...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/10/09/contributing-to-mill/index.html</link>
      <title>Contributing to mill</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I'm a big fan of Scala build tools, both <a href="https://www.scala-sbt.org/"><code>sbt</code></a> and <a href="https://mill-build.com/mill/Intro_to_Mill.html"><code>mill</code></a>. I've done some pretty big projects <a href="https://www.sbt-ethereum.io/">intimately based</a> on <code>sbt</code>. Recently I spend a lot of time in <code>mill</code> because it's very well suited to static-site generators, and because I've had better success getting <code>mill</code> builds to call into Scala 3 code, as some of my <a href="https://github.com/swaldman/untemplate-doc#readme">site-generation tools</a> require. I've contributed to both projects.</p>
   <p>There are a few hints I want to give myself for when I contribute to <code>mill</code>.</p>
   <h2><a href="https://tech.interfluidity.com/2023/10/09/contributing-to-mill/#build-and-run" id="build-and-run" name="build-and-run" class="anchorlink"></a>Build and run</h2>
   <p>The trick is just</p>
   <pre><code class="language-plaintext">$ ./mill -i installLocal
</code></pre>
   <p>in the <a href="https://github.com/com-lihaoyi/mill">mill repository</a>. If the build succeeds, the a <code>mill-release</code> executable appears in the <code>target/</code> directory of the repository. One can test and play with that.</p>
   <h2><a href="https://tech.interfluidity.com/2023/10/09/contributing-to-mill/#scalafmt" id="scalafmt" name="scalafmt" class="anchorlink"></a>scalafmt</h2>
   <p><code>mill</code> wants code contributions to pass a <code>scalafmt</code> check before merging. You build <code>mill</code> with <code>mill</code> of course, and <code>mill</code> <a href="https://mill-build.com/mill/Scala_Module_Config.html#_reformatting_your_code">makes this check easy</a>.</p>
   <p>To check formatting...</p>
   <pre><code class="language-plaintext">$ mill mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll __.sources
</code></pre>
   <p>To have <code>mill</code> go ahead and reformat your code...</p>
   <pre><code class="language-plaintext">$ mill mill.scalalib.scalafmt.ScalafmtModule/reformatAll __.sources
</code></pre>
   <p>I have now twice, embarrassingly, forgotten to do this.</p>
   <h2><a href="https://tech.interfluidity.com/2023/10/09/contributing-to-mill/#" class="anchorlink"></a>???</h2>
   <p>I'll probably update this entry in place over time, if I find more hints I want to keep.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-10-09 @ <a href="https://tech.interfluidity.com/2023/10/09/contributing-to-mill/index.html" class="pubtime">07:30 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 7 Oct 2023 17:45:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/10/07/referring-to-scala-collections/index.html</guid>
      <description>
        <![CDATA[TL; DR: Prefer import scala.collection.{immutable,mutable}
 Over the eons, I developed a habit of using the following import import scala.collection.*
 to set up my use of Scala collections. Then I can refer to collections in a very clear longhand. For example: val alphamap = immutable.Map( "A" -> "Apple", "B" -> "Baby", "C" -> "Candy" )
 or, much less frequently: val scratchpad = mutable.Map( "Title" -> "Untitled" )
 I like referring explicitly to collections as mutable.Thing or...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/10/07/referring-to-scala-collections/index.html</link>
      <title>Referring to Scala collections</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR:</strong> Prefer</p>
   <pre><code class="language-scala">import scala.collection.{immutable,mutable}
</code></pre>
   <hr>
   <p>Over the eons, I developed a habit of using the following import</p>
   <pre><code class="language-scala">import scala.collection.*
</code></pre>
   <p>to set up my use of Scala collections.</p>
   <p>Then I can refer to collections in a very clear longhand. For example:</p>
   <pre><code class="language-scala">val alphamap = immutable.Map( "A" -&gt; "Apple", "B" -&gt; "Baby", "C" -&gt; "Candy" )
</code></pre>
   <p>or, much less frequently:</p>
   <pre><code class="language-scala">val scratchpad = mutable.Map( "Title" -&gt; "Untitled" )
</code></pre>
   <p>I <em>like</em> referring explicitly to collections as <code>mutable.Thing</code> or <code>immutable.Thing</code>. Yes it's more typing, but it's very clear.</p>
   <p>But recently the practice has caused some hassles, and I've realized it's not great.</p>
   <p>Consider this little <a href="https://scala-cli.virtuslab.org/">scala-cli</a> application:</p>
   <pre><code class="language-scala">//&gt; using scala 3.3.1

trait Hat:
  def tickets : Set[String]

object HatApp:
  import scala.collection.*
  import scala.util.Random

  val hat = new Hat:
    def tickets : Set[String] = Set("Alice", "Bob", "Carol")

  @main  
  def winner = println( Random.shuffle(hat.tickets.toList).head )
</code></pre>
   <p>Try running it, and oops!</p>
   <pre><code class="language-plaintext">Compiling project (Scala 3.3.1, JVM)
[error] ./unqualified-collections.scala:11:9
[error] error overriding method tickets in trait Hat of type =&gt; Set[String];
[error]   method tickets of type =&gt; collection.Set[String] has incompatible type
[error]     def tickets : Set[String] = Set("Alice", "Bob", "Carol")
[error]         ^
Error compiling project (Scala 3.3.1, JVM)
</code></pre>
   <p>The issue is that <code>Set</code> is defined in four places:</p>
   <ul>
    <li>unqualified in <code>scala.Predef</code></li>
    <li>as <code>scala.collection.Set</code></li>
    <li>as <code>scala.collection.immutable.Set</code></li>
    <li>as <code>scala.collection.mutable.Set</code>.</li>
   </ul>
   <p>The convenient, simple, unqualified <code>Set</code> is, very sensibly, just a type alias for <code>scala.collection.immutable.Set</code>.</p>
   <p>However, after I've imported <code>scala.collection.*</code>, unqualified <code>Set</code> now refers to <code>scala.collection.Set</code>, the base trait for <em>both</em> mutable and immutable sets, rather than the immutable trait it originally referred to.</p>
   <p>A <code>scala.collection.Set</code> is not a subtype of <code>scala.collection.immutable.Set</code> or, equivalently, the predef's unqualified <code>Set</code>.</p>
   <p>So even though my definition of a <code>Hat</code> looks trivially conformant, it is not.</p>
   <p>It's easy to fix this just by using the longhand syntax I prefer</p>
   <pre><code class="language-scala">  val hat = new Hat:
    def tickets : immutable.Set[String] = immutable.Set("Alice", "Bob", "Carol")
</code></pre>
   <p>But it's a bit surprising that a contract that was defined in terms of unqualified <code>Set</code> has to be implemented in terms of <code>immutable.Set</code>. If a trait was defined in terms of unqualified <code>Set</code>, it's more straightforward to just implement it in terms of that.</p>
   <p>So lately I've taken to changing how I make collections available for myself. I still prefer to be able to refer to them in explicit, clear, longhand. But instead of</p>
   <pre><code class="language-scala">import scala.collection.*
</code></pre>
   <p>I now prefer</p>
   <pre><code class="language-scala">import scala.collection.{immutable,mutable}
</code></pre>
   <p>This way, I can refer to collections explicitly as <code>immutable.Whatever</code> or <code>mutable.Whatever</code>, but when I refer to unqualified collection names, I haven't shadowed the predef definitions with rarely desired ambidextrous trait definitions under <code>scala.collection</code>.</p>
   <p>So now I have</p>
   <pre><code class="language-scala">//&gt; using scala 3.3.1

trait Hat:
  def tickets : Set[String]

object HatApp:
  import scala.collection.{immutable,mutable}
  import scala.util.Random

  val hat = new Hat:
    def tickets : Set[String] = Set("Alice", "Bob", "Carol")

  @main  
  def winner = println( Random.shuffle(hat.tickets.toList).head )
</code></pre>
   <p>and everything works as expected.</p>
   <p>The import is superfluous, gratuitous, unnecessary in this case. Since the only collection I touch is the unqualified <code>Set</code>, I could just have omitted any import.</p>
   <p>But collections are very common to use. In real applications, one very often wants to set up ones files for clear, easy access to them. I think this is a good syntax to use, that lets on both write out clear collection names and avoid surprising ambiguities.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-10-07 @ <a href="https://tech.interfluidity.com/2023/10/07/referring-to-scala-collections/index.html" class="pubtime">05:45 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sun, 17 Sep 2023 14:25:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/index.html</guid>
      <description>
        <![CDATA[TL; DR: I did it, and like it! But it was not so straightforward that anyone can just ditch their podcast app for an RSS reader and have a good experience. I’m an avid podcast listener, so the podcast subscription list I curate is important to me. My phone is an iPhone and my laptop a Mac, so initially I just used Apple’s Podcasts app. Podcasts were conveniently synced between my phone and computer. That was nice. But I don’t have Apple CarPlay, and didn’t like the UI for finding podcasts when...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/index.html</link>
      <title>Taking control of podcasts via RSS</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p><strong>TL; DR: I did it, and like it!</strong></p>
   <p>But it was not so straightforward that anyone can just ditch their podcast app for an RSS reader and have a good experience.</p>
   <p><a href="https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/IMG_9358.jpeg" style="float: left; padding-right: 1.5rem;"><img src="https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/IMG_9358-296.jpeg" alt="screenshot of final merged RSS feed in a podcast app." width="296"></a></p>
   <hr>
   <p>I’m an avid podcast listener, so the podcast subscription list I curate is important to me. My phone is an iPhone and my laptop a Mac, so initially I just used Apple’s Podcasts app. Podcasts were conveniently synced between my phone and computer. That was nice.</p>
   <p>But I don’t have Apple CarPlay, and didn’t like the UI for finding podcasts when I was driving. I was doing more clicking around and searching on the phone than seemed prudent. So, I looked at other podcast apps, and was pretty happy with <a href="https://castro.fm/">Castro</a> for a while.</p>
   <p>Apple — to its vendor-lock-in shame — <a href="https://mjtsai.com/blog/2019/10/13/podcasts-in-catalina/">no longer supports</a> exports of podcasts to <a href="http://opml.org/">OPML</a> from the Podcasts app. It used to, when Podcasts were part of iTunes. There's a workaround <a href="https://jiacai2050.github.io/podcasts-opml-exporter/">here</a> that I haven’t tried. So migrating to Castro meant a lot of manual resubscribing.</p>
   <p>Castro is a fine app. It is not evil — it supports OPML import and export. But it’s iPhone only, and I want access to my feeds on my computer too. And I just want to feel like I <em>own</em> my own darned subscription list, and podcasts are published as RSS feeds, so why can't I just subscribe to them with my RSS reader?</p>
   <p>So I did!</p>
   <p>I use <a href="https://www.inoreader.com/">Inoreader</a> and I am, overall, a big fan. I feel a bit of cognitive dissonance over that — in general I am trying to disentangle myself from centralized platforms as an architecture, and Inoreader is a centralized platform. I could use a local app like <a href="https://netnewswire.com/">NetNewsWire</a> (my first RSS reader!), which now will sync between phone and computer.</p>
   <p>But I’m subscribed to more than 1000 feeds, I wonder if that won’t be a lot, especially for my phone. I like Inoreader's “monitored keywords" feeds. In general I’ve been impressed by Inoreader. It feels like a power tool. They are not a dominant platform in their space, so they're less likely to <a href="https://pluralistic.net/2023/01/21/potemkin-ai/">enshittify</a> than a monopolist. For now, I am happy to be a paying customer of theirs.</p>
   <p>Migrating by OPML worked easily, both the Castro export and Inoreader import. I end up with a podcasts folder in Inoreader. I can browse that folder like any other collection of feeds, and play podcast audio files from each post. Great!</p>
   <p>But there were two hitches:</p>
   <figure style="float: right; margin-right: 0;">
    <a href="https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/not-a-great-sort-of-sorts.png"> <img alt="Not a great sort of sort" srcset="not-a-great-sort-of-sorts-390.png 390w, not-a-great-sort-of-sorts-280.png 320w" sizes="(max-width: 600px) 280px, 390px" style="border: 1px solid gray;" src="https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/"> </a>
    <figcaption class="monospace-bold" style="text-align: right; font-size: 80%;">Not a great sort of sort!</figcaption>
   </figure>
   <ol>
    <li>
     <p>Inoreader sorts new articles in reverse chronological order <em>using the time your feed receives</em> the article, rather than the time of the article's publication. So when you subscribe to a feed, a folder that contains it along with other feeds will show all of the new feed's posts at the top.</p>
     <p>I suspect this is performance motivated — Inoreader builds and caches your feeds in advance, and RSS article publication dates are neither reliable nor stable. If it tried to cache publication-sorted feeds, it would end up frequently, expensively reconstructing them.</p>
     <p>Nevertheless, the effect of this has always been a bit annoying. Nearly all my feeds are organized into folders. When I subscribe to a new blog, the top of that folder gets monopolized.</p>
     <p>For blogs, this is not a big deal. Blogs typically keep just a few posts in their RSS, maybe the last five or ten articles. And when reading, scrolling down is not a problem.</p>
     <p>Podcast "blogs" sometimes have tens of articles in their RSS. You have to scroll a lot farther down. And I often want to listen to podcasts while driving. I can’t afford a lot of messing around to get past an archive of my last subscription.</p>
    </li>
    <li>
     <p>While you can play episodes in Inoreader’s mobile app, it’s not a great podcast app. Playback takes over the screen of your phone, and stops if switch to anywhere else. It won’t remember where you were when you go back.</p>
     <p>I think there’s an opportunity for Inoreader to become a better audio playback app and become the podcast app for RSS lovers. But it isn’t there yet.</p>
    </li>
   </ol>
   <p>So.</p>
   <p>I wanted to re-sort my feed by publication time rather than feed-saw-it time, and I wanted podcasts to end up in a richer audio app.</p>
   <p>Inoreader power tools to the rescue! Inoreader lets you publish the folders you curate as new own RSS feeds. What if I subscribed to this one feed of feeds from a proper podcasts app?!</p>
   <p>That works! You get a good listening experience, can listen even when you switch out of the app, can resume episodes where you left off.</p>
   <p>But…</p>
   <ol>
    <li>
     <p>It does not typically cause the feed to get sorted by publication date. Podcast apps use the ordering in the feed itself; and</p>
    </li>
    <li>
     <p>The feed contains a jumbled mix of many podcasts' episode titles, with no information about which podcast each episode is from.</p>
    </li>
   </ol>
   <p>It’s here that I start to get a bit obsessive.</p>
   <p>I’ve done a fair amount of work <a href="https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html">serving and transforming RSS</a> and <a href="https://github.com/swaldman/audiofluidity">generating</a> <a href="https://github.com/swaldman/audiofluidity-rss">podcast feeds</a>. What if I let the RSS feed server that I’ve already built and deployed subscribe to my podcast feed, sort the episodes by publication time, and then re-serve them?</p>
   <p>Since I have the RSS, I can just inject the podcast names into the episode titles, so my items in my feed look like “Left Anchor: Finland's Cooperative Culture”, where <a href="https://www.leftanchor.com/">Left Anchor</a> is the podcast name, and the rest is the episode title.</p>
   <p>From <a href="https://github.com/swaldman/unify-rss/blob/interfluidity/main/SubscribedPodcasts.scala"><code>SubscribedPodcasts.scala</code></a>:</p>
   <pre><code class="language-scala">  private val PrefixTransformations = Map("Podcasts" -&gt; "TAP")

  private def prependFeedTitleToItemTitles(rssElem: Elem): Elem =
    val feedPrefix =
      val queryResult = (rssElem \ "channel").map(_ \ "title")
      if queryResult.nonEmpty then
        val rawPrefix = queryResult.head.text.trim
        val goodPrefix = PrefixTransformations.getOrElse(rawPrefix, rawPrefix)
        (goodPrefix + ": ")
      else
        ""
    val rule = new RewriteRule:
      override def transform(n: Node): Seq[Node] = n match
        case elem: Elem if elem.label == "item" =&gt; prefixTitlesOfItemElem(feedPrefix, elem)
        case other =&gt; other
    val transform = new RuleTransformer(rule)
    transform(rssElem).asInstanceOf[Elem]
</code></pre>
   <p>Since my RSS server is <a href="https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html">in the business of unifying feeds</a>, I used another Inoreader power tool — serving OPML so you can subscribe to subscription lists! I had my app subscribe to my list of feeds, periodically refresh that from Inoreader, then load and and merge all the feeds itself. That way I can control how feeds are merged. (For example, I am very careful about preserving XML namespaces in merged feeds.)</p>
   <p>From <a href="https://github.com/swaldman/unify-rss/blob/interfluidity/main/InterfluidityMain.scala"><code>InterfluidityMain.scala</code></a></p>
   <pre><code class="language-scala">  val subscribedPodcastsMetaSources = immutable.Seq(
    MetaSource.OPML(URL("https://www.inoreader.com/reader/subscriptions/export/user/1005956602/label/Podcasts"), eachFeedTransformer = SubscribedPodcasts.bestAttemptEmbellish),
    MetaSource.OPML(URL("https://www.inoreader.com/reader/subscriptions/export/user/1005956602/label/Podcasts+HF"), eachFeedTransformer = SubscribedPodcasts.bestAttemptEmbellish),
  )
</code></pre>
   <p>Now any podcast app that lets you subscribe via a simple RSS url (most, but not all of them!) can subscribe to my feed.</p>
   <p>I was done!</p>
   <p>But I was vain.</p>
   <p>I didn’t like the look of my feed. There were no pretty cover graphics, just the text name of each feed. And my gigafeed itself had no cover image. So…</p>
   <p>If I was transforming XML to modify titles, I might as well transform it to add images. Unless an episode has an episode-specific image defined (usually they don’t), I take the cover image of the feed and make it the cover image of the episode. Now, when you look at my all-my-podcasts feed in a podcast app that supports episode images, you see the cover image for the podcast next to each episode.</p>
   <p>From <a href="https://github.com/swaldman/unify-rss/blob/interfluidity/main/SubscribedPodcasts.scala"><code>SubscribedPodcasts.scala</code></a>:</p>
   <pre><code class="language-scala">  private def copyItunesImageElementsToItems(rssElem: Elem): Elem =
    val mbItunesFeedImage =
      val queryResult = (rssElem \ "channel").flatMap(_ \ "image").filter(_.asInstanceOf[Elem].prefix == "itunes")
      if queryResult.nonEmpty then Some(queryResult.head) else None
    val mbRegularFeedImage =
      val queryResult = (rssElem \ "channel").flatMap(_ \ "image").filter(_.asInstanceOf[Elem].prefix == null)
      if queryResult.nonEmpty then Some(queryResult.head) else None
    val mbFeedImage = mbItunesFeedImage orElse mbRegularFeedImage.map: regularImageElem =&gt;
      val url = (regularImageElem \ "url").head.text.trim
      Element.Itunes.Image(href = url).toElem
    mbFeedImage.fold(rssElem): feedImage =&gt;
      val rule = new RewriteRule:
        override def transform(n: Node): Seq[Node] = n match
          case elem: Elem if elem.label == "item" =&gt;
            if (elem \ "image").isEmpty then
              elem.copy(child = elem.child :+ feedImage.asInstanceOf[Elem])
            else
              elem
          case other =&gt; other
      val transform = new RuleTransformer(rule)
      transform(rssElem).asInstanceOf[Elem]
</code></pre>
   <p>Messing around in <a href="https://www.midjourney.com/">midjourney</a>, I "prompted” a <a href="https://www.interfluidity.com/uploads/2023/08/ripply-river-midjourney-smaller.png">cover image</a> for my overall feed of feeds, and transformed the almost-final merged feed to include that image.</p>
   <p>Now everything is very pretty. You can <a href="https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/IMG_9358.jpeg">see what it looks like</a> in <a href="https://www.podcastrepublic.net/">Podcast Republic</a>. (This is also the image at the top of the post.)</p>
   <p>I noticed that some apps were undesirably segregating episodes based on alleged “seasons”, putting episode from the “latest” season near the top. Obviously, there can be no consistency of seasons, since I am taking episodes from a kaleidoscope of different shows. So, I <a href="https://github.com/swaldman/unify-rss/blob/interfluidity/main/SubscribedPodcasts.scala">add yet another transformation</a> to feeds before merging them, one which strips any <code>&lt;itunes:season&gt;</code> elements.</p>
   <p>The <a href="https://github.com/scala/scala-xml/wiki/Getting-started"><code>RewriteRule</code></a> API of <a href="https://github.com/scala/scala-xml">Scala’s standard XML library</a> performs abysmally. I transform each feed three times (modify the title, add an episode image, strip seasons), and then I transform the final feed once (to insert my cover image).</p>
   <p>I think I could, and should, combine the transformations into a single pass that performs all three per-feed, pre-merge transformations. But it's conceptually easier to just run three passes. Even though processing a single feed can take up to 10 seconds, my <a href="https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html">ZIO-based app</a> trivially parallelizes the transformations. Plus, reloads/reconstructions of the megafeed happen only once every 30 minutes.</p>
   <p>So, although I feel a bit of professional embarrassment over the very remediable poor performance of feed reconstruction, it has no practical cost, and I haven’t (yet) bothered to fix it. Updated feeds replace prior feeds atomically, so there's no downtime while a new feed is under construction.</p>
   <p>Anyway, it was all a bit much, a bit more than I had bargained for when, almost on a whim, I set out to RSS-ify my podcast management.</p>
   <p>But now it’s done. I manage and subscribe to podcasts in Inoreader. A bit <a href="https://www.merriam-webster.com/dictionary/omphaloskepsis">omphaloskeptically</a>, I resubscribe from Inoreader to the re-sort of those feeds performed by my server. I listen straight off of Inoreader on my laptop. On the phone, I bounce between several apps — mostly <a href="https://www.podcastrepublic.net/">Podcast Republic</a> and <a href="https://podcastguru.io/">Podcast Guru</a> — to listen to whatever I’m into. (I still like Castro, but I've left my old setup alone there, just in case.) Each app sees the same feed, synced to Inoreder. Information the apps themselves generate, like for how long an episode has been listened to or whether it’s already completed, does not get synced between apps. I don’t find that to be a problem.</p>
   <p>Inoreader supports tags, and will export an RSS feed of posts with a given tag. I’ve created a tag called “Queued”, and I have my podcast apps subscribe to that too. So I can browse on my desktop, tag episodes I may be particularly interested in, and find those quickly in a second feed each podcast app subscribes to. In general, I subscribe to two feeds in each app, my gigafeed that merges all of my podcast subscriptions, and my Queued feed which offers just a few episodes that I’ve selected.</p>
   <p>So far it's working pretty well!</p>
   <p>A couple of quick miscellaneous tips:</p>
   <ul>
    <li>
     <p><a href="https://podnews.net/">podnews.net</a> is a great resource for finding podcast RSS feeds. Just search by name, if necessary restricting to "The Podcast Index". When you find a podcast, you'll see a gazillion icons for apps and platforms, but the very last one will be the podcast's clean, beautiful, old-fashioned RSS feed.</p>
    </li>
    <li>
     <p>I subscribe to some very high frequency podcasts, like "NPR News Now", which comes out each hour. A wonderful feature of Inoreader is it caches the full history of your feeds. But here this becomes a problem. To prevent the history of high frequency feeds from drowning out eveything in my Inoreader podcasts folder I segregate high-frequency feeds into a "Podcasts HF" folder. When I merge feeds, I draw on the OPML from this folder as well as from my main podcasts folder. NPR's actual feed always includes only the single most recent episode, so it doesn't overwhelm my merged feed, which loads the feed to merge from NPR, not Inoreader folder.</p>
    </li>
   </ul>
   <p>You can subscribe to my subscriptions if you want, the URL is <a href="https://www.interfluidity.com/unify-rss/subscribed-podcasts.rss"><code>https://www.interfluidity.com/unify-rss/subscribed-podcasts.rss</code></a>.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-09-17 @ <a href="https://tech.interfluidity.com/2023/09/17/taking-control-of-podcasts-via-rss/index.html" class="pubtime">02:25 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Wed, 30 Aug 2023 15:45:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2023/08/30/suppressing-bloop-for-scala-cli-managed-services/index.html
      </guid>
      <description>
        <![CDATA[I am a huge fan of scala-cli. Among its many virtues, it reproduces the ergonomics of an interpreted language for compiled, super typesafe, Scala. (Java too!) Recently, I've written custom services that I execute using scala-cli run, and then deploy directly as systemd units. Here's a snippet of how I used to do this: ...

[Service]
Type=simple
User=unify-rss
Group=unify-rss
WorkingDirectory=/home/unify-rss/development/gitproj/unify-rss
ExecStart=scala-cli run main
...
 I noticed, however,...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/08/30/suppressing-bloop-for-scala-cli-managed-services/index.html</link>
      <title>Suppressing bloop for scala-cli managed services</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I am a huge fan of <a href="https://scala-cli.virtuslab.org/">scala-cli</a>.</p>
   <p>Among its many virtues, it reproduces the ergonomics of an interpreted language for compiled, super typesafe, Scala. (Java too!)</p>
   <p>Recently, I've <a href="https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html">written custom services</a> that I execute using <code>scala-cli run</code>, and then deploy directly as <a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files">systemd units</a>.</p>
   <p>Here's a snippet of <a href="https://github.com/swaldman/unify-rss/blob/2f4e58b2a68c5d0313548306450883b603805739/unify-rss.service">how I used to</a> do this:</p>
   <pre><code class="language-plaintext">...

[Service]
Type=simple
User=unify-rss
Group=unify-rss
WorkingDirectory=/home/unify-rss/development/gitproj/unify-rss
ExecStart=scala-cli run main
...
</code></pre>
   <p>I noticed, however, where I expected one long-running java process for a service's dedicated user, I ended up with two! In addition to my own application, a service called <code>bloop.Bloop</code> was running as well.</p>
   <p>JVMs are not exactly lightweight, and I don't want double the fun when running a service.</p>
   <p><a href="https://scalacenter.github.io/bloop/">bloop</a> is a Scala build service that many different editors, build systems, and other tools use to efficiently, incrementally, compile and run scala code. It runs as a persistent background process, which external tools tools can trigger with commands to build or execute the codebase, recompiling only what is necessary given what has changed.</p>
   <p>This is great for fast iteration during development, but unwieldy (and potentially increases a threat surface area) during deployment of persistent services.</p>
   <p>Fortunately, <code>scala-cli</code>, you can turn <code>bloop</code> off. <code>scala-cli</code> then falls back to the plain old Scala compiler to rebuild your application. It retains its core ergonomics: You can edit, then run, without any sort of compile / assemble / publish ceremony. The first run after a change might take a bit longer than it would have with <code>bloop</code>.</p>
   <p>Here is a snippet (slightly simplified) of <a href="https://github.com/swaldman/unify-rss/blob/fdda4547655e52036d55eff765e642251f9d4222/unify-rss.service">my current systemd unit</a>.</p>
   <pre><code class="language-plaintext">...

[Service]
Type=simple
User=unify-rss
Group=unify-rss
WorkingDirectory=/home/unify-rss/development/gitproj/unify-rss
ExecStart=scala-cli run --server=false main
...
</code></pre>
   <p>Note the <code>--server=false</code> argument to <code>scala-cli run</code>.</p>
   <p>Executing the service works just the same as before, rebuilding if necessary. But now no <code>bloop</code> service squanders precious server-side memory.</p>
   <p>My application is small enough that the additional build time is not an issue. The only visible difference when running <code>scala-cli</code> is that, when <code>bloop</code> is enabled and something has changed, I would see a message like</p>
   <pre><code class="language-plaintext">Compiling project (Scala 3.3.0, JVM)
Compiled project (Scala 3.3.0, JVM)
</code></pre>
   <p>With the <code>--server=false</code> flag gone (it defaults to true), that message disappears.</p>
   <p>But changes still recompile, and everything works great.</p>
   <hr>
   <p><strong>Note:</strong> the <code>--server=false</code> argument has to come <em>after</em> the <code>run</code> subcommand. Otherwise...</p>
   <pre><code class="language-plaintext">$ scala-cli --server=false run main
[error]  run is not a scala-cli sub-command and it is not a valid path to an input file or directory.
Try viewing the relevant help to see the list of available sub-commands and options.
  scala-cli --help
</code></pre>
   <p>The error message is unhelpfully mistaken. <code>run</code> in fact is a valid <code>scala-cli</code> subcommand. But <code>--server</code> is not a valid command-line option to the base <code>scala-cli</code> command, it is a valid command-line option to <code>scala-cli run</code>.</p>
   <pre><code class="language-plaintext">$ scala-cli --version
Scala CLI version: 1.0.4
Scala version (default): 3.3.0
</code></pre>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-08-30 @ <a href="https://tech.interfluidity.com/2023/08/30/suppressing-bloop-for-scala-cli-managed-services/index.html" class="pubtime">03:45 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Wed, 23 Aug 2023 13:15:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/index.html</guid>
      <description>
        <![CDATA[Motivation I'm really trying to put together a synchronous collaboration environment, self-hosting as much as possible, using third-party platforms as little as possible. My first step was getting Jitsi up and running. But conversations want notes. They sometimes become collaborations that should generate documents. I have, with various interlocutors, used Zoom's chat session as a kind of weirdly structured notes environment. Zoom does support one essential feature, "Save Chat", so that the...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/index.html</link>
      <title>Getting started with HedgeDoc</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#motivation" id="motivation" name="motivation" class="anchorlink"></a>Motivation</h2>
   <p>I'm really trying to put together a synchronous collaboration environment, self-hosting as much as possible, using third-party platforms as little as possible. My first step was <a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/index.html">getting Jitsi up and running</a>.</p>
   <p>But conversations want notes. They sometimes become collaborations that should generate documents.</p>
   <p>I have, with various interlocutors, used Zoom's chat session as a kind of weirdly structured notes environment. Zoom does support one essential feature, "Save Chat", so that the notes you've shared, disguised as remarks, can be retained. Jitsi does offer chat, but it's a bit unwieldy and lacks that essential save feature. Jitsi chat is really not pervertable to a notes application.</p>
   <p>I've been looking for something better, and today I found <a href="https://hedgedoc.org/">HedgeDoc</a>, which looks perfect, and pretty amazing! Give it a look. Really.</p>
   <p>So, I decided to install HedgeDoc on my new collaboration server, the same Digitial Ocean droplet on which I <a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/index.html">just installed Jitsi</a>.</p>
   <p>(I don't think HedgeDoc will be super resource intensive, though I am a bit worried that adding bells and whistles might slow down the videoconferencing core on what already is virtualized and underpowered hardware.)</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#trepidation" id="trepidation" name="trepidation" class="anchorlink"></a>Trepidation</h2>
   <p>HedgeDoc is a <a href="https://nodejs.org/en">node.js</a> application. In general, I find node applications intimidating. Their builds seem sprawling with little JSON and YML and lock files I don't understand. They use JSON for human-edited config files, but JSON is persnicketty and allows no comments. Life is full of persnicketty config files, but when they are not JSON, they tend to be lavish with hints in comments and suggestions you can comment out or comment in. Some people <a href="https://groups.google.com/g/nodejs/c/NmL7jdeuw0M/m/yTqI05DRQrIJ">argue</a> (ht <a href="https://hachyderm.io/@llimllib/110936243164836553">Bill Mill</a>) that the cleanliness that results from a hard separation between configuration data and documentation is a feature not a bug. I myself am a bug, though, and prefer informative clutter to sterile helplessness.</p>
   <p>Anyway, maybe some day I will become a Node-knower and have opinions about <a href="https://yarnpkg.com/">yarn</a> vs <a href="https://www.npmjs.com/">npm</a> and stuff. But that day has not yet come. In the meantime, I just run mysterious incantations from the <a href="https://docs.hedgedoc.org/setup/getting-started/">installation docs</a> and marvel at just how many dependencies seem to be flowing in.</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#installation" id="installation" name="installation" class="anchorlink"></a>Installation</h2>
   <p>I went for HedgeDoc's <a href="https://docs.hedgedoc.org/setup/manual-setup/">Manual Installation</a>. My first step was to download <code>node</code> itself. The version that came in with <code>apt install nodejs</code> was too old, so I found some instructions on <a href="https://computingforgeeks.com/how-to-install-node-js-on-ubuntu-debian/">how to</a> (easily, lazily) get <code>node.js v16</code> onto my Ubuntu 22.04 server.</p>
   <p>I took that slowly, downloading the script to a file before executing it to at least <em>glance</em> at what I'd be running as root.</p>
   <p>I'm not a big fan of <code>curl -sL https://whoknowswhat.com/script.sh | bash -</code> style installs. But any half competent malicious script-kiddie could have gotten past my cursory inspection. Of course I end up treating most of the dependecies I download as pure black boxes. I hope that <code>deb.nodesource.com</code> is trustworthy!</p>
   <p>I was also going to need a Postgres database. That was just <code>apt install postgresql</code>.</p>
   <p>Once Postgres was installed I made a user <code>hedgedoc</code>, and could perform most of the build as that not-so-terribly powerful persona. <code>hedgedoc</code> was going to be the user under whose aegis the service would be run, so I needed it to have access to a database under Postgres. So, something like...</p>
   <pre><code class="language-plaintext"># su postgres
$ createuser hedgedoc
$ psql
postgres=# CREATE DATABASE hedgedoc;
postgres=# ALTER DATABASE hedgedoc OWNER TO hedgedoc;
postgres=# &lt;ctrl-D to exit psql&gt;
$ &lt;ctrl-D to exit user postgres&gt;
# su hedgedoc
$ psql
hedgedoc=&gt; ALTER USER hedgedoc WITH PASSWORD 'not-actually-this';
</code></pre>
   <p>That last bit actually came later, as I was <a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-1-postgress-password">trying to figure out why the app couldn't connect to the database</a>. Even though under postgres' default config passwordless <code>psql</code> was fine, the node app did need a password to connect over <code>localhost</code>.</p>
   <p>Anyway, in real life, setting up the password came later, but we might as well get it over with now.</p>
   <p>OK. I love <code>postgres</code>. That was the easy stuff. Now the hard part. The node app.</p>
   <p>The instructions ask us to set up some node dependencies with <code>npm</code> in order to get <code>yarn</code> to work. (They are frenemies I guess.)</p>
   <pre><code class="language-plaintext"># npm install -g node-gyp
# npm install -g npm install -g corepack
# corepack enable
</code></pre>
   <p>Then, as user <code>hedgedoc</code>, we clone the application repository and check out tag 1.9.9, the latest release. Then, <a href="https://docs.hedgedoc.org/setup/manual-setup/">following the instructions</a>, we run a setup script.</p>
   <pre><code class="language-plaintext">$ git clone https://github.com/hedgedoc/hedgedoc.git
$ git checkout 1.9.9
$ cd hedgedoc
$ bin/setup
</code></pre>
   <p>Stuff happens.</p>
   <p>When the script is done, we have a file called <code>config.json</code> (just a copy of repository file <code>config.json.example</code>).</p>
   <p>I then did my best to configure the application. This was... hard. The <a href="https://docs.hedgedoc.org/configuration/">configuration is very elaborate</a>. I had to iterate through some snags to get it right. Plus, the example file is divided into three separate configs, one each for <code>test</code>, <code>development</code>, and <code>production</code>. I only edited <code>production</code>, but the existence of multiple configurations became the source of later confusion. (See <a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-3-registering-users-hangs">below</a>.)</p>
   <p>Anyway, with a first-draft config in hand, we can complete the build instructions:</p>
   <pre><code class="language-plaintext">$ yarn install --immutable
$ yarn build
</code></pre>
   <p>Hooray!</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#consternation" id="consternation" name="consternation" class="anchorlink"></a>Consternation</h2>
   <p>HedgeDoc was built. The next step was getting it to work. This was an iterative process with a few hitches.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-1-postgress-password" id="hitch-1-postgress-password" name="hitch-1-postgress-password" class="anchorlink"></a>Hitch 1: Postgress Password</h3>
   <p>First, following the instructions, I run (as <code>hedgedoc</code>)</p>
   <pre><code class="language-plaintext">$ NODE_ENV=production yarn start
</code></pre>
   <p>I get a lot of messages indicating that the app is failing to connect to the database. My database config at this point looked like</p>
   <pre><code class="language-json">{
    "production": {
        "db": {
            "username": "hedgedoc",
            "password": "",
            "database": "hedgedoc",
            "host": "127.0.0.1",
            "port": "5432",
            "dialect": "postgres"
        }
    }
}    
</code></pre>
   <p>Since I could authenticate to <code>psql</code> locally as hedgedoc without a password under the default authentication policy (<code>see /etc/postgresql/14/main/pg_hba.conf</code>), I wondered if passwordless would be okay. Nope.</p>
   <p>So I gave <code>hedgedoc</code> a password (<code>ALTER USER hedgedoc WITH PASSWORD 'not-actually-this';</code>, see above), and retried <code>NODE_ENV=production yarn start</code>. It started up beautifully.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-2-proxy-through-nginx" id="hitch-2-proxy-through-nginx" name="hitch-2-proxy-through-nginx" class="anchorlink"></a>Hitch 2: Proxy through <code>nginx</code></h3>
   <p>This wasn't a hitch really. It was planned and expected. But at this point, I still couldn't see hedgedoc, which was getting served on localhost only at port 3000. The HedgeDoc docs <a href="https://docs.hedgedoc.org/guides/reverse-proxy/#nginx">very helpfully include</a> a sample <code>nginx.conf</code> for proxying the service.</p>
   <p>Before I could do much with this, I had to decide at what URL I wanted the app to be served. I decided I'd make a separate virtual host for it, <code>notes.interfluidity.com</code>.</p>
   <p>So, I updated my DNS for interfluidity with a <code>CNAME</code> record pointing back to <code>loiter.interfluidity.com</code>, then used <code>certbot</code> / Let's Encrypt to get certificates for the new name (briefly stopping <code>nginx</code> so I could authenticate with certbot's internal web service):</p>
   <pre><code class="language-plaintext"># systemctl stop nginx
# certbot certonly -d notes.interfluidity.com
# systemctl start nginx
</code></pre>
   <p>Now I could copy the <code>nginx</code> proxy setup from the docs to <code>/etc/nginx/sites-available/notes.interfluidity.com.conf</code>, and edit it to fill in the new certificate locations. Initially this failed, because the reference config contained references to other ssl config I didn't have.</p>
   <pre><code class="language-plaintext">    include options-ssl-nginx.conf;
    ssl_dhparam ssl-dhparams.pem;
</code></pre>
   <p>I replace the first line with SSH config I have from elsewhere, and just omit (as I usually do, <a href="https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters">is this bad?</a>) the <code>ssl_dhaparam</code> directive.</p>
   <p>I also needed to add a stanza to redirect traffic from port 80 (regular <code>http</code>) to <code>https</code> at port 443.</p>
   <p>Ultimately, <code>/etc/nginx/sites-available/notes.interfluidity.com.conf</code> looks <a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#nginxconf">like this</a>.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-3-registering-users-hangs" id="hitch-3-registering-users-hangs" name="hitch-3-registering-users-hangs" class="anchorlink"></a>Hitch 3: Registering users hangs</h3>
   <p>This one befuddled me for a while. I don't want my HedgeDoc installation to be an open utility for anyone one the internet. So I have it configured to not permit web registation of new users. In <code>config.json</code>, at this point, I had</p>
   <pre><code class="language-json">{
    "test": {
        "db": {
            "dialect": "sqlite",
            "storage": ":memory:"
        },
        "linkifyHeaderStyle": "gfm"
    },
    "development": {
        "loglevel": "debug",
        "db": {
            "dialect": "sqlite",
            "storage": "./db.hedgedoc.sqlite"
        },
        "domain": "localhost",
        "urlAddPort": true
    },
    "production": {
        ...
        "email": true,
        "allowEmailRegister": false,
        "allowAnonymous": false,
        "allowAnonymousEdits": true,
	...
    }
}    
</code></pre>
   <p>Googling around, absent web registration of e-mails or using a third-party to authenticate, the way to set up new users is a utility bundled in the HedgeDoc distribution, <code>bin/manage_user</code>.</p>
   <pre><code class="language-plaintext">$ bin/manage_users 
You did not specify either --add or --del or --reset!

Command-line utility to create users for email-signin.

Usage: bin/manage_users [--pass password] (--add | --del) user-email
	Options:
		--add 	Add user with the specified user-email
		--del 	Delete user with specified user-email
		--reset Reset user password with specified user-email
		--pass	Use password from cmdline rather than prompting
</code></pre>
   <p>But when I try</p>
   <pre><code class="language-plaintext">$ bin/manage_users --pass NotGonnaTellYou --add swaldman@mchange.com
</code></pre>
   <p>I find that the script... just hangs.</p>
   <p>I have to <code>&lt;ctrl-c&gt;</code> to kill it. It provides no messages or information.</p>
   <p>Reviewing the script, its first few lines are</p>
   <pre><code class="language-javascript">#!/usr/bin/env node                                                                                                                                                                      

// First configure the logger, so it does not spam the console                                                                                                                           
const logger = require('../lib/logger')
logger.transports.forEach((transport) =&gt; transport.level = 'warning')
</code></pre>
   <p>The trick to making <code>bin/manage_users</code> informative was just commenting out the lines about the logger, so that it DOES spam the console.</p>
   <pre><code class="language-javascript">#!/usr/bin/env node                                                                                                                                                                      

// First configure the logger, so it does not spam the console                                                                                                                           
//const logger = require('../lib/logger')
//logger.transports.forEach((transport) =&gt; transport.level = 'warning')
</code></pre>
   <p>Messages then result, which renders our problem easy to diagnose. The script tries and fails to hit an <code>sqlite</code> database, because it was using the <code>development</code> rather than <code>production</code> config. (See the early <code>config.json</code> fragment above.)</p>
   <p>To solve this, it's just...</p>
   <pre><code class="language-plaintext">$ NODE_ENV=production bin/manage_users --pass NotGonnaTellYou --add swaldman@mchange.com 
</code></pre>
   <p>With the script's logger still commented out to encourage verbosity, this yields...</p>
   <pre><code class="language-plaintext">023-08-23T00:42:46.127Z warn: 	Neither 'domain' nor 'CMD_DOMAIN' is configured. This can cause issues with various components.
Hint: Make sure 'protocolUseSSL' and 'urlAddPort' or 'CMD_PROTOCOL_USESSL' and 'CMD_URL_ADDPORT' are configured properly.
2023-08-23T00:42:46.130Z warn: 	Session secret not set. Using random generated one. Please set `sessionSecret` in your config.json file. All users will be logged out.
2023-08-23T00:42:46.137Z error: 	uncaughtException: Dialect needs to be explicitly supplied as of v4.0.0
</code></pre>
   <p>I configure</p>
   <pre><code class="language-plaintext">{
    ...
    "production": {
        "domain": "notes.interfluidity.com",
	...,
        "sessionSecret": "Not-Gonna-Tell-You-64-Chars-Long-Though-I-Don't-Think-That's-Obligatory",
	...
    }
}
</code></pre>
   <p>Then</p>
   <pre><code class="language-plaintext">$ NODE_ENV=production bin/manage_users --pass NotGonnaTellYou --add swaldman@mchange.com 
</code></pre>
   <p>succeeds.</p>
   <pre><code class="language-plaintext">2023-08-23T00:42:59.833Z debug: 	dmp worker process started
Using password from commandline...
Created user with email swaldman@mchange.com
</code></pre>
   <p>But I should have paid more attention to that hint!</p>
   <pre><code class="language-plaintext">Hint: Make sure 'protocolUseSSL' and 'urlAddPort' or 'CMD_PROTOCOL_USESSL' and 'CMD_URL_ADDPORT' are configured properly.
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-4-login-form-wont-submit" id="hitch-4-login-form-wont-submit" name="hitch-4-login-form-wont-submit" class="anchorlink"></a>Hitch 4: Login form won't submit</h3>
   <p>When I run it from the command line, the web application is now served at <code>notes.interfluidity.com</code>. I've succeeded at registering myself as a user. I hit the sign-in button, and a login form appears. but when I hit <code>submit</code>, nothing at all happens.</p>
   <p>To get any information at all about this, I needed to go to the Javascript console of my browser.</p>
   <p>There, only there, I could see log messages about the problem, noting security policy violations. The form was only allowed to hit the app that served it, the app that served it was <code>https://notes.interfluidity.com/</code>. But the form was trying to hit <code>http://notes.interfluidity.com/</code>.</p>
   <p>Spot the difference? It's <code>https</code> vs <code>http</code>.</p>
   <p>The solution was to add a <a href="https://docs.hedgedoc.org/configuration/">config parameter</a>...</p>
   <pre><code class="language-plaintext">{
    ...
    "production": {
	...,
        "protocolUseSSL": true,
	...
    }
}
</code></pre>
   <p>Now I can login!</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#consummation" id="consummation" name="consummation" class="anchorlink"></a>Consummation</h2>
   <p>At this point, everything basically works. After the problems <a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#hitch-3-registering-users-hangs">introduced</a> by accidentally hitting the <code>development</code> config, I decide to clean away the unused configurations (<code>debug</code>, <code>development</code>) from <code>config.json</code>. The final (well, current) version is <a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#final-config-json">below</a>.</p>
   <p>I want HedgeDoc to be a permanent, <code>systemd</code> managed service, so I copy and modify the <a href="https://docs.hedgedoc.org/setup/manual-setup/#systemd-unit-example">unit file example the documentation helpfully supplies</a>. I have to uncomment the <code>After=postgresql.service</code> line, modify the <code>WorkingDirectory</code> to point to the location of my HedgeDoc build (which is not in <code>opt</code>), and comment out <code>ProtectHome=true</code> (because my HedgeDoc build is in fact in user <code>hedgedoc</code>'s home directory).</p>
   <p>Then it's just the usual, a symlink to the unit file from <code>/etc/systemd/system</code>, and then...</p>
   <pre><code class="language-plaintext"># systemctl enable hedgedoc
# systemctl start hedgedoc
</code></pre>
   <p>(It took a couple of rounds of editing the unit file to get the startup to succeed. Mostly I had to <a href="https://askubuntu.com/questions/1419541/trying-to-set-up-a-systemd-service-keep-getting-changing-to-the-requested-work">figure out</a> to comment out <code>ProtectHome=true</code>.)</p>
   <p>HedgeDoc offers a lot of integrations. One feature which I like is you can export your markdown documents into GitHub gists. I followed <a href="https://docs.hedgedoc.org/guides/auth/github/">these instructions</a>, and gist export worked with no trouble.</p>
   <p>That's it! Everything seems golden!</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#security-considerations" id="security-considerations" name="security-considerations" class="anchorlink"></a>Security considerations</h2>
   <p>HedgeDoc's documentation is admirably security conscious, and its defaults are unusually tight. I made a few choices that involved weakening those defaults:</p>
   <ul>
    <li>
     <p>I've configured <code>csp.allowFraming</code> to <code>true</code>. I intend for my "collaboration server" to take the form of a palette of multiple apps embedded on a webpage in <code>iframe</code>s. Each frame would be maximizable, or you could view work with multiple frames at once. So I really want HedgeDoc to work from an iframe.</p>
     <ul>
      <li>The <a href="https://docs.hedgedoc.org/configuration/">docs</a> "<strong>strongly recommend disabling</strong> this option, as it increases the attack surface of XSS attacks." (Their emphasis!) If users do choose to enable framing, the docs <a href="https://docs.hedgedoc.org/faq/">recommend</a> serving over <code>https</code> and setting a <code>cookiePolicy</code> of <code>none</code>, which we do. So identification is by SSL session information, and there is no cookie to steal. I feel pretty okay with this, but what am I missing?</li>
     </ul>
    </li>
    <li>
     <p>As discussed above, I don't set <a href="https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters"><code>ssl_dhparam</code></a>) in my SSH config. I've never encountered this before, but now I wonder whether I shouldn't get in the habit of setting this up across the sites I maintain. How much does it matter?</p>
    </li>
    <li>
     <p>I often build services beneath the home directory of the user I create to run them. They are not run on machines on which users are likely to store sensitive personal information in home directories, but given the existence of the <code>systemd</code> <code>ProtectHome</code> restriction, perhaps it's a bad habit that I should revise?</p>
    </li>
   </ul>
   <p>I also remain concerned about the promiscuity of the <code>node</code> dependency ecosystem, and the possibility of supply chain attacks. I'm concerned about that across ecosystems: The JVM world in which I typically develop carries some of the same risks.</p>
   <p>But the problem is <a href="https://timotijhof.net/posts/2019/protect-yourself-from-npm/">arguably worse in the node ecosystem</a>. I'm not running in <code>docker</code> containers or <code>chroot</code> or anything like that.</p>
   <p>The Digital Ocean droplet I am running on is pretty low-stakes in terms of the information it stores, but it wouldn't be great if some third party gave themselves access and could join a botnet or spy on videoconferences or read all the meeting notes.</p>
   <p>Running <code>npm -g install</code> as root, which I did do, feels partcularly ill-advised and dirty. I think I'll try to avoid that in the future.</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#update-2023-10-20" id="update-2023-10-20" name="update-2023-10-20" class="anchorlink"></a>Update 2023-10-20</h2>
   <p>I use my HedgeDoc's instance as a notes platform for weekly meetings, and I want the notes to be created in advance, so that people can suggest agenda items in advance. I want to automate this.</p>
   <p>HedgeDoc does offer <a href="https://docs.hedgedoc.org/dev/api/">an API</a> by which one can automate creation of new notes. So, the first thing I did was get comfortable using that by <a href="https://github.com/swaldman/scalascripts-misc/blob/main/bin/hedgedoc-new-note">writing a script</a> to create a new note.</p>
   <p>However, I hit another snag. I want the notes to be freely editable upon creation (so that the people my automaton notifies about the new notes can add their agenda items). As far as I can tell, HedgeDoc's API does not offer any means of setting note permissions.</p>
   <p>Fortunately, in HedgeDoc's <a href="https://docs.hedgedoc.org/configuration/">config file</a>, there is a <code>defaultPermission</code> key. Until now, I've not been using it, so the default <code>defaultPermission</code> defaulted to <code>editable</code>.</p>
   <p>I've just inserted this key explicitly in the config file, with the value <code>freely</code>. It seems to work! New notes I make (via the API or in the app) are now freely editable by default, as I want.</p>
   <p>It would be better if there were an API to reset permissions. I'd love to automate setting notes to <code>locked</code> after my meetings.</p>
   <hr>
   <h2><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#appendix" id="appendix" name="appendix" class="anchorlink"></a>Appendix</h2>
   <h3><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#final-configjson" id="final-configjson" name="final-configjson" class="anchorlink"></a>final config.json</h3>
   <pre><code class="language-plaintext">{
    "production": {
        "domain": "notes.interfluidity.com",
        "protocolUseSSL": true,
        "email": true,
        "allowEmailRegister": false,
        "host": "localhost",
        "allowAnonymous": false,
        "allowAnonymousEdits": true,
        "allowFreeURL": true,
        "loglevel": "info",
        "hsts": {
            "enable": true,
            "maxAgeSeconds": 31536000,
            "includeSubdomains": true,
            "preload": true
        },
        "csp": {
            "enable": true,
            "directives": {
            },
            "upgradeInsecureRequests": "auto",
            "addDefaults": true,
            "addDisqus": false,
            "addGoogleAnalytics": false,
            "allowFraming": true
        },
        "cookiePolicy": "none",
        "db": {
            "username": "hedgedoc",
            "password": "Not-Gonna-Tell-You",
            "database": "hedgedoc",
            "host": "127.0.0.1",
            "port": "5432",
            "dialect": "postgres"
        },
        "sessionSecret": "Not-Gonna-Tell-You",
        "github": {
            "clientID": "Not-Gonna-Tell-You",
            "clientSecret": "Not-Gonna-Tell-You"
        }
    }
}
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/#nginxconf" id="nginxconf" name="nginxconf" class="anchorlink"></a>nginx.conf</h3>
   <pre><code class="language-plaintext"># modified from https://docs.hedgedoc.org/guides/reverse-proxy/

map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
}
server {
    listen 80;
    listen [::]:80;
    server_name notes.interfluidity.com;

    location / {
        return 301 https://$host$request_uri;
    }
}
server {
        server_name notes.interfluidity.com;

        location / {
                proxy_pass http://127.0.0.1:3000;
                proxy_set_header Host $host; 
                proxy_set_header X-Real-IP $remote_addr; 
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
                proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /socket.io/ {
                proxy_pass http://127.0.0.1:3000;
                proxy_set_header Host $host; 
                proxy_set_header X-Real-IP $remote_addr; 
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
        }

    listen [::]:443 ssl http2;
    listen 443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/notes.interfluidity.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/notes.interfluidity.com/privkey.pem;

    # Mozilla Guideline v5.4, nginx 1.17.7, OpenSSL 1.1.1d, intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;  # about 40000 sessions
    ssl_session_tickets off;
}
</code></pre>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-08-23 @ <a href="https://tech.interfluidity.com/2023/08/23/getting-started-with-hedgedoc/index.html" class="pubtime">01:15 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Mon, 21 Aug 2023 16:00:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/index.html</guid>
      <description>
        <![CDATA[TL;DR Jitsi is a complicated system! It was surprisingly easy to set up, though. I'd feel better if I understood it better so I'd know that I can do what I want and fix whatever breaks. Nevertheless, it works, and it's very cool to be able to embed a teleconference in straight HTML/CSS! Introduction A few weeks ago there was a bit of a kerfuffle as Zoom updated their terms of service in ways that would apparently permit training AIs with surveillance of our interactions in Zoom teleconferences....]]>
      </description>
      <link>https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/index.html</link>
      <title>Getting started with Jitsi</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-getting-started-with-jitsi">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#tldr" id="tldr" name="tldr" class="anchorlink"></a>TL;DR</h2>
   <p><a href="https://jitsi.org/">Jitsi</a> is a complicated system! It was surprisingly easy to set up, though.</p>
   <p>I'd feel better if I understood it better so I'd know that I can do what I want and fix whatever breaks.</p>
   <p>Nevertheless, it works, and it's very cool to be able to <a href="https://tech.interfluidity.com/html/jitsi-frame.html?roomName=Welcome+Room&amp;description=Welcome+to+an+embedded+teleconference!">embed a teleconference in straight HTML/CSS</a>!</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#introduction" id="introduction" name="introduction" class="anchorlink"></a>Introduction</h2>
   <p>A few weeks ago there was a <a href="https://stackdiary.com/zoom-terms-now-allow-training-ai-on-user-content-with-no-opt-out/">bit of a kerfuffle</a> as Zoom updated their terms of service in ways that would apparently permit training AIs with surveillance of our interactions in Zoom teleconferences. Zoom has since <a href="https://www.theverge.com/2023/8/11/23828649/zoom-communications-like-data-train-ai-artificial-intelligence-models">clarified this, or walked it back,</a> depending upon how generously you want to interpret their original intentions.</p>
   <p>I've been a paying Zoom subscriber for years, and I'm willing to take the more generous interpretation. But regardless of Zoom's intentions, the incident was another reminder that large, centralized tech platforms are just a dangerous architecture, under which again and again firms and people I used to admire have succumbed to temptations of "<a href="https://pluralistic.net/2023/01/21/potemkin-ai/">enshittification</a>".</p>
   <p>Plus, I want to be able to play with the technology I use. I don't want to tether my own skills and habits to some company's propriety plug-ins and APIs if I can help it. I want to use open, freely available tools to experiment with how my teleconferences work and integrate any extras I might wish to bring to them.</p>
   <p>There are a few self-hostable, open source teleconferencing platforms, such as <a href="https://jitsi.org/">Jitsi</a> and <a href="https://edumeet.org/">Edumeet</a>. Then there are lower level libraries like <a href="https://mediasoup.org/">Mediasoup</a> and <a href="https://janus.conf.meetecho.com/">Janus</a>.</p>
   <p>I don't have a clue about any of this stuff. (I am very open to advice!) So I'm playing.</p>
   <p>My first attempt has been with <a href="https://jitsi.org/">Jitsi</a>. On the one-hand, I like that it has been <a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart">easy to set up</a>, and easy to embed into HTML and mess with with ordinary css and javascript. I am tentatively very happy!</p>
   <p>On the other hand, I am very aware that it's a complicated stack full of components I am still struggling to understand. When (due to my own error!) the cookbook set-up seemed to fail, I was really at a loss about how I might debug the thing. (See below on the details of how I made my own life complicated.)</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#what-little-i-understand-about-the-jitsi-stack" id="what-little-i-understand-about-the-jitsi-stack" name="what-little-i-understand-about-the-jitsi-stack" class="anchorlink"></a>What (little) I understand about the Jitsi stack</h2>
   <p>Ultimately, Jitsi requires the collaboration of several services, which can be run on a single or multiple machines, in order to function. On my setup, I have</p>
   <ul>
    <li><a href="https://prosody.im/">prosody</a></li>
    <li><a href="https://github.com/jitsi/jicofo">jicofo</a></li>
    <li><a href="https://jitsi.org/jitsi-videobridge/">jitsi-videobridge</a></li>
    <li><a href="https://github.com/coturn/coturn">coturn</a></li>
   </ul>
   <p>Then I configure and serve (via <a href="https://nginx.org/">nginx</a>) <code>jitsi-meet</code>, which is a client-side application that hits these services. You can see a diagram <a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker">here</a>. Let's steal that, straight from <code>jitsi.org</code>:</p>
   <div style="text-align: center;">
    <img src="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/docker-jitsi-meet-afafdf87fea30a2fa6412baa4a3f8248.png">
   </div>
   <p>As I understand (or perhaps misunderstand)</p>
   <ul>
    <li><code>prosody</code> is an <a href="https://xmpp.org/">XMPP server</a>, the standard invented and used by open-source instant messaging platform <a href="https://www.jabber.org/">Jabber</a>, which was eventually embraced, then eclipsed and support discontinued, by Google. Of course <code>Jabber</code> lives on, albeit more quietly. Importantly, the XMPP protocol its developers invented was extended far beyond organizing text-based "MUCs" (multiuser conferences) into the realm of audio and videoconferencing via "<a href="https://xmpp.org/extensions/xep-0166.html">Jingle</a>". Jitsi uses prosody for establishing conferences and authentication of participants, as far as I can tell.</li>
    <li><code>jicofo</code>, as I understand it, is a service that intermediates between clients (ie web browsers) and the XMPP server <code>prosody</code>, and via that XMPP server, the "videobridge" that actually serves audiovideo data, using the aforementioned Jingle protocol with clients and a distinct protocol called <code>colibri v2</code> with the videobridge component.</li>
    <li><code>jitsi-videobridge</code> is — I think! — the component that actually serves audiovideo data to clients.</li>
    <li><code>coturn</code> is relatively straightforward. It helps clients behind NAT (network address translation, ie using fake IP addresses) find and reach their outward-facing IP addresses (<a href="https://en.wikipedia.org/wiki/STUN">STUN protocol</a>), and if necessary proxies audiovisual data to circumvent nettlesome layers of NAT and firewalls (<a href="https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT">TURN protocol</a>). <code>coturn</code> makes it possible for the significant share of the internet that can't reach the network without translation or proxying to participate in teleconferences.</li>
   </ul>
   <p>There is so much I don't understand about all this. Are <code>jicofo</code>/<code>prosody</code> only involved in establishing and terminating sessions, or do they have a role throughout a "MUC"? Via <code>nginx</code>, clients seem to have access both to audiovisual data (as <a href="https://en.wikipedia.org/wiki/BOSH_(protocol)">BOSH</a>), and to XMPP via <code>prosody</code>, and to the <code>videobridge</code> service via directly. Who hits <code>jicofo</code> when?</p>
   <p>I don't know. Again, if something in this complex collaboration broke, how would I figure out how to debug and fix it? That so far is my main issue with <code>Jitsi</code>.</p>
   <p>There are two components in the Jitsi stack that I am not yet using. <a href="https://github.com/jitsi/jigasi">Jigasi</a> would be a bridge from <code>Jitsi</code> to and from standard VoIP "<a href="https://en.wikipedia.org/wiki/Session_Initiation_Protocol">Session Initiation Protocol (SIP)</a>" sessions, allowing telephone dial-in and piping of audio into external transcription services. <a href="https://github.com/jitsi/jibri">Jibri</a> is a very resource intensive service that basically runs a headless chrome browser which silently joins a conference to receive video and audio and translate it into MP4 data for recording and streaming.</p>
   <p>It's a lot!</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#an-interesting-note-about-prosody-configuration" id="an-interesting-note-about-prosody-configuration" name="an-interesting-note-about-prosody-configuration" class="anchorlink"></a>An interesting note about prosody configuration</h2>
   <p>The host on which I've (perhaps only temporarily!) deployed <code>Jitsi</code> is called <code>loiter.interfluidity.com</code>. My prosody configuration contains lines like</p>
   <pre><code class="language-plaintext">VirtualHost "loiter.interfluidity.com"
  ...
VirtualHost "auth.loiter.interfluidity.com"
  ...
Component "focus.loiter.interfluidity.com" "client_proxy"
  ...  
</code></pre>
   <p>None of these subdomains are configured, or are required to be configured, in DNS.</p>
   <p>The installation created a self-signed certificate for the "virtual host" <code>auth.loiter.interfluidity.com</code>, as well as for parent domain <code>loiter.interfluidity.com</code>.</p>
   <p>I am guessing that services make secure connections internally, via <code>localhost</code>, to <code>auth.loiter.interfluidity.com</code>, using that "virtual host" name in a <code>Host:</code> header. I think this configuration scheme is intended for at least <code>auth</code> (not necessarily "component" <code>focus</code>) to be a separate host, but when we want to host it all in one place, rather than having us go to the trouble of <code>CNAME</code>-ing our server <code>auth.loiter.interfluidity.com</code>, it is configured to just pretend internally. It feels like a cell absorbing some precambrian bacteria to invent the mirochondrion.</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#installation" id="installation" name="installation" class="anchorlink"></a>Installation</h2>
   <p>I basically followed <a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart">the developers' Ubuntu deployment docs</a>.</p>
   <p>I created a <a href="https://www.digitalocean.com/">digitalocean</a> Ubuntu 22.04 (LTS) "basic" "regular" 4GB/2CPU/80GB for $24/month.</p>
   <p>Then, simplifying just a bit...</p>
   <pre><code class="language-plaintext"># apt update
# apt upgrade
# apt install emacs-nox
# apt-add-repository universe
# hostnamectl set-hostname loiter.interfluidity.com
emacs /etc/hosts
</code></pre>
   <p>I fill in my server's IP address for <code>loiter.interfluidity.com loiter</code>.</p>
   <p>Then I just paste in the following from <a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart">Jitsu's cookbook instructions</a>, which trusts prosody's developers to maintain a repository from which I can install and update via <code>apt</code>:</p>
   <pre><code class="language-plaintext">sudo curl -sL https://prosody.im/files/prosody-debian-packages.key -o /etc/apt/keyrings/prosody-debian-packages.key
echo "deb [signed-by=/etc/apt/keyrings/prosody-debian-packages.key] http://packages.prosody.im/debian $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/prosody-debian-packages.list
sudo apt install lua5.2
</code></pre>
   <p>Then I do the same for <code>jitsi.org</code> (pasting another short script):</p>
   <pre><code class="language-plaintext">curl -sL https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c 'gpg --dearmor &gt; /usr/share/keyrings/jitsi-keyring.gpg'
echo "deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/" | sudo tee /etc/apt/sources.list.d/jitsi-stable.list
</code></pre>
   <p>Then</p>
   <pre><code class="language-plaintext"># apt update
# apt upgrade
</code></pre>
   <p>Here I deviate a bit from the canned instructions. I know I want nginx and certbot certs...</p>
   <pre><code class="language-plaintext"># apt install nginx
# apt install certbot
</code></pre>
   <p>I manually fetch my certificates (I've already configured a DNS <code>A</code> record for <code>loiter.interfluidity.com</code>.):</p>
   <pre><code class="language-plaintext"># certbot certonly -d loiter.interfluidity.com
</code></pre>
   <p>During the later installation of <code>Jitsi</code> components, I'll have to supply a path to my <code>fullchain.pem</code> and <code>privkey.pem</code> files. The installation has the option of running certbot for you, but if you do it yourself, you'll want to note these paths.</p>
   <p>There were some differences in recommended firewall config between the written instructions and <a href="https://jitsi.org/blog/new-tutorial-installing-jitsi-meet-on-your-own-linux-server/">a video tutorial</a>. I went with the following hybrid. So far, it seems fine.</p>
   <pre><code class="language-plaintext"># ufw allow in ssh
# ufw allow in 80/tcp
# ufw allow in 443/tcp
# ufw allow in 10000:20000/udp
# ufw allow in 3478/udp
# ufw allow in 5349/tcp
# ufw enable
</code></pre>
   <p>Then I did something stupid. More about that <a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#something-stupid">below</a>.</p>
   <p>The next thing I should have done was...</p>
   <pre><code class="language-plaintext"># apt install jitsi-meet
</code></pre>
   <p>It prompts for a bunch of stuff, like certificate paths. It prompts whether you want to support dial-in participants, by making an account on their hosted Jitsu-as-a-service. I said no. It prints the following banner in case I change my mind:</p>
   <pre><code class="language-plaintext">
       ;dOocd;
     .dNMM0dKO.
     lNMMMKd0K,
    .xMMMMNxkNc
     dMMMMMkxXc
     cNMMMNl..
     .kMMMX;             Interested in adding telephony to your Jitsi meetings?
      ;XMMMO'
       lNMMWO'           Sign up on https://jaas.8x8.vc/components?host=loiter.interfluidity.com
        lNMMM0,                        and follow the guide in the dev console.
         lXMMMK:.
          ;KMMMNKd.  'oo,
           'xNMMMMXkkkkOKOl'
             :0WMMMMMMNOkk0Kk,
              .cdOWMMMMMWXOkOl
                 .;dKWMMMMMXc.
                    .,:cll:'

</code></pre>
   <p>Then it just works!</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#something-stupid" id="something-stupid" name="something-stupid" class="anchorlink"></a>Something stupid</h3>
   <p>Well it should have worked. I did something stupid. I manually installed <code>nginx</code> (because reading the docs I saw that serving via nginx was optional, I knew I wanted it, and the docs said it'd be installed if nginx was), and then I set up my usual config for host <code>loiter.interfluidity.com</code> right in <code>/etc/nginx/nginx.conf</code>.</p>
   <p>That occluded the Jitsi installer's very elaborate config in <code>/etc/nginx/sites-available/loiter.interfluidity.com.conf</code>, then <a href="https://maximorlov.com/tips/sites-available-vs-sites-enabled-in-nginx/">symlinked into</a> <code>/etc/nginx/sites-enabled</code>.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#it-works" id="it-works" name="it-works" class="anchorlink"></a>It works!</h3>
   <p>After removing my occluding configuration from <code>/etc/nginx/nginx.conf</code> and</p>
   <pre><code class="language-plaintext"># systemctl restart nginx
</code></pre>
   <p>I could go to <code>https://loiter.interfluidity.com/</code> and see the default Jitsu webapp.</p>
   <p>You can see that default app at <a href="https://meet.jit.si/">https://meet.jit.si/</a>. I'll soon disable that at the base of my site, and in general try to add a bit of authentication to my installation!</p>
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#using-the-iframe-api-to-embed-conferences-in-html" id="using-the-iframe-api-to-embed-conferences-in-html" name="using-the-iframe-api-to-embed-conferences-in-html" class="anchorlink"></a>Using the iframe API to embed conferences in HTML</h2>
   <p>Once I got the default page working, it was easy to <a href="https://tech.interfluidity.com/html/jitsi-frame.html?roomName=Welcome+Room&amp;description=Welcome+to+an+embedded+teleconference!">make an HTML page that would embed a "conference room"</a>.</p>
   <hr>
   <h2><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#appendix-relevant-config-files-etc" id="appendix-relevant-config-files-etc" name="appendix-relevant-config-files-etc" class="anchorlink"></a>Appendix: Relevant config files, etc</h2>
   <h3><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#config-files" id="config-files" name="config-files" class="anchorlink"></a>Config files</h3>
   <ul>
    <li>/etc/prosody/conf.avail/jitsi.example.com.cfg.lua</li>
    <li>/etc/prosody/prosody.cfg.lua</li>
    <li>/etc/jitsi/jicofo/config</li>
    <li>/etc/jitsi/jicofo/jicofo.conf</li>
    <li>/etc/jitsi/jicofo/logging.properties</li>
    <li>/etc/jitsi/meet/loiter.interfluidity.com-config.js</li>
    <li>/etc/jitsi/videobridge/config</li>
    <li>/etc/jitsi/videobridge/jvb.conf</li>
    <li>/etc/jitsi/videobridge/logging.properties</li>
    <li>/etc/jitsi/videobridge/sip-communicator.properties</li>
    <li>/etc/nginx/nginx.conf</li>
   </ul>
   <h3><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#log-files" id="log-files" name="log-files" class="anchorlink"></a>Log files</h3>
   <ul>
    <li>/var/log/jitsi/jvb.log</li>
    <li>/var/log/jitsi/jicofo.log</li>
    <li>/var/log/prosody/prosody.log</li>
   </ul>
   <h3><a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/#unit-files" id="unit-files" name="unit-files" class="anchorlink"></a>Unit Files</h3>
   <ul>
    <li>coturn.service (<code>/lib/systemd/system/coturn.service</code>)</li>
    <li>jicofo.service (<code>/etc/init.d/jicofo; generated</code>)</li>
    <li>jitsi-videobridge2.service (<code>/lib/systemd/system/jitsi-videobridge2.service</code>)</li>
    <li>prosody.service (<code>/lib/systemd/system/prosody.service</code>)</li>
   </ul>
   <hr>
   <p><strong>Update 2023-08-22:</strong> Following the instructions <a href="https://jitsi.github.io/handbook/docs/devops-guide/secure-domain">here</a>, enabling simple authentication worked without a hitch. Registering a user is a command-line operation:</p>
   <pre><code class="language-plaintext"># prosodyctl register &lt;username&gt; loiter.interfluidity.com &lt;password&gt;
</code></pre>
   <p><code>loiter.interfluidity.com</code> is the authenticated domain in <code>/etc/prosody/prosody.cfg.lua</code>.</p>
   <p>I think it's possible to set up web registration, but for my purposes I don't want to. Only meeting hosts must authenticate. Anyone who knows the URL can join a conference.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-08-21 @ <a href="https://tech.interfluidity.com/2023/08/21/getting-started-with-jitsi/index.html" class="pubtime">04:00 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sun, 13 Aug 2023 12:45:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/index.html
      </guid>
      <description>
        <![CDATA[A few days ago, Joey Devilla gave an excellent talk for the Tampa Java Users Group on building an authenticated web service in Kotlin using Spring Boot and JWT (“JSON Web Tokens”). He worked through a detailed article he had previously published. I didn’t really understand how the authentication worked, so I decided to reimplement Joey’s project quick-and-dirty in order to figure it out. I used my own preferred tools — Scala and its libraries — to try to make sense of things. The (working,...]]>
      </description>
      <link>
        https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/index.html
      </link>
      <title>Building an authenticated web service in Scala with tapir and JWT</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>A few days ago, <a href="https://www.globalnerdy.com/">Joey Devilla</a> gave an <a href="https://www.meetup.com/tampa-jug/events/295033023/">excellent talk</a> for the <a href="https://www.meetup.com/tampa-jug/">Tampa Java Users Group</a> on building an authenticated web service in Kotlin using Spring Boot and JWT (“JSON Web Tokens”). He worked through <a href="https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/">a detailed article</a> he had previously published.</p>
   <p>I didn’t really understand how the authentication worked, so I decided to reimplement Joey’s project quick-and-dirty in order to figure it out. I used my own preferred tools — Scala and its libraries — to try to make sense of things.</p>
   <p>The (working, yay!) project is available <a href="https://github.com/swaldman/hotsauce-devilla">here</a>.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/#library-selection" id="library-selection" name="library-selection" class="anchorlink"></a>Library selection</h3>
   <p>After starting with some other favorites, I ultimately settled on <a href="https://tapir.softwaremill.com/en/latest/">tapir</a> + <a href="https://tapir.softwaremill.com/en/latest/server/ziohttp.html">zio-http</a> as my http stack and <a href="https://github.com/plokhotnyuk/jsoniter-scala">jsoniter-scala</a>.</p>
   <p>deVilla's API is heavily overloaded: All endpoints begin with, and several include only, the path <code>/api/hotsauces</code>. They are distinguished sometimes only by their HTTP methods or the types of subpath elements. <code>tapir</code> handled this nicely, while simpler libraries complained about overlapping routes and would have required some hand-coding to discriminate between endpoints.</p>
   <p>The API includes an update method (<code>PUT /api/hotsauces/:id</code>) that want users to be able to provide very partial specifications in JSON.</p>
   <p>The basic record the application manages is</p>
   <pre><code class="language-scala">case class HotSauce( id : Long, brandName : String, sauceName : String, description : String, url : String, heat : Int )
</code></pre>
   <p>We want to be able to perform partial updates, supplying JSON like <code>{ “heat” : 52300 }</code> and omitting everything else. So I define</p>
   <pre><code class="language-scala">case class HotSauceData( brandName : Option[String], sauceName : Option[String], description : Option[String], url : Option[String], heat : Option[Int] )
</code></pre>
   <p>For this to work, we need our JSON serializer to treat <code>Option</code>s in objects as literally optional values that can be omitted in reads (omitted values get read back as <code>None</code>). Some JSON libraries make this choice. Other libraries — like my usual go-to, <code>upickle</code> — encode optional values as JSON arrays, either empty or single-valued.</p>
   <p>You can <a href="https://github.com/com-lihaoyi/upickle/issues/75">make a strong case</a> for <code>upickle</code>’s choice on consistency grounds: If you are going to just sometimes omit <code>Option</code>-valued object fields, what do you do if you are encoding a sequence of <code>Option</code>s? Is it really safe to filter away the <code>None</code>s? Is it sufficiently informative to leave only ordinary values remaining? How should one enforce nested <code>Option</code> values, should <code>Some(Some(3))</code> really just be <code>3</code>?</p>
   <p>Still, for our application we want <code>Option</code>-valued fields to be omittable. We could have <a href="https://github.com/swaldman/zap/blob/9f7c1c885c258205fcb6f3e6a6a433f5b4772b47/com/mchange/zap/webfinger/Jrd.scala">written our own codec</a> to override <code>upickle</code>’s default behavior, but <a href="https://github.com/plokhotnyuk/jsoniter-scala">jsoniter-scala</a> implements what we're after by default, so I switched.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/#tapir-endpoints" id="tapir-endpoints" name="tapir-endpoints" class="anchorlink"></a>Tapir endpoints</h3>
   <p><code>tapir</code> turned out to be a great choice for this project. The heavy overloading of the API means we can just factor much of the API specification into a common "base" endpoint:</p>
   <pre><code class="language-scala">object TapirEndpoint:
  val Base          = endpoint.in("api").in("hotsauces").errorOut(either404or500)
  val Authenticated = Base.securityIn( auth.bearer[String]() )

  val GetAll      = Base.get.in(queryParams).out(jsonBody[List[HotSauce]])
  val GetCount    = Base.get.in("count").out(jsonBody[Long])
  val GetById     = Base.get.in(path[Long]).out(jsonBody[HotSauce])
  val PostNoId    = Authenticated.post.in(jsonBody[HotSauceData]).out(jsonBody[HotSauce])
  val PostWithId  = Authenticated.post.in(path[Long]).in(jsonBody[HotSauceData]).out(jsonBody[HotSauce])
  val PutById     = Authenticated.put.in(path[Long]).in(jsonBody[HotSauceData]).out(jsonBody[HotSauce])
  val DeleteById  = Authenticated.delete.in(path[Long]).out(jsonBody[HotSauce])
end TapirEndpoint
</code></pre>
   <p>For this quick and dirty project, I just wanted errors to dump stack trace to clients as <code>String</code> with a <code>500 Internal Server Error</code> status code, but I did want to emit <code>404 Not Found</code> when users asked for a record nor present. My base endpoint could standardize on an error-out of type <code>Option[String]</code>. We let <code>NONE</code> result in <code>404</code>, while <code>Some(stackTraceDump)</code> yields <code>500</code>.</p>
   <p>Since authentication will work identically across all authenticated inputs, I could create a single, modified base endpoint incorporating it. Final endpoints are built on top of either <code>Base</code> or <code>Authenticated</code>, each one specifying only distinct characteristics — request method, subpaths, whether they accept query params, what kind of output they would yield (to be JSON-encoded back to the client).</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/#tapir-authentication" id="tapir-authentication" name="tapir-authentication" class="anchorlink"></a>Tapir authentication</h3>
   <p><code>tapir</code> offers a special security workflow. When you specify endpoints, in addition to specifying "normal" inputs (path elements, query params, request headers, request body, etc.), you can specify special security inputs.</p>
   <pre><code class="language-scala">val Authenticated = Base.securityIn( auth.bearer[String]() )
</code></pre>
   <p>This specifies of security input of type <code>String</code>, to be extracted from a header like <code>Authorization: Bearer &lt;token-value&gt;</code>. At runtime, the endpoint will be ready with a security token, or else it will have responded <code>401 Unauthorized</code> before it ever hits our logic. Great!</p>
   <p>Using <a href="https://tapir.softwaremill.com/en/latest/server/ziohttp.html"><code>tapir</code> + <code>zio-http</code></a>, binding an endpoint to the logic that will handle it ordinarily looks something like this:</p>
   <pre><code class="language-scala">val serverEndpoint = myEndpoint.zServerLogic( logic )
</code></pre>
   <p>where <code>logic</code> is a function of type</p>
   <pre><code class="language-scala">MyEndpointInput =&gt; ZIO[Any,MyErrorOutput,MyIntendedOutput]
</code></pre>
   <p>Embedded in the definition of every tapir endpoint is a specification of an intended output, an error output, and an input. For example, our <code>GetAll</code> endpoint defined as…</p>
   <pre><code class="language-scala">val Base   = endpoint.in("api").in("hotsauces").errorOut(either404or500)
val GetAll = Base.get.in(queryParams).out(jsonBody[List[HotSauce]])
</code></pre>
   <p>defines an error output of <code>Option[String]</code> (see the <a href="https://github.com/swaldman/hotsauce-devilla/blob/main/hotsauce/HotSauceServer.scala">definition</a> of <code>either404or500</code>) and a desired output of <code>List[HotSauce]</code>. It defines an input of type <code>QueryParams</code>. So, for our endpoint logic, we need a function of type</p>
   <pre><code class="language-scala">QueryParams =&gt; ZIO[Any,Option[String],List[HotSauce]]
</code></pre>
   <p>That’s great!</p>
   <p>But what if we <em>also</em> have authentication input? How do we bind both our security logic and our application logic to the endpoint then? Let's look at an example:</p>
   <pre><code class="language-scala">val Base          = endpoint.in("api").in("hotsauces").errorOut(either404or500)
val Authenticated = Base.securityIn( auth.bearer[String]() )
val DeleteById    = Authenticated.delete.in(path[Long]).out(jsonBody[HotSauce])
</code></pre>
   <p>Now we have two inputs (a <code>String</code> as security input, and a <code>Long</code> extracted from a path element as normal application logic input).</p>
   <p>Rather than ask us to define one function for both of these inputs, <code>tapir</code> requires that we handle security logic first and separately. We have security logic that takes security input and converts it to some kind of authentication token, in our case of type</p>
   <pre><code class="language-scala">String =&gt; AuthenticationInfo
</code></pre>
   <p><em>Then</em> we supply a curried function, a function from the <code>AuthenticationInfo</code> to our usual logic function (which would be <code>Long ⇒ ZIO[Any,Option[String],HotSauce]</code> for our example). So we provide</p>
   <pre><code class="language-scala">AuthenticationInfo =&gt; Long =&gt; ZIO[Any,Option[String],HotSauce]
</code></pre>
   <p>for our second-stage, after-authentication logic.</p>
   <p><em><strong>Note:</strong> <code>AuthenticationInfo</code> is just a type we made up! The actual type of the credential we generate from security inputs is generic, entirely up to us as developers!</em></p>
   <p>The full process looks like</p>
   <pre><code class="language-scala">val serverEndpoint =
  myAuthenticatingEndpoint
    .zServerSecurityLogic( securityLogic ) // String =&gt; AuthenticationInfo
    .serverLogic( applicationLogic )       // AuthenticationInfo =&gt; Long =&gt; ZIO[Any,Option[String],HotSauce]
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/#decoding-jwt" id="decoding-jwt" name="decoding-jwt" class="anchorlink"></a>Decoding JWT</h3>
   <p>But what should our security logic actually look like? In our case, all we want to know is that the token decodes as a <a href="https://jwt.io/">JWT</a>, properly signed by our authentication provider (<code>auth0</code> here).</p>
   <p>Given a public key from our provider, we write a function that accepts a <code>String</code> bearer token and yields a <code>ZIO[Any,Option[String],AuthenticationInfo]</code>. The ZIO will evaluate successfully to <code>AuthenticationInfo</code> if and only if the bearer token decodes and validates.</p>
   <p>We use the Java <a href="https://github.com/jwtk/jjwt">jjwt</a> library to decode and verify.</p>
   <pre><code class="language-scala">type ZOut[T] = ZIO[Any,Option[String],T]

// t.fullStackTrace is an extension we've defined elsewhere
def mapPlainError[U]( task : Task[U] ) : ZOut[U] = task.mapError( t =&gt; Some( t.fullStackTrace ) )

def authenticate( key : Key )( bearerToken : String ) : ZOut[AuthenticationInfo] =
  val task = ZIO.attempt:
    val decoded =
      Jwts.parserBuilder()
        .setSigningKey(key)
        .build()
        .parse(bearerToken)
    println(s"Decoded JWT: ${decoded}")
    AuthenticationInfo() // someday, maybe I'll inspect the decoded key and include real information
  mapPlainError(task)
</code></pre>
   <p>For now, the “AuthenticationInfo” that we generate contains no information at all, other than that it managed to get constructed, which means that the token decoded. If we wanted more fine-grained authentication, we might inspect the contents of the decoded JWT and use that to define what would effectively become permissions for our different API methods in the <code>AuthenticationInfo</code> object. For now, we dump the decoded contents to the console, and see something like:</p>
   <pre><code class="language-plaintext">Decoded JWT: header={alg=RS256, typ=JWT, kid=M8YYbGPBjl7YNzuzm1Dnc},body={iss=https://&lt;my-auth0-domain&gt;.auth0.com/, sub=ojokl5P7EkyPBN2Vu7qcdqaIYDLDDtwm@clients, aud=https://hotsauces-devilla.example.mchange.com/, iat=1691883039, exp=1691969439, azp=ojokl5P7EkyPBN2Vu7qcdqaIYDLDDtwm, gty=client-credentials},signature=dYkYOZzPv77zZDpqwhCmuxio_oZWIVA9bydr5yCwqYcRrCdJRZW_bNzgHufI4LLM-fnVJsQP9pMl34yZGm4jDRzd9c8sEgeKaSozKL1HYW-g70epFAfGx0MG-STPVKMour4fE6ZMm3RkpApcxUrd4TL-lYRm5gDKZMX6XW0cgQSMJlM-PT5wuhkDiS-zqLFIkKhZplTjjbbxjjXxxbfF17EPBqi_og2X5T3FNpugejnfQH9EZiAZT4CXPea14NtaE2c3aZY0ivQPYn2bkoaV5WWwjGECsYP_e_HkA1rI994xv-ZXjbCNF7-4jRmOON1bUv_Nz0LB8X4mzKJDnYzD-g
</code></pre>
   <p>(I've masked the actual value of <code>&lt;my-auth0-domain&gt;</code>.)</p>
   <p>We needed a <code>java.security.Key</code> object, representing the public key of the authenticator that signs the JWT. We extract that from a <a href="https://community.auth0.com/t/where-is-the-auth0-public-key-to-be-used-in-jwt-io-to-verify-the-signature-of-a-rs256-token/8455/2">pem-formatted certificate</a> provided at a URL by <code>auth0.</code> (Signing keys are offered <a href="https://auth0.com/docs/get-started/tenant-settings/signing-keys">in several formats</a>.) This required a little bit of work — or, more accurately, some <a href="https://stackoverflow.com/questions/6358555/obtaining-public-key-from-certificate">scraping from StackExchange</a>:</p>
   <pre><code class="language-scala">def keyFromCertificatePemUrl( pemUrl : String ) : Key =
    Using.resource( new java.io.BufferedInputStream( new java.net.URL(pemUrl).openStream ) ): is =&gt;
      val cf = CertificateFactory.getInstance("X.509");
      val certificate = cf.generateCertificate(is)
      certificate.getPublicKey()
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/#a-tapir--scala-3-gotcha" id="a-tapir--scala-3-gotcha" name="a-tapir--scala-3-gotcha" class="anchorlink"></a>A tapir / Scala 3 gotcha!</h3>
   <p>For obscure reasons, when you construct “server endpoints” in calls like</p>
   <pre><code class="language-scala">val serverEndpoint = myEndpoint.zServerLogic( logic ) // yields ZServerEndpoint[R,C]
</code></pre>
   <p>the type of the generic variable <code>R</code>, which represents the requirements or “environment” of a <code>ZIO</code>, fruitlessly and mischievously gets inferred as <code>Nothing</code>. The effect of this is that, before you can actually run the logic, or run the server that could run the logic, you are required to supply a <code>scala.Nothing</code>, instances of which by definition do not exist, and so cannot be provided.</p>
   <p>If, when trying to compile a <code>tapir</code> / <code>zio-http</code> application you see a message like…</p>
   <pre><code class="language-plaintext">[error] ──── ZIO APP ERROR ───────────────────────────────────────────────────
[error] 
[error]  Your effect requires a service that is not in the environment.
[error]  Please provide a layer for the following type:
[error] 
[error]    1. scala.Nothing
[error] 
[error]  Call your effect's provide method with the layers you need.
[error]  You can read more about layers and providing services here:
[error]  
[error]    https://zio.dev/reference/contextual/
[error] 
[error] ──────────────────────────────────────────────────────────────────────
</code></pre>
   <p>…then you have very likely run into this type-inference issue.</p>
   <p>In our code you’ll see expressions like</p>
   <pre><code class="language-scala">GetAll.zServerLogic( allFiltered(db) ).widen[Any]
</code></pre>
   <p>The <code>.widen[Any]</code> is to override the inferred environment type to <code>Any</code> so that anything will do, rather than specify that an impossible <code>Nothing</code> is required.</p>
   <h3><a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/#conclusion" id="conclusion" name="conclusion" class="anchorlink"></a>Conclusion</h3>
   <p>That’s about it!</p>
   <p>If you’d like to see the full code, the project is <a href="https://github.com/swaldman/hotsauce-devilla">here</a>. Instructions for running it are in the <a href="https://github.com/swaldman/hotsauce-devilla/blob/main/README.md">README</a>. To play with it, you'll have to set up an account on <code>auth0</code>, or else use (or become!) some similar JWT authentication provider.</p>
   <p>All of this is based on Joey deVilla’s excellent work, and you'll find very detailed instructions for setting up JWT authentication in <a href="https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/">his article</a>.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-08-13 @ <a href="https://tech.interfluidity.com/2023/08/13/building-an-authenticated-web-service-in-scala-with-tapir-and-jwt/index.html" class="pubtime">12:45 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 29 Jul 2023 10:20:00 -0400</pubDate>
      <guid isPermalink="true">
        https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html
      </guid>
      <description>
        <![CDATA[Functional effect libraries are an important part of the Scala ecosystem, so I've been playing with them for a while. The static-site generator that produces this site, as well as the templating engine that underlies it are both built with ZIO. But in both those projects, I've quietly wondered whether whatever benefit I get from working through functional effects outweighs the extra ceremony and abstraction it requires. One likes to keep up with the times, sure, but is the new thing progress or...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html</link>
      <title>Building a resilient RSS feed unifier with ZIO</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss uid-resilient-RSS-feed-unifier">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>Functional effect libraries are an important part of the Scala ecosystem, so I've been playing with them for a while. The <a href="https://github.com/swaldman/unstatic">static-site generator that produces this site</a>, as well as the <a href="https://github.com/swaldman/untemplate-doc">templating engine</a> that underlies it are both built with ZIO.</p>
   <p>But in both those projects, I've quietly wondered whether whatever benefit I get from working through functional effects outweighs the extra ceremony and abstraction it requires. One likes to keep up with the times, sure, but is the new thing progress or merely fashion?</p>
   <p>I now spread my writing over <a href="https://www.interfluidity.com/">several</a> <a href="https://drafts.interfluidity.com/">blogs</a> <a href="https://tech.interfluidity.com/">and</a> <a href="https://econtwitter.net/@interfluidity">microblogs</a>. A few days ago, I decided to write a service to unify the sites' several RSS feeds into a convenient single feed for all of my writing. (Actually two feeds: <a href="https://www.interfluidity.com/unify-rss/all-blogs.rss"><code>all-blogs.rss</code></a> and <a href="https://www.interfluidity.com/unify-rss/all-blogs-and-microblogs.rss"><code>all-blogs-and-microblogs.rss</code></a>) The service needs periodically to load source feeds from each of the several sites, then merge them into a single RSS document and stand ready to serve them to subscribers.</p>
   <p>The project is <a href="https://github.com/swaldman/unify-rss"><code>unify-rss</code></a> on github.</p>
   <p>It's a pretty trivial application, but it does need to be fault tolerant. It oughtn't break if, for example, one of the source feeds go down.</p>
   <p>Error-handling / retry logic needn't complicated, but in my experience it often becomes verbose. It can render core "happy path" functionality less clear and readable, and make applications more complicated to maintain. But ZIO really shines at concisely "transforming effects", so that retry logic mostly stays out of the way. This was the first project where I was sure the extra indirection of functional effects was "worth it".</p>
   <p>Simplifying, the basic logic of the application looks like this:</p>
   <pre><code class="language-scala">import scala.collection.*
import scala.xml.{Elem, XML}
import java.net.URL
import zio.*

// this is much simpler than the real AppConfig!
case class AppConfig( sourceUrls : immutable.Seq[URL], refreshSeconds : Int )

def fetchFeed(url : URL) : Task[Elem] =
  ZIO.attemptBlocking(XML.load(url))

def fetchFeeds(urls : Iterable[URL]) : Task[immutable.Seq[Elem]] =
  ZIO.collectAllPar(Chunk.fromIterable(urls.map(fetchFeed)))

def mergeFeeds( config : AppConfig, elems : immutable.Seq[Elem] ) : Task[immutable.Seq[Byte]] = ???

def initMergeFeed( config : AppConfig ) : Task[Ref[immutable.Seq[Byte]]]  =
  for
    elems &lt;- fetchFeeds( config.sourceUrls )
    feed  &lt;- mergeFeeds( config, elems )
    ref   &lt;- Ref.make(feed)
  yield ref

def updateMergedFeed( config : AppConfig, ref : Ref[immutable.Seq[Byte]] ) : Task[Unit] =
  for
    elems &lt;- fetchFeeds( config.sourceUrls )
    feed  &lt;- mergeFeeds( config, elems )
    _     &lt;- ref.set(feed)
  yield ()

def periodicallyUpdateMergedFeed( config : AppConfig, ref : Ref[immutable.Seq[Byte]] ) : Task[Long] =
  updateMergedFeed( config, ref ).schedule( Schedule.fixed( Duration.fromSeconds(config.refreshSeconds) ) )

// use tapir withh http-zio to create an effect starting a web endpoint that serves RSS from the ref
def server(ac : AppConfig, ref : Ref[immutable.Seq[Byte]] ) : UIO[ExitCode] = ???

object Main extends ZIOAppDefault:
  val config : AppConfig = ???

  override def run =
    for
      ref      &lt;- initMergeFeed( config )
      _        &lt;- periodicallyUpdateMergedFeed( config, ref ).forkDaemon
      exitCode &lt;- server( config, ref )
    yield exitCode
</code></pre>
   <p>It's super simple. We set up a thread-safe (well, um, fiber-safe) <a href="https://javadoc.io/doc/dev.zio/zio_3/latest/zio/Ref.html"><code>zio.Ref</code></a> to hold the initial merged feed, then we fork a separate fiber to run an effect that periodically updates the <code>Ref</code>, then we start up an http service that serves the contents of the ref.</p>
   <p>The super concise refresh loop logic was definitely a ZIO advantage.</p>
   <pre><code class="language-scala">updateMergedFeed( config, ref ).schedule( Schedule.fixed( Duration.fromSeconds(config.refreshSeconds) ) )
</code></pre>
   <p>But we are not resilient yet! What if <code>updateMergedFeed(...)</code> fails? For now the effect would just end, and our server would break. An RSS feed that never updates is worse than no RSS feed at all.</p>
   <p>But, with ZIO it is trivial to solve this problem. We just define a retry <a href="https://javadoc.io/doc/dev.zio/zio_3/latest/zio/Schedule.html"><code>Schedule</code></a>, and have the update attempt retry until it hopefully, eventually, succeeds.</p>
   <pre><code class="language-scala">def retrySchedule( config : AppConfig ) =
  Schedule.exponential( 10.seconds, 1.5d ) || Schedule.fixed( Duration.fromSeconds( config.refreshSeconds ) ) 

def periodicallyUpdateMergedFeed( config : AppConfig, ref : Ref[immutable.Seq[Byte]] ) : Task[Long] =
  val resilient = updateMergedFeed( config, ref ).schedule( retrySchedule( config ) )
  resilient.schedule( Schedule.fixed( Duration.fromSeconds(config.refreshSeconds) ) )
</code></pre>
   <p>This retry schedule will make a first retry attempt after 10 seconds, then after 15 seconds, then after (1.5<sup>2</sup> * 10 =) 22.5 seconds, etc. — retrying less and less often but no less often than the configured refresh frequency for the unified feed.</p>
   <p>Cool! Now our application won't break if any part of an update attempt fails, but will sensibly retry until it succeeds.</p>
   <p>But.</p>
   <p>What if it never does succeed? What if just one of the several source feeds getting merged goes fairly permanently down? Should that prevent the merged feed from updating indefinitely?</p>
   <p>I decided that it should not, and that instead if a single feed is unavailable, we should just omit its items and merge the rest. So, we revise...</p>
   <pre><code class="language-scala">def fetchFeed(url : URL) : Task[Option[Elem]] =
  ZIO.attemptBlocking(XML.load(url))
    .foldCauseZIO(
      cause =&gt; ZIO.logCause(s"Problem loading feed '${url}'", cause) *&gt; ZIO.succeed(None),
      elem =&gt; ZIO.succeed(Some(elem))
    )

def fetchFeeds(urls : Iterable[URL]) : Task[immutable.Seq[Elem]] =
  ZIO.collectAllPar(Chunk.fromIterable(urls.map(fetchFeed)))
    .map( _.collect { case Some(elem) =&gt; elem } )
</code></pre>
   <p>Now we recover from an individual feed-fetch failure, and return an <code>Option</code>, <code>Some(elem)</code> on success, <code>None</code> otherwise. We then collect the successes and build our merged feed from those.</p>
   <p>But maybe we should retry our update attempts for a source feed before returning <code>None</code>, in case there's a very transient hitch?</p>
   <pre><code class="language-scala">def fetchFeed(url : URL) : Task[Option[Elem]] =
  ZIO.attemptBlocking(XML.load(url))
    .retry( Schedule.spaced( 6.seconds ).upTo( 60.seconds ) )
    .foldCauseZIO(
      cause =&gt; ZIO.logCause(s"Problem loading feed '${url}'", cause) *&gt; ZIO.succeed(None),
      elem =&gt; ZIO.succeed(Some(elem))
    )
</code></pre>
   <p>Great! Now we'll try a source feed for up to a minute before giving up on it.</p>
   <p>The actual application is more complicated than this, mostly because instead of serving just a single merged feed, it permits you to configure any number of feeds to merge from different groups of source feeds. So, for example, where we have a <code>Ref</code> in the logic above, <code>unify-rss</code> has a <code>Map</code> of feed paths to <code>Ref</code>. The logic has to update all the <code>Ref</code>s, rather than just a single one, periodically.</p>
   <p>But that's just book-keeping. At its core, this was a pretty simple app. With ZIO the logic could be expressed safely and concisely, and it was easy to evolve the app from an initial, brittle sketch to one that should be resilient as a permanent service.</p>
   <hr>
   <p><em>Note: I recently went through <a href="https://rockthejvm.com/p/zio">Daniel Ciocîrlan's ZIO 2 video course</a>, which was very, very helpful for this project. Highly recommended!</em></p>
   <hr>
   <p><strong>Update 2023-11-10:</strong> I've added to this app functionality to generate feeds as static files, rather than to serve them from memory as a (resilient!) daemon. That saves some memory and overhead on the server side. Instead of periodically updating feeds in the app, now we just define a <a href="https://github.com/swaldman/unify-rss/blob/interfluidity/unify-rss.timer"><code>systemd</code> timer</a> to rerun a static-file generating version of the app every half hour. It's a less sexy app somehow, this way, but a bit simpler and conserves memory.</p>
   <p>We still do the retries described above, when feeds fail to load. But we let <code>systemd</code> take care of the periodic regeneratios.</p>
   <p>See the current <a href="https://github.com/swaldman/unify-rss/blob/main/README.md"><code>README</code></a> for more information.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-07-29 @ <a href="https://tech.interfluidity.com/2023/07/29/building-a-resilient-rss-feed-unifier-with-zio/index.html" class="pubtime">10:20 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Wed, 19 Jul 2023 19:00:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/index.html</guid>
      <description>
        <![CDATA[I want to learn more about how to work with "fediverse" tech — Mastodon, ActivityPub, WebFinger, etc. $ mastopost --text "Hi. This is some stupid shit I wanna say."
 One thing I soon hope to do is set up my own microblog that mirrors its posts to Mastodon, rather than posting directly to Mastodon, reflective of a kind of local-first, steward-your-own-stuff ethos. An instant-gratification way to learn to do something is to write a useful script that does it. So, yesterday I wrote my first...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/index.html</link>
      <title>Scripting Mastodon in Scala</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I want to learn more about how to work with "fediverse" tech — <a href="https://joinmastodon.org/">Mastodon</a>, <a href="https://activitypub.rocks/">ActivityPub</a>, <a href="https://webfinger.net/">WebFinger</a>, etc.</p>
   <pre><code class="language-text">$ mastopost --text "Hi. This is some stupid shit I wanna say."
</code></pre>
   <p>One thing I soon hope to do is set up my own microblog that mirrors its posts to Mastodon, rather than posting directly to Mastodon, reflective of a kind of <a href="https://www.inkandswitch.com/local-first/">local-first</a>, steward-your-own-stuff ethos.</p>
   <p>An instant-gratification way to learn to do something is to write a useful script that does it. So, yesterday I wrote <a href="https://github.com/swaldman/scalascripts-misc/blob/769dd058844965e2de02f3ad2a50f6fcd3764d01/bin/mastopost">my first version of a tool</a> called <code>mastopost</code>. This version successfully posted text, but did not implement support for media attachments.</p>
   <h3><a href="https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/#basic-status-posting" id="basic-status-posting" name="basic-status-posting" class="anchorlink"></a>Basic status posting</h3>
   <p>With the help of <a href="https://roytang.net/2021/11/mastodon-api-python/">a post by Roy Tang</a>, using Li Haoyi's wonderful libraries <a href="https://github.com/com-lihaoyi/requests-scala">requests-scala</a> and <a href="https://com-lihaoyi.github.io/PPrint/">pprint</a>, this was super simple. The relevant Mastodon API docs are <a href="https://docs.joinmastodon.org/methods/statuses/#create">here</a>.</p>
   <p>The heart of the script was initially just:</p>
   <pre><code class="language-scala">import java.net.URLEncoder

// images not yet supported
case class Config( text : String, url : String, accessToken : String, images : List[String], verbose : Boolean)

def pathJoin( a : String, b : String ) : String =
  val normA = if a.last == '/' then a.init else a
  val normB = if b.head == '/' then b.tail else b
  s"${normA}/${normB}"

// the return value will become the exit code of our script
def post( config : Config ) : Int =
  val statusEndpoint      = pathJoin( config.url, "api/v1/statuses/" )
  val headers             = Map (
    "Authorization" -&gt; s"Bearer ${config.accessToken}",
    "Content-Type"  -&gt;  "application/x-www-form-urlencoded",
  )
  val formData = s"""status=${URLEncoder.encode(config.text, "UTF-8")}"""
  requests.post( statusEndpoint, data=formData, headers=headers )
  0 // if it didn't fail with Exception, send a good exit code!
</code></pre>
   <p>This works fine!</p>
   <p>You do have to create an access token. Go to the "Preferences" page of your logged-in Mastodon instance, then select "Development", then press the "New Application" button and fill out the form. When you are done, you will have an access code that will work!</p>
   <p>Eventually my <code>post(...)</code> method grew, only because I wanted to be able to verbosely inspect responses, including bad responses.</p>
   <pre><code class="language-scala">// the return value will become the exit code of our script
def post( config : Config ) : Int =
  val statusEndpoint      = pathJoin( config.url, "api/v1/statuses/" )
  val headers             = Map (
    "Authorization" -&gt; s"Bearer ${config.accessToken}",
    "Content-Type"  -&gt;  "application/x-www-form-urlencoded",
  )
  val formData = s"""status=${URLEncoder.encode(config.text, "UTF-8")}"""

  // we catch failures resulting from bad status codes, rather than just
  // fail with exception, so we can print more informative errors
  val response =
    try requests.post( statusEndpoint, data=formData, headers=headers )
    catch
      case rfe : requests.RequestFailedException =&gt; rfe.response
      
  if config.verbose then System.err.println( pprint( response ) )
  if response.statusCode == 200 then
    if config.verbose then System.err.println("Post succeeded.")
    0 // good exit code
  else
    val rt = response.text()
    val rtPart = if rt.isEmpty then "no response text." else s"response text: ${response.text()}"
    System.err.println(s"Attempt to post failed! Status code ${response.statusCode}, ${rtPart}")
    9 // arbitrary bad exit code
</code></pre>
   <h3><a href="https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/#a-beautiful-command-line" id="a-beautiful-command-line" name="a-beautiful-command-line" class="anchorlink"></a>A beautiful command line</h3>
   <p>The rest of this <a href="https://github.com/swaldman/scalascripts-misc/blob/769dd058844965e2de02f3ad2a50f6fcd3764d01/bin/mastopost">first version</a> of the script is just command-line parsing.</p>
   <p>I really enjoy Ben Kirwin's library <a href="https://ben.kirw.in/decline/usage.html">decline</a>. It lets me write extremely tight code to validate and parse the command line, and gives me beautiful usage messages like this:</p>
   <pre><code class="language-text">Usage: mastopost --text &lt;string&gt; [--url &lt;string&gt;] [--access-token &lt;string&gt;] [--image &lt;string&gt;]... [--verbose]

Posts toots to Mastodon.

Options and flags:
    --help
        Display this help text.
    --text &lt;string&gt;, -t &lt;string&gt;
        The text of your toot.
    --url &lt;string&gt;, -u &lt;string&gt;
        The URL of the instance to which you wish to post.
    --access-token &lt;string&gt;, -a &lt;string&gt;
        The access token to authenticate under.
    --image &lt;string&gt;
        The file or URL of images to attach.
    --verbose
        Print more information to the console.

Environment Variables:
    MASTO_INSTANCE_URL=&lt;string&gt;
        The URL of the instance to which you wish to post.
    MASTO_ACCESS_TOKEN=&lt;string&gt;
        The access token to authenticate under.
</code></pre>
   <p>The command-line parsing code is reproduced below.</p>
   <pre><code class="language-scala">
import com.monovore.decline.*
import cats.implicits.*        // for mapN

case class Config( text : String, url : String, accessToken : String, images : List[String], verbose : Boolean)

val urlHelp = "The URL of the instance to which you wish to post."
val accessTokenHelp = "The access token to authenticate under."

val text    = Opts.option[String] ("text",         short="t", help="The text of your toot.")
val url     = Opts.option[String] ("url",          short="u", help=urlHelp)                  orElse Opts.env[String]("MASTO_INSTANCE_URL", help=urlHelp)
val token   = Opts.option[String] ("access-token", short="a", help=accessTokenHelp)          orElse Opts.env[String]("MASTO_ACCESS_TOKEN", help=accessTokenHelp)

val images  = Opts.options[String]("image", help = "The file or URL of images to attach.").orEmpty
val verbose = Opts.flag("verbose", help="Print more information to the console.").orFalse
val allOpts = (text, url, token, images, verbose).mapN( (t, u, at, i, v) =&gt; Config(t,u,at,i,v) ) // a bit annoying

// Insert the mastodon post code from above here...

val command = Command(name="mastopost", header="Posts toots to Mastodon.")( allOpts )

command.parse(args.toIndexedSeq, sys.env) match
  case Left(help) =&gt;
    println(help)
    System.exit(1)
  case Right( config ) =&gt;
    val exitCode = post( config )
    System.exit(exitCode)

</code></pre>
   <p>The <code>command.parse(...)</code> line yields an <code>Either</code>, which gives me my <code>Config</code> object if everything's cool, or the usage text to print if it is not.</p>
   <p>Note how nicely <code>decline</code> supports values that can be supplied either as command-line options or as enviroment variables. It enforces that instance URL and access token must be supplied, but accepts them from either source.</p>
   <p><strong>Be careful though! <code>decline</code> won't find environment variables unless you explicitly supply the environment you want (as a <code>Map[String,String]</code>) in the call to <code>command.parse(...)</code>.</strong> Usually you will just supply <code>sys.env</code>. This tripped me up for a few minutes.</p>
   <h3><a href="https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/#supporting-media-attachments" id="supporting-media-attachments" name="supporting-media-attachments" class="anchorlink"></a>Supporting media attachments</h3>
   <p>To support media attachments, you</p>
   <ol>
    <li>Hit a <a href="https://docs.joinmastodon.org/methods/media/#v2">separate API endpoint</a> to upload your media (up to four)</li>
    <li>Parse out the <code>id</code> from the JSON response(s) of the media upload(s)</li>
    <li>Include a <code>media_ids</code> field in your status post, containing an array of the <code>id</code>, treated as strings, not numbers</li>
   </ol>
   <p>As I write, <a href="https://github.com/swaldman/scalascripts-misc/blob/dc1ec717284cc4ea5ef2fa84d18d75dfe5fff531/bin/mastopost">this</a> is the current version of my script.</p>
   <p>Uploading media turned out to be very easy. Uploads are supposed to be in <code>multipart/form-data</code> format, which <code>requests-scala</code> supports painlessly. The image is uploaded as of the fourth statement below. Again, the method is long only because I wanted to support detailed tracing of bad outcomes when the <code>--verbose</code> flag is set.</p>
   <p>We have to decode a JSON response, which we do with Li Haoyi's <code>ujson</code> library. (See <a href="https://com-lihaoyi.github.io/upickle/">upickle</a> for docs.)</p>
   <p>Note that a success in Mastodon's API for uploading media can be the usual good HTTP response code <code>200</code>, or also <code>202</code> for media that may take longer to process. That's why our test for success is</p>
   <blockquote>
    <p><code>response.statusCode / 100 == 2</code></p>
   </blockquote>
   <p>rather than</p>
   <blockquote>
    <p><code>response.statusCode == 200</code>.</p>
   </blockquote>
   <pre><code class="language-scala">def postMedia( config : Config, mediaSource : InputStream, filename : String ) : String = // returns the ID of the new media object
  val mediaEndpoint = pathJoin( config.url, "api/v2/media" )
  val multipart = requests.MultiPart( requests.MultiItem("file", data=mediaSource, filename=filename) )
  val headers = Map (
    "Authorization" -&gt; s"Bearer ${config.accessToken}",
  )
  val response =
    try requests.post( mediaEndpoint, data=multipart, headers=headers )
    catch
      case rfe : requests.RequestFailedException =&gt; rfe.response
  if response.statusCode / 100 == 2 then    
    if config.verbose then
      System.err.println(s"Media upload succeeded:")
      System.err.println(pprint(response))
      System.err.println()
    var jsonOut = ujson.read(response.text())
    jsonOut.obj("id").str // the id comes back as a JSON *String*, not a number
  else
    val rt = response.text()
    val rtPart = if rt.isEmpty then "no response text." else s"response text: ${response.text()}"
    val msg = s"Upload of media '${filename}' failed! Status code ${response.statusCode}, ${rtPart}"
    System.err.println(msg)
    if config.verbose then System.err.println(pprint(response))
    throw new Exception(msg)
</code></pre>
   <p>I wrote this in terms of <code>InputStream</code> rather than files, because I wanted to support URLs as media sources. It annoys me to have to manually download images, then reupload, when I want to attach an image from the internet as a status.</p>
   <p>Once we have this method, we just have to turn our media filenames and/or URLs into <code>InputStream</code>s with some filename, hit the method, then post our status as we did before, except with a new array field called <code>media_ids</code>.</p>
   <p>I had a hard time making this work, though, hitting the status with a form-data-encoded request as we did before. However I tried to encode <code>media_ids</code>, I couldn't get media to attach, even after reviewing Mastodon's <a href="https://docs.joinmastodon.org/client/intro/#form-data">documentation of its conventions for form data</a>.</p>
   <p>Thanks to <a href="https://chrisjones.io/articles/using-php-and-curl-to-post-media-to-the-mastodon-api/">Chris Jones</a>, who also had a hard time getting form-data-encoded requests to attach media, I learned that you can hit these endpoints with JSON rather than form data. <code>media_ids</code> worked just fine with a JSON-ifed version of <code>post(...)</code>:</p>
   <pre><code class="language-scala">// the return value will become the exit code of our script
def post( config : Config ) : Int =
  val mediaIds            = prepareMedia( config )
  val statusEndpoint      = pathJoin( config.url, "api/v1/statuses/" )
  val headers             = Map (
    "Authorization" -&gt; s"Bearer ${config.accessToken}",
    "Content-Type"  -&gt;  "application/json",
  )

  val jsonData =
    val obj = ujson.Obj(
      "status" -&gt; ujson.Str(config.text),
      "media_ids" -&gt; ujson.Arr( mediaIds.map( ujson.Str.apply )* ),
    )
    ujson.write(obj)

  // we catch failures resulting from bad status codes, rather than just
  // fail with exception, so we can print more informative errors
  val response =
    try requests.post( statusEndpoint, data=jsonData, headers=headers )
    catch
      case rfe : requests.RequestFailedException =&gt; rfe.response
      
  if config.verbose then System.err.println( pprint( response ) )
  if response.statusCode == 200 then
    if config.verbose then System.err.println("Post succeeded.")
    0 // good exit code
  else
    val rt = response.text()
    val rtPart = if rt.isEmpty then "no response text." else s"response text: ${response.text()}"
    System.err.println(s"Attempt to post failed! Status code ${response.statusCode}, ${rtPart}")
    9 // arbitrary bad exit code
</code></pre>
   <p>There's a bit of busy-work getting from arguments to <code>InputStream</code> plus <code>filename</code> (which I bundle together as <code>MediaStream</code> in the script), but it's straightforward if slightly more verbose than I had hoped.</p>
   <p>Anyway, please check out <a href="https://github.com/swaldman/scalascripts-misc/blob/main/bin/mastopost">the latest evolving version of the script</a> for more details.</p>
   <h3><a href="https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/#miscellaneous" id="miscellaneous" name="miscellaneous" class="anchorlink"></a>Miscellaneous</h3>
   <p>Since the initial version, I've modified the <code>image</code> command-line argument to be <code>media</code> instead, since in theory you might want to upload videos and stuff.</p>
   <p>Right now <code>--text</code> is a required argument to the script, but it's legal to have media-only posts. Sometime soon, I'll try to modify the script to support that.</p>
   <p>For now, I'm going to keep <code>MASTO_INSTANCE_URL</code> and <code>MASTO_ACCESS_TOKEN</code> set in my environment, and posting will just be</p>
   <pre><code class="language-text">$ mastopost --text "Hi. This is some stupid shit I wanna say."
</code></pre>
   <p>along with some optional stupid <code>--media</code>.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-07-19 @ <a href="https://tech.interfluidity.com/2023/07/19/scripting-mastodon-in-scala/index.html" class="pubtime">07:00 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 20 May 2023 17:00:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/05/20/pdfcat-as-a-scala-script/index.html</guid>
      <description>
        <![CDATA[I am really enjoying scripting in Scala with scala-cli. Scala has long supported scripting in theory, but for your scripts to run, all the dependencies had to be preinstalled in your CLASSPATH. That rendered the feature not so useful. Under scala-cli, however, dependencies are delightfully automanaged for your script. This has rendered JVM scripting practical and convenient for me. I find that psychologically this is a BFD. It dissolves the boundary between app and library. Usually, I want to...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/05/20/pdfcat-as-a-scala-script/index.html</link>
      <title>pdfcat as a Scala script</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I am really enjoying scripting in Scala with <a href="https://scala-cli.virtuslab.org/"><code>scala-cli</code></a>.</p>
   <p>Scala has long supported scripting in theory, but for your scripts to run, all the dependencies had to be preinstalled in your <code>CLASSPATH</code>. That rendered the feature not so useful. Under <code>scala-cli</code>, however, dependencies are delightfully automanaged for your script. This has rendered JVM scripting practical and convenient for me.</p>
   <p>I find that psychologically this is a BFD. It dissolves the boundary between app and library. Usually, I want to get something done, I look for an app. If I want to merge a bunch of PDFs together, I might fire up <i>Adobe Acrobat</i>, curse myself, and mess around until I figure out how you do that.</p>
   <p>However, the Java <a href="https://pdfbox.apache.org/">PDFBox</a> library exists. (<a href="https://itextpdf.com/">itextpdf</a> too!) With easy scripting, the library can substitute for the app. A glance at a <a href="https://www.tutorialspoint.com/pdfbox/pdfbox_merging_multiple_pdf_documents.htm">tutorial</a> on how to merge PDFs with PDFBox and we were <a href="https://github.com/swaldman/scalascripts-misc/blob/main/bin/pdfcat">off to the races</a>.</p>
   <p>The meaningful code is trivial:</p>
   <pre><code class="language-scala">val files = args.map(fn =&gt; new File(fn))
val merger = new PDFMergerUtility();
merger.setDestinationFileName(args.last)
files.init.foreach( merger.addSource )
merger.mergeDocuments()
</code></pre>
   <p>The <a href="https://github.com/swaldman/scalascripts-misc/blob/main/bin/pdfcat">full script</a> is longer than this, of course, but the rest is sanity-checking the command line and aborting if it isn't right.</p>
   <p>In fact, I often find command-line parsing outweighs functional code when I write scripts. Of course that's all optional — you can skip a nice command line if you really mean to script a one-off. But it is great to retain the capacity to solve probems you've already solved instantly on a nice command line. And it's great practice with the Scala ecosystem's rich set of command-line parsing libraries.</p>
   <p>A few days ago I needed to quickly serve a directory by HTTP from my laptop. There's some Python command I've used for that in the past. I'd have to look it up, and figure out how to get it to bind to the laptop's public interface rather than localhost. It was quick instead to script up Li Haoyi's <a href="https://github.com/com-lihaoyi/cask"><code>cask</code></a> library, and build a nice command line with <a href="https://ben.kirw.in/decline/"><code>decline</code></a>. Check out <a href="https://github.com/swaldman/scalascripts-misc/blob/main/bin/http-serve"><code>http-serve</code></a>.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-05-20 @ <a href="https://tech.interfluidity.com/2023/05/20/pdfcat-as-a-scala-script/index.html" class="pubtime">05:00 PM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
    <item>
      <pubDate>Sat, 20 May 2023 04:05:00 -0400</pubDate>
      <guid isPermalink="true">https://tech.interfluidity.com/2023/05/20/a-notebook/index.html</guid>
      <description>
        <![CDATA[I hope to use this site as a kind of notebook of tech stuff I think about or encounter. I do a fair amount of online writing, but it's mostly finance, economics, politics, policy. But I also do a lot of coding. Stuff comes up that I think is worth noting, but that would not really interest my blog readership. So, now I have here. by Steve Randy Waldman on 2023-05-20 @ 04:05 AM...]]>
      </description>
      <link>https://tech.interfluidity.com/2023/05/20/a-notebook/index.html</link>
      <title>A notebook</title>
      <dc:creator><![CDATA[Steve Randy Waldman]]></dc:creator>
      <content:encoded>
        <![CDATA[<article class="presentation-rss">
 <div class="entry-header"></div>
 <div class="entry-body">
  <div class="flexmark markdown">
   <p>I hope to use this site as a kind of notebook of tech stuff I think about or encounter. I do a fair amount of <a href="https://www.interfluidity.com/">online</a> <a href="https://drafts.interfluidity.com/">writing</a>, but it's mostly finance, economics, politics, policy.</p>
   <p>But I also do a lot of coding. Stuff comes up that I think is worth noting, but that would not really interest my blog readership.</p>
   <p>So, now I have here.</p>
  </div>
 </div>
 <div class="entry-footer">
  <div class="post-metainfo">
   <hr>
   <div>
    by Steve Randy Waldman on 2023-05-20 @ <a href="https://tech.interfluidity.com/2023/05/20/a-notebook/index.html" class="pubtime">04:05 AM EDT</a>
   </div>
  </div>
 </div>
</article>
<div class="after-article"></div>
<!-- after-article -->]]>
      </content:encoded>
    </item>
  </channel>
</rss>
